<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClangNet</name>
    </assembly>
    <members>
        <member name="T:ClangNet.EncodingAnalyser">
            <summary>
            Text Encoding Analyser
            </summary>
        </member>
        <member name="M:ClangNet.EncodingAnalyser.Analyse(System.Byte[])">
            <summary>
            Analyse Encoding
            </summary>
            <param name="bytes">Text Data Byte Array</param>
            <returns>
            Success : Encoding Object
            Failed : null
            </returns>
        </member>
        <member name="T:ClangNet.FileManager">
            <summary>
            File Manager
            </summary>
        </member>
        <member name="M:ClangNet.FileManager.AnalyseEncoding(System.String)">
            <summary>
            Analyse File Encoding
            </summary>
            <param name="path">File Path</param>
            <returns>File Encoding</returns>
        </member>
        <member name="T:ClangNet.BoolEx">
            <summary>
            Bool Extensions
            </summary>
        </member>
        <member name="M:ClangNet.BoolEx.ToInt(System.Boolean)">
            <summary>
            Convert To Int
            </summary>
            <param name="value">Bool Value</param>
            <returns>Int Value</returns>
        </member>
        <member name="M:ClangNet.BoolEx.ToUInt(System.Boolean)">
            <summary>
            Convert To Unsigned Int
            </summary>
            <param name="value">Bool Value</param>
            <returns>Unsigned int</returns>
        </member>
        <member name="M:ClangNet.BoolEx.ToBool(System.Int32)">
            <summary>
            Convert To Bool
            </summary>
            <param name="value">Int Value</param>
            <returns>Bool Value</returns>
        </member>
        <member name="M:ClangNet.BoolEx.ToBool(System.UInt32)">
            <summary>
            Convert To Bool
            </summary>
            <param name="value">Unsigned Int Value</param>
            <returns>Bool Value</returns>
        </member>
        <member name="T:ClangNet.ClangObject">
            <summary>
            Clang Object
            </summary>
        </member>
        <member name="P:ClangNet.ClangObject.Handle">
            <summary>
            Native Clang Object Pointer
            </summary>
        </member>
        <member name="M:ClangNet.ClangObject.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Object Pointer</param>
        </member>
        <member name="T:ClangNet.ClangValueObject`1">
            <summary>
            Clang Class Value Object
            </summary>
            <typeparam name="T">Sub Class Type</typeparam>
        </member>
        <member name="M:ClangNet.ClangValueObject`1.EqualsCore(`0)">
            <summary>
            Check Equality Core
            </summary>
            <param name="other">Other Object</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangValueObject`1.GetHashCodeCore">
            <summary>
            Get Hash Code Core
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="M:ClangNet.ClangValueObject`1.op_Equality(ClangNet.ClangValueObject{`0},ClangNet.ClangValueObject{`0})">
            <summary>
            Check Equality
            </summary>
            <param name="left">Left Value Object</param>
            <param name="right">Right Value Object</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangValueObject`1.op_Inequality(ClangNet.ClangValueObject{`0},ClangNet.ClangValueObject{`0})">
            <summary>
            Check Not Equality
            </summary>
            <param name="left">Left Value Object</param>
            <param name="right">Right Value Object</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangValueObject`1.Equals(System.Object)">
            <summary>
            Check Equality
            </summary>
            <param name="obj">Other Object</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangValueObject`1.GetHashCode">
            <summary>
            Get Hash Code
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="T:ClangNet.AvailabilityKind">
            <summary>
            Availability Kind
            </summary>
            <remarks>
            Describes the availability of a particular entity, which indicates
            whether the use of this entity will result in a warning or error due to
            it being deprecated or unavailable.
            </remarks>
        </member>
        <member name="F:ClangNet.AvailabilityKind.Available">
            <summary>
            Available
            </summary>
            <remarks>
            The entity is available.
            </remarks>
        </member>
        <member name="F:ClangNet.AvailabilityKind.Deprecated">
            <summary>
            Deprecated
            </summary>
            <remarks>
            The entity is available, but has been deprecated
            (and its use is not recommended).
            </remarks>
        </member>
        <member name="F:ClangNet.AvailabilityKind.NotAvailable">
            <summary>
            Not Available
            </summary>
            <remarks>
            The entity is not available;
            any use of it will be an error.
            </remarks>
        </member>
        <member name="F:ClangNet.AvailabilityKind.NotAccessible">
            <summary>
            Not Accessible
            </summary>
            <remarks>
            The entity is available, but not accessible;
            any use of it will be an error.
            </remarks>
        </member>
        <member name="T:ClangNet.CallingConvention">
            <summary>
            Calling Convention Type
            </summary>
            <remarks>
            Describes the calling convention of a function type
            </remarks>
        </member>
        <member name="F:ClangNet.CallingConvention.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86StdCall">
            <summary>
            x86 Standart Call
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86FastCall">
            <summary>
            x86 Fast Call
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86ThisCall">
            <summary>
            x86 This Call
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86Pascal">
            <summary>
            x86 Pascal
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.AAPCS">
            <summary>
            AAPCS
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.AAPCSVfp">
            <summary>
            AAPCS VFP
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86RegCall">
            <summary>
            x86 Register Call
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.IntelOclBicc">
            <summary>
            Intel OCL BICC
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.Win64">
            <summary>
            Windows 64
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86_64Win64">
            <summary>
            x86_64 Windows 64
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86_64SysV">
            <summary>
            x86_64 SystemV
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.X86VectorCall">
            <summary>
            x86 Vector Call
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.Swift">
            <summary>
            Swift
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.PreserveMost">
            <summary>
            Preserve Most
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.PreserveAll">
            <summary>
            Preserve All
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.AArch64VectorCall">
            <summary>
            AArch64 Vector Call
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:ClangNet.CallingConvention.Unexposed">
            <summary>
            Unexposed
            </summary>
        </member>
        <member name="T:ClangNet.ChildVisitResult">
             <summary>
             Child Cursor Visit Result
             </summary>
             <remarks>
             Describes how the traversal of the children of a particular
             cursor should proceed after visiting a particular child cursor.
            
             A value of this enumeration type should be returned by each
             <c>CXCursorVisitor</c> to indicate how <c>clang_visitChildren()</c> proceed.
             </remarks>
        </member>
        <member name="F:ClangNet.ChildVisitResult.Break">
            <summary>
            Break
            </summary>
            <remarks>
            Terminates the cursor traversal.
            </remarks>
        </member>
        <member name="F:ClangNet.ChildVisitResult.Continue">
            <summary>
            Continue
            </summary>
            <remarks>
            Continues the cursor traversal with the next sibling of
            the cursor just visited, without visiting its children.
            </remarks>
        </member>
        <member name="F:ClangNet.ChildVisitResult.Recurse">
            <summary>
            Recurse
            </summary>
            <remarks>
            Recursively traverse the children of this cursor, using
            the same visitor and client data.
            </remarks>
        </member>
        <member name="T:ClangNet.CodeCompleteFlags">
             <summary>
             Code Completion Flags
             </summary>
             <remarks>
             Flags that can be passed to <c>clang_codeCompleteAt()</c> to
             modify its behavior.
            
             The enumerators in this enumeration can be bitwise-OR'd together to
             provide multiple options to <c>clang_codeCompleteAt()</c>.
             </remarks>
        </member>
        <member name="F:ClangNet.CodeCompleteFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ClangNet.CodeCompleteFlags.IncludeMacros">
            <summary>
            Include Macros
            </summary>
            <remarks>
            Whether to include macros within the set of code
            completions returned.
            </remarks>
        </member>
        <member name="F:ClangNet.CodeCompleteFlags.IncludeCodePatterns">
            <summary>
            Include Code Patterns
            </summary>
            <remarks>
            Whether to include code patterns for language constructs
            within the set of code completions, e.g., for loops.
            </remarks>
        </member>
        <member name="F:ClangNet.CodeCompleteFlags.IncludeBriefComments">
            <summary>
            Include Brief Comments
            </summary>
            <remarks>
            Whether to include brief documentation within the set of code
            completions returned.
            </remarks>
        </member>
        <member name="F:ClangNet.CodeCompleteFlags.SkipPreamble">
            <summary>
            Skip Reamble
            </summary>
            <remarks>
            Whether to speed up completion by omitting top- or namespace-level entities
            defined in the preamble. There's no guarantee any particular entity is
            omitted. This may be useful if the headers are indexed externally.
            </remarks>
        </member>
        <member name="F:ClangNet.CodeCompleteFlags.IncludeCompletionsWithFixIts">
            <summary>
            Include Completion With Fix Its
            </summary>
            <remarks>
            Whether to include completions with small
            fix-its, e.g. change '.' to '-&gt;' on member access, etc.
            </remarks>
        </member>
        <member name="T:ClangNet.CommentInlineCommandRenderKind">
            <summary>
            Comment Inline Command Render Kind
            </summary>
            <remarks>
            The most appropriate rendering mode for an inline command, chosen on
            command semantics in Doxygen.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentInlineCommandRenderKind.Normal">
            <summary>
            Normal
            </summary>
            <remarks>
            Command argument should be rendered in a normal font.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentInlineCommandRenderKind.Bold">
            <summary>
            Bold
            </summary>
            <remarks>
            Command argument should be rendered in a bold font.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentInlineCommandRenderKind.Monospaced">
            <summary>
            Monospaced
            </summary>
            <remarks>
            Command argument should be rendered in a monospaced font.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentInlineCommandRenderKind.Emphasized">
            <summary>
            Emphalized
            </summary>
            <remarks>
            Command argument should be rendered emphasized (typically italic font).
            </remarks>
        </member>
        <member name="T:ClangNet.CommentKind">
            <summary>
            Comment Kind
            </summary>
            <remarks>
            Describes the type of the comment AST node (<c>CXComment</c>).  A comment
            node can be considered block content (e. g., paragraph), inline content
            (plain text) or neither (the root AST node).
            </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.Null">
            <summary>
            Null
            </summary>
            <remarks>
            Null comment. No AST node is constructed at the requested location
            because there is no text or a syntax error.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.Text">
            <summary>
            Text
            </summary>
            <remarks>
            Plain text. Inline content.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.InlineCommand">
             <summary>
             Inline Command
             </summary>
             <remarks>
             A command with word-like arguments that is considered inline content.
            
             For example: \\c command.
             </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.HTMLStartTag">
             <summary>
             HTML Start Tag
             </summary>
             <remarks>
             HTML start tag with attributes (name-value pairs).
             Considered inline content.
            
             For example:
             &lt;br&gt; &lt;br /&gt; &lt;a href="http://example.org/"&gt;
             </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.HTMLEndTag">
             <summary>
             HTML End Tag
             </summary>
             <remarks>
             HTML end tag.  Considered inline content.
            
             For example:
             &lt;/a&gt;
             </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.Paragraph">
            <summary>
            Paragraph
            </summary>
            <remarks>
            A paragraph, contains inline comment.
            The paragraph itself is block content.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.BlockCommand">
             <summary>
             Block Command
             </summary>
             <remarks>
             A command that has zero or more word-like arguments (number of
             word-like arguments depends on command name) and a paragraph as an
             argument.  Block command is block content.
            
             Paragraph argument is also a child of the block command.
            
             For example: \\brief has 0 word-like arguments and a paragraph argument.
            
             AST nodes of special kinds that parser knows about (e. g., \\param
             command) have their own node kinds.
             </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.ParamCommand">
             <summary>
             Parameter Command
             </summary>
             <remarks>
             A \\param or \\arg command that describes the function parameter
             (name, passing direction, description).
            
             For example: \\param [in] ParamName description.
             </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.TParamCommand">
             <summary>
            Template Parameter Command
             </summary>
             <remarks>
             A \\tparam command that describes a template parameter (name and
             description).
            
             For example: \\tparam T description.
             </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.VerbatimBlockCommand">
             <summary>
             Verbatim Block Command
             </summary>
             <remarks>
             A verbatim block command (e. g., preformatted code).  Verbatim
             block has an opening and a closing command and contains multiple lines of
             text (<c>CXComment_VerbatimBlockLine</c> child nodes).
            
             For example:
             \\verbatim
             aaa
             \\endverbatim
             </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.VerbatimBlockLine">
            <summary>
            Verbatim Block Line
            </summary>
            <remarks>
            A line of text that is contained within a
            CXComment_VerbatimBlockCommand node.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.VerbatimLine">
            <summary>
            Verbatim Line
            </summary>
            <remarks>
            A verbatim line command.  Verbatim line has an opening command,
            a single line of text (up to the newline after the opening command) and
            has no closing command.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentKind.FullComment">
            <summary>
            Full Comment
            </summary>
            <remarks>
            A full comment attached to a declaration, contains block content.
            </remarks>
        </member>
        <member name="T:ClangNet.CommentParamPassDirection">
            <summary>
            Comment Param Pass Direction
            </summary>
            <remarks>
            Describes parameter passing direction for \\param or \\arg command.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentParamPassDirection.In">
            <summary>
            Input
            </summary>
            <remarks>
            The parameter is an input parameter.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentParamPassDirection.Out">
            <summary>
            Output
            </summary>
            <remarks>
            The parameter is an output parameter.
            </remarks>
        </member>
        <member name="F:ClangNet.CommentParamPassDirection.InOut">
            <summary>
            Input &amp; Output
            </summary>
            <remarks>
            The parameter is an input and output parameter.
            </remarks>
        </member>
        <member name="T:ClangNet.CompilationDatabaseError">
            <summary>
            Compilation Database Error
            </summary>
            <remarks>
            Error codes for Compilation Database
            </remarks>
        </member>
        <member name="F:ClangNet.CompilationDatabaseError.NoError">
            <summary>
            No Error
            </summary>
            <remarks>
            No error occurred
            </remarks>
        </member>
        <member name="F:ClangNet.CompilationDatabaseError.CanNotLoadDatabase">
            <summary>
            Can Not Load Database
            </summary>
            <remarks>
            Database can not be loaded
            </remarks>
        </member>
        <member name="T:ClangNet.CompletionChunkKind">
             <summary>
             Completion Chunk Kind
             </summary>
             <remarks>
             Describes a single piece of text within a code-completion string.
            
             Each "chunk" within a code-completion string (<c>CXCompletionString</c>) is
             either a piece of text with a specific "kind" that describes how that text
             should be interpreted by the client or is another completion string.
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.Optional">
             <summary>
             Optional
             </summary>
             <remarks>
             A code-completion string that describes "optional" text that
             could be a part of the template (but is not required).
            
             The Optional chunk is the only kind of chunk that has a code-completion
             string for its representation, which is accessible via
             <c>clang_getCompletionChunkCompletionString()</c>. The code-completion string
             describes an additional part of the template that is completely optional.
             For example, optional chunks can be used to describe the placeholders for
             arguments that match up with defaulted function parameters, e.g. given:
            
             <code>
             void f(int x, float y = 3.14, double z = 2.71828);
             </code>
            
             The code-completion string for this function would contain:
               - a TypedText chunk for "f".
               - a LeftParen chunk for "(".
               - a Placeholder chunk for "int x"
               - an Optional chunk containing the remaining defaulted arguments, e.g.,
                   - a Comma chunk for ","
                   - a Placeholder chunk for "float y"
                   - an Optional chunk containing the last defaulted argument:
                       - a Comma chunk for ","
                       - a Placeholder chunk for "double z"
               - a RightParen chunk for ")"
            
             There are many ways to handle Optional chunks. Two simple approaches are:
               - Completely ignore optional chunks, in which case the template for the
                 function "f" would only include the first parameter ("int x").
               - Fully expand all optional chunks, in which case the template for the
                 function "f" would have all of the parameters.
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.TypedText">
             <summary>
             Typed Text
             </summary>
             <remarks>
             Text that a user would be expected to type to get this
             code-completion result.
            
             There will be exactly one "typed text" chunk in a semantic string, which
             will typically provide the spelling of a keyword or the name of a
             declaration that could be used at the current code point. Clients are
             expected to filter the code-completion results based on the text in this
             chunk.
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.Text">
             <summary>
             Text
             </summary>
             <remarks>
             Text that should be inserted as part of a code-completion result.
            
             A "text" chunk represents text that is part of the template to be
             inserted into user code should this particular code-completion result
             be selected.
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.Placeholder">
             <summary>
             Placeholder
             </summary>
             <remarks>
             Placeholder text that should be replaced by the user.
            
             A "placeholder" chunk marks a place where the user should insert text
             into the code-completion template. For example, placeholders might mark
             the function parameters for a function declaration, to indicate that the
             user should provide arguments for each of those parameters. The actual
             text in a placeholder is a suggestion for the text to display before
             the user replaces the placeholder with real code.
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.Informative">
             <summary>
             Informative
             </summary>
             <remarks>
             Informative text that should be displayed but never inserted as
             part of the template.
            
             An "informative" chunk contains annotations that can be displayed to
             help the user decide whether a particular code-completion result is the
             right option, but which is not part of the actual template to be inserted
             by code completion.
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.CurrentParameter">
             <summary>
             Current Parameter
             </summary>
             <remarks>
             Text that describes the current parameter when code-completion is
             referring to function call, message send, or template specialization.
            
             A "current parameter" chunk occurs when code-completion is providing
             information about a parameter corresponding to the argument at the
             code-completion point. For example, given a function
            
             <code>
             int add(int x, int y);
             </code>
            
             and the source code add(, where the code-completion point is after the
             "(", the code-completion string will contain a "current parameter" chunk
             for "int x", indicating that the current argument will initialize that
             parameter. After typing further, to add(17, (where the code-completion
             point is after the ","), the code-completion string will contain a
             "current paremeter" chunk to "int y".
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.LeftParen">
            <summary>
            Left Parenthesis
            </summary>
            <remarks>
            A left parenthesis ('('), used to initiate a function call or
            signal the beginning of a function parameter list.
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.RightParen">
            <summary>
            Right Parenthesis
            </summary>
            <remarks>
            A right parenthesis (')'), used to finish a function call or
            signal the end of a function parameter list.
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.LeftBracket">
            <summary>
            Left Bracket
            </summary>
            <remarks>
            A left bracket ('[').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.RightBracket">
            <summary>
            Right Bracket
            </summary>
            <remarks>
            A right bracket (']').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.LeftBrace">
            <summary>
            Left Brace
            </summary>
            <remarks>
            A left brace ('{').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.RightBrace">
            <summary>
            Right Brace
            </summary>
            <remarks>
            A right brace ('}').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.LeftAngle">
            <summary>
            Left Angle
            </summary>
            <remarks>
            A left angle bracket ('&lt;').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.RightAngle">
            <summary>
            Right Angle
            </summary>
            <remarks>
            A right angle bracket ('&gt;').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.Comma">
            <summary>
            Comma
            </summary>
            <remarks>
            A comma separator (',').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.ResultType">
             <summary>
             Result Type
             </summary>
             <remarks>
             Text that specifies the result type of a given result.
            
             This special kind of informative chunk is not meant to be inserted into
             the text buffer. Rather, it is meant to illustrate the type that an
             expression using the given completion string would have.
             </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.Colon">
            <summary>
            Colon
            </summary>
            <remarks>
            A colon (':').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.SemiColon">
            <summary>
            Semicolon
            </summary>
            <remarks>
            A semicolon (';').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.Equal">
            <summary>
            Equal
            </summary>
            <remarks>
            An '=' sign.
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.HorizontalSpace">
            <summary>
            Horizontal Space
            </summary>
            <remarks>
            Horizontal space (' ').
            </remarks>
        </member>
        <member name="F:ClangNet.CompletionChunkKind.VerticalSpace">
            <summary>
            Vertical Space
            </summary>
            <remarks>
            Vertical space ('\n'), after which it is generally a good idea to
            perform indentation.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.CompletionContext">
             <summary>
             Completion Context
             </summary>
             <remarks>
             Bits that represent the context under which completion is occurring.
            
             The enumerators in this enumeration may be bitwise-OR'd together if multiple
             contexts are occurring simultaneously.
             </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.Unexposed">
            <summary>
            Unexposed
            </summary>
            <remarks>
            The context for completions is unexposed, as only Clang results
            should be included. (This is equivalent to having no context bits set.)
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.AnyType">
            <summary>
            Any Type
            </summary>
            <remarks>
            Completions for any possible type should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.AnyValue">
            <summary>
            Any Value
            </summary>
            <remarks>
            Completions for any possible value (variables, function calls, etc.)
            should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCObjectValue">
            <summary>
            Objective-C Object Value
            </summary>
            <remarks>
            Completions for values that resolve to an Objective-C object should
            be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCSelectorValue">
            <summary>
            Objective-C Selector Value
            </summary>
            <remarks>
            Completions for values that resolve to an Objective-C selector
            should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.CXXClassTypeValue">
            <summary>
            C++ Class Type Value
            </summary>
            <remarks>
            Completions for values that resolve to a C++ class type should be
            included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.DotMemberAccess">
            <summary>
            Dot Member Access
            </summary>
            <remarks>
            Completions for fields of the member being accessed using the dot
            operator should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ArrowMemberAccess">
            <summary>
            Arrow Member Access
            </summary>
            <remarks>
            Completions for fields of the member being accessed using the arrow
            operator should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCPropertyAccess">
            <summary>
            Objective-C Property Access
            </summary>
            <remarks>
            Completions for properties of the Objective-C object being accessed
            using the dot operator should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.EnumTag">
            <summary>
            Enum Tag
            </summary>
            <remarks>
            Completions for enum tags should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.UnionTag">
            <summary>
            Union Tag
            </summary>
            <remarks>
            Completions for union tags should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.StructTag">
            <summary>
            Struct Tag
            </summary>
            <remarks>
            Completions for struct tags should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ClassTag">
            <summary>
            Class Tag
            </summary>
            <remarks>
            Completions for C++ class names should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.Namespace">
            <summary>
            Namespace
            </summary>
            <remarks>
            Completions for C++ namespaces and namespace aliases should be
            included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.NestedNameSpecifier">
            <summary>
            Nested Name Specifier
            </summary>
            <remarks>
            Completions for C++ nested name specifiers should be included in
            the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCInterface">
            <summary>
            Objective-C Interface
            </summary>
            <remarks>
            Completions for Objective-C interfaces (classes) should be included
            in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCProtocol">
            <summary>
            Objective-C Protocol
            </summary>
            <remarks>
            Completions for Objective-C protocols should be included in
            the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCCategory">
            <summary>
            Objective-C Category
            </summary>
            <remarks>
            Completions for Objective-C categories should be included in
            the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCInstanceMessage">
            <summary>
            Objective-C Instance Message
            </summary>
            <remarks>
            Completions for Objective-C instance messages should be included
            in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCClassMessage">
            <summary>
            Objective-C Class Message
            </summary>
            <remarks>
            Completions for Objective-C class messages should be included in
            the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.ObjCSelectorName">
            <summary>
            Objective-C Selector Name
            </summary>
            <remarks>
            Completions for Objective-C selector names should be included in
            the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.MacroName">
            <summary>
            Macro Name
            </summary>
            <remarks>
            Completions for preprocessor macro names should be included in
            the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.NaturalLanguage">
            <summary>
            Natural Language
            </summary>
            <remarks>
            Natural language completions should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.IncludeFile">
            <summary>
            Include File
            </summary>
            <remarks>
            #include file completions should be included in the results.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CompletionContext.Unknown">
            <summary>
            Unknown
            </summary>
            <remarks>
            The current context is unknown, so set all contexts.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.LibClang">
            <summary>
            Libclang P/Invoke : Attributes
            </summary>
            <summary>
            Libclang P/Invoke : Build System
            </summary>
            <summary>
            Libclang P/Invoke : Code Completion
            </summary>
            <summary>
            Libclang P/Invoke : Common
            </summary>
            <summary>
            Libclang P/Invoke : Compilation Database
            </summary>
            <summary>
            Libclang P/Invoke : C++ AST Introspection
            </summary>
            <summary>
            Libclang P/Invoke : Cross Referencing
            </summary>
            <summary>
            Libclang P/Invoke : Cursor Manipulations
            </summary>
            <summary>
            Libclang P/Invoke : Cursor Source
            </summary>
            <summary>
            Libclang P/Invoke : Cursor Traversal
            </summary>
            <summary>
            Libclang P/Invoke : Debugging
            </summary>
            <summary>
            Libclang P/Invoke : Diagnostics Reporting
            </summary>
            <summary>
            Libclang P/Invoke : Documentation
            </summary>
            <summary>
            Libclang P/Invoke : File
            </summary>
            <summary>
            Libclang P/Invoke : Higher Level API
            </summary>
            <summary>
            Libclang P/Invoke : Index
            </summary>
            <summary>
            Libclang P/Invoke : Physical Source Locations
            </summary>
            <summary>
            Libclang P/Invoke : Name Mangling
            </summary>
            <summary>
            Libclang P/Invoke : Miscellaneous Utility
            </summary>
            <summary>
            Libclang P/Invoke : Module Introspection
            </summary>
            <summary>
            Libclang P/Invoke : Remapping
            </summary>
            <summary>
            Libclang P/Invoke : String
            </summary>
            <summary>
            Libclang P/Invoke : Token Extraction and Manipulation
            </summary>
            <summary>
            Libclang P/Invoke : Translation Unit
            </summary>
            <summary>
            Libclang P/Invoke : Type Information
            </summary>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getIBOutletCollectionType(ClangNet.Native.CXCursor)">
            <summary>
            <para>Get IBOutlet Collection Type</para>
            <para>IBOutletコレクションタイプを取得</para>
            </summary>
            <param name="cursor">
            <para>Clang Cursor</para>
            <para>カーソル</para>
            </param>
            <returns>
            <para>IBOutlet Collection Element Type</para>
            <para>IBOutletコレクション要素タイプ</para>
            </returns>
            <remarks>
            <para>For cursors representing an IBOutlet Collection attribute,
            this function returns the collection element type.</para>
            <para>IBOutletコレクション属性を表すカーソルの場合、この関数はコレクション要素タイプを返します。</para>
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getBuildSessionTimestamp">
            <summary>
            <para>Get Build Session Timestamp</para>
            <para>ビルドセッションタイムスタンプの取得</para>
            </summary>
            <returns>
            <para>Build Session Timestamp</para>
            <para>ビルドセッションタイムスタンプ</para>
            </returns>
            <remarks>
            <para>Return the timestamp for use with Clang's
            <c>-fbuild-session-timestamp=</c> option.</para>
            <para>Clangの<c>-fbuild-session-timestamp=</c>で使用する
            タイムスタンプを返します。</para>
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_VirtualFileOverlay_create(System.UInt32)">
            <summary>
            Create Virtual File Overlay
            </summary>
            <param name="options">reserved, always pass 0</param>
            <returns>CXVirtualFileOverlay Object</returns>
            <remarks>
            Create a <c>CXVirtualFileOverlay</c> object.
            Must be disposed with <c>clang_VirtualFileOverlay_dispose()</c>.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_VirtualFileOverlay_addFileMapping(System.IntPtr,System.String,System.String)">
            <summary>
            Add File Mapping to Virtual File Overlay
            </summary>
            <param name="virtual_file_overlay">CXVirtualFileOverlay Object</param>
            <param name="virtual_path">Virtual Path</param>
            <param name="real_path">Real Path</param>
            <returns>0 for success, non-zero to indicate an error.</returns>
            <remarks>
            Map an absolute virtual file path to an absolute real one.
            The virtual path must be canonicalized (not contain "."/"..").
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_VirtualFileOverlay_setCaseSensitivity(System.IntPtr,System.Int32)">
            <summary>
            Set Case Sensitivity to Virtual File Overlay
            </summary>
            <param name="virtual_file_overlay">CXVirtualFileOverlay Object</param>
            <param name="case_sensitive">Case Sensitive</param>
            <returns>0 for success, non-zero to indicate an error.</returns>
            <remarks>
            Set the case sensitivity for the <c>CXVirtualFileOverlay</c> object.
            The <c>CXVirtualFileOverlay</c> object is case-sensitive by default,
            this option can be used to override the default.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_VirtualFileOverlay_writeToBuffer(System.IntPtr,System.UInt32,System.IntPtr@,System.UInt32@)">
            <summary>
            Write Out Virtual File Overlay to Character Buffer
            </summary>
            <param name="virtual_file_overlay">CXVirtualFileOverlay Object</param>
            <param name="options">reserved, always pass 0.</param>
            <param name="out_buffer_ptr">pointer to receive the buffer pointer, which should be disposed using <c>clang_free()</c>.</param>
            <param name="out_buffer_size">pointer to receive the buffer size.</param>
            <returns>0 for success, non-zero to indicate an error.</returns>
            <remarks>
            Write out the <c>CXVirtualFileOverlay</c> object to a char buffer.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_free(System.IntPtr)">
            <summary>
            Free Character Buffer
            </summary>
            <param name="buffer">memory pointer to free.</param>
            <remarks>
            Free memory allocated by libclang, such as the buffer returned by
            <c>CXVirtualFileOverlay()</c> or <c>clang_ModuleMapDescriptor_writeToBuffer()</c>.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_VirtualFileOverlay_dispose(System.IntPtr)">
            <summary>
            Dispose Virtual File Overlay
            </summary>
            <param name="virtual_file_overlay">CXVirtualFileOverlay Object</param>
            <remarks>
            Dispose a <c>CXVirtualFileOverlay</c> object.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ModuleMapDescriptor_create(System.UInt32)">
            <summary>
            Create Module Map Descriptor
            </summary>
            <remarks>
            Must be disposed with <c>clang_ModuleMapDescriptor_dispose()</c>.
            </remarks>
            <param name="options">reserved, always pass 0.</param>
            <returns>CXModuleMapDescriptor Object</returns>
            <remarks>
            Create a <c>CXModuleMapDescriptor</c> object.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ModuleMapDescriptor_setFrameworkModuleName(System.IntPtr,System.String)">
            <summary>
            Set Framework Module Name to Module Map Descriptor
            </summary>
            <param name="module_map_descriptor">CXModuleMapDescriptor Object</param>
            <param name="name">the framework module name</param>
            <returns>0 for success, non-zero to indicate an error.</returns>
            <remarks>
            Sets the framework module name that the module.map describes.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ModuleMapDescriptor_setUmbrellaHeader(System.IntPtr,System.String)">
            <summary>
            Set Umbrella Header to Module Map Descriptor
            </summary>
            <param name="module_map_descriptor">CXModuleMapDescriptor Object</param>
            <param name="name">the umbrealla header name</param>
            <returns>0 for success, non-zero to indicate an error.</returns>
            <remarks>
            Sets the umbrealla header name that the module.map describes.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ModuleMapDescriptor_writeToBuffer(System.IntPtr,System.UInt32,System.IntPtr@,System.UInt32@)">
            <summary>
            Write Out Module Map Descriptor to Character Buffer
            </summary>
            <param name="module_map_descriptor">CXModuleMapDescriptor Object</param>
            <param name="options">reserved, always pass 0.</param>
            <param name="out_buffer_ptr">pointer to receive the buffer pointer, which should be disposed using <c>clang_free()</c>.</param>
            <param name="out_buffer_size">pointer to receive the buffer size.</param>
            <returns>0 for success, non-zero to indicate an error.</returns>
            <remarks>
            Write out the <c>CXModuleMapDescriptor</c> object to a char buffer.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ModuleMapDescriptor_dispose(System.IntPtr)">
            <summary>
            Dispose Module Map Descriptor
            </summary>
            <param name="module_map_descriptor">CXModuleMapDescriptor Object</param>
            <remarks>
            Dispose a <c>CXModuleMapDescriptor</c> object.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionChunkKind(System.IntPtr,System.UInt32)">
            <summary>
            Determine the kind of a particular chunk within a completion string.
            </summary>
            <param name="completion_string">the completion string to query.</param>
            <param name="chunk_number">the 0-based index of the chunk in the completion string.</param>
            <returns>the kind of the chunk at the index <c>chunk_number</c>.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionChunkText(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve the text associated with a particular chunk within a completion string.
            </summary>
            <param name="completion_string">the completion string to query.</param>
            <param name="chunk_number">the 0-based index of the chunk in the completion string.</param>
            <returns>the text associated with the chunk at index <c>chunk_number</c>.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionChunkCompletionString(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve the completion string associated with a particular chunk within a completion string.
            </summary>
            <param name="completion_string">the completion string to query.</param>
            <param name="chunk_number">the 0-based index of the chunk in the completion string.</param>
            <returns>the completion string associated with the chunk at index <c>chunk_number</c>.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNumCompletionChunks(System.IntPtr)">
            <summary>
            Retrieve the number of chunks in the given code-completion string.
            </summary>
            <param name="completion_string">the completion string to query.</param>
            <returns>the number of chunks</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionPriority(System.IntPtr)">
             <summary>
             Determine the priority of this code completion.
            
             The priority of a code completion indicates how likely it is that this
             particular completion is the completion that the user will select.
             The priority is selected by various internal heuristics.
             </summary>
             <param name="completion_string">The completion string to query.</param>
             <returns>
             The priority of this completion string. Smaller values indicate
             higher-priority (more likely) completions.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionAvailability(System.IntPtr)">
            <summary>
            Determine the availability of the entity that this code-completion
            string refers to.
            </summary>
            <param name="completion_string">The completion string to query.</param>
            <returns>The availability of the completion string.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionNumAnnotations(System.IntPtr)">
            <summary>
            Retrieve the number of annotations associated with the given completion string.
            </summary>
            <param name="completion_string">the completion string to query.</param>
            <returns>the number of annotations associated with the given completion string.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionAnnotation(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve the annotation associated with the given completion string.
            </summary>
            <param name="completion_string">the completion string to query.</param>
            <param name="annotation_number">the 0-based index of the annotation of the completion string.</param>
            <returns>
            annotation string associated with the completion at index
            <c>annotation_number</c>, or a NULL string if that annotation is not available.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionParent(System.IntPtr,System.IntPtr)">
            <summary>
            Retrieve the parent context of the given completion string.
            The parent context of a completion string is the semantic parent of
            the declaration(if any) that the code completion represents.For example,
            a code completion for an Objective-C method would have the method's class
            or protocol as its context.
            </summary>
            <param name="completion_string">The code completion string whose parent is being queried.</param>
            <param name="kind">DEPRECATED: always set to CXCursor_NotImplemented if non-NULL.</param>
            <returns>
            The name of the completion parent, e.g., "NSObject" if
            the completion string represents a method in the NSObject class.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionBriefComment(System.IntPtr)">
            <summary>
            Retrieve the brief documentation comment attached to the declaration
            that corresponds to the given completion string.
            </summary>
            <param name="completion_string">the completion string to query.</param>
            <returns>the brief documentation comment attached to the declaration</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorCompletionString(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve a completion string for an arbitrary declaration or macro definition cursor.
            </summary>
            <param name="cursor">The cursor to query.</param>
            <returns>
            A non-context-sensitive completion string for declaration and macro
            definition cursors, or NULL for other kinds of cursors.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionNumFixIts(System.IntPtr,System.UInt32)">
             <summary>
             Retrieve the number of fix-its for the given completion index.
            
             Calling this makes sense only if CXCodeComplete_IncludeCompletionsWithFixIts
             option was set.
             </summary>
             <param name="results">The structure keeping all completion results</param>
             <param name="completion_index">The index of the completion</param>
             <returns>
             The number of fix-its which must be applied before the completion at
             <c>ompletion_index</c>c can be applied
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCompletionFixIt(System.IntPtr,System.UInt32,System.UInt32,ClangNet.Native.CXSourceRange@)">
             <summary>
             Fix-its that *must* be applied before inserting the text for the
             corresponding completion.
            
             By default, <c>clang_codeCompleteAt()</c> only returns completions with empty
             fix-its.Extra completions with non-empty fix-its should be explicitly
             requested by setting CXCodeComplete_IncludeCompletionsWithFixIts.
            
             For the clients to be able to compute position of the cursor after applying
             fix-its, the following conditions are guaranteed to hold for
             replacement_range of the stored fix-its:
              - Ranges in the fix-its are guaranteed to never contain the completion
              point (or identifier under completion point, if any) inside them, except
              at the start or at the end of the range.
              - If a fix-it range starts or ends with completion point (or starts or
              ends after the identifier under completion point), it will contain at
              least one character.It allows to unambiguously recompute completion
              point after applying the fix-it.
            
             The intuition is that provided fix-its change code around the identifier we
             complete, but are not allowed to touch the identifier itself or the
             completion point.One example of completions with corrections are the ones
             replacing '.' with '->' and vice versa:
            
             std::unique_ptr&lt;std::vector&lt;int&gt;&gt; vec_ptr;
             In 'vec_ptr.^', one of the completions is 'push_back', it requires
             replacing '.' with '-&gt;'.
             In 'vec_ptr-&gt;^', one of the completions is 'release', it requires
             replacing '-&gt;' with '.'.
             </summary>
             <param name="results">The structure keeping all completion results</param>
             <param name="completion_index">The index of the completion</param>
             <param name="fixit_index">The index of the fix-it for the completion at <c>completion_index</c></param>
             <param name="replacement_range">The fix-it range that must be replaced before the completion at <c>completion_index</c> can be applied</param>
             <returns>
             The fix-it string that must replace the code at replacement_range
             before the completion at <c>completion_index</c> can be applied
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_defaultCodeCompleteOptions">
            <summary>
            Returns a default set of code-completion options that can be
            passed to <c>clang_codeCompleteAt()</c>.
            </summary>
            <returns>a default set of code-completion options</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_codeCompleteAt(System.IntPtr,System.String,System.UInt32,System.UInt32,ClangNet.Native.CXUnsavedFile[],System.UInt32,ClangNet.CodeCompleteFlags)">
             <summary>
             Perform code completion at a given location in a translation unit.
            
             This function performs code completion at a particular file, line, and
             column within source code, providing results that suggest potential
             code snippets based on the context of the completion.The basic model
             for code completion is that Clang will parse a complete source file,
             performing syntax checking up to the location where code-completion has
             been requested. At that point, a special code-completion token is passed
             to the parser, which recognizes this token and determines, based on the
             current location in the C/Objective-C/C++ grammar and the state of
             semantic analysis, what completions to provide. These completions are
             returned via a new <c>CXCodeCompleteResults</c> structure.
            
             Code completion itself is meant to be triggered by the client when the
             user types punctuation characters or whitespace, at which point the
             code-completion location will coincide with the cursor.For example, if <c></c> p
             is a pointer, code-completion might be triggered after the "-" and then
             after the ">" in <c>p-></c>. When the code-completion location is after the ">",
             the completion results will provide, e.g., the members of the struct that
             "p" points to.The client is responsible for placing the cursor at the
             beginning of the token currently being typed, then filtering the results
             based on the contents of the token.For example, when code-completing for
             the expression <c>p->get</c>, the client should provide the location just after
             the ">" (e.g., pointing at the "g") to this code-completion hook. Then, the
             client can filter the results based on the current token text ("get"), only
             showing those results that start with "get". The intent of this interface
             is to separate the relatively high-latency acquisition of code-completion
             results from the filtering of results on a per-character basis, which must
             have a lower latency.
             </summary>
             <param name="tu">
             The translation unit in which code-completion should
             occur.The source files for this translation unit need not be
             completely up-to-date(and the contents of those source files may
             be overridden via unsaved_files). Cursors referring into the
             translation unit may be invalidated by this invocation.
             </param>
             <param name="complete_filename">
             The name of the source file where code
             completion should be performed.This filename may be any file
             included in the translation unit.
             </param>
             <param name="complete_line">The line at which code-completion should occur.</param>
             <param name="complete_column">
             complete_column The column at which code-completion should occur.
             Note that the column should point just after the syntactic construct that
             initiated code completion, and not in the middle of a lexical token.
             </param>
             <param name="unsaved_files">
             the Files that have not yet been saved to disk
             but may be required for parsing or code completion, including the
             contents of those files.The contents and name of these files(as
             specified by CXUnsavedFile) are copied when necessary, so the
             client only needs to guarantee their validity until the call to
             this function returns.
             </param>
             <param name="num_unsaved_files">The number of unsaved file entries in unsaved_files.</param>
             <param name="options">
             Extra options that control the behavior of code
             completion, expressed as a bitwise OR of the enumerators of the
             CXCodeComplete_Flags enumeration.The
             <c>clang_defaultCodeCompleteOptions()</c> function returns a default set
             of code-completion options.
             </param>
             <returns>
             If successful, a new <c>CXCodeCompleteResults</c> structure
             containing code-completion results, which should eventually be
             freed with <c>clang_disposeCodeCompleteResults()</c>. If code
             completion fails, returns NULL.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_sortCodeCompletionResults(System.IntPtr,System.UInt32)">
             <summary>
             Sort the code-completion results in case-insensitive alphabetical order.
            
             </summary>
             <param name="results">The set of results to sort.</param>
             <param name="num_results">The number of results in results.</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeCodeCompleteResults(System.IntPtr)">
            <summary>
            Free the given set of code-completion results.
            </summary>
            <param name="results">the code completion results to query.</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_codeCompleteGetNumDiagnostics(System.IntPtr)">
            <summary>
            Determine the number of diagnostics produced prior to the
            location where code completion was performed.
            </summary>
            <param name="results">the code completion results to query.</param>
            <returns>the number of diagnostics produced priority</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_codeCompleteGetDiagnostic(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve a diagnostic associated with the given code completion.
            </summary>
            <param name="results">the code completion results to query.</param>
            <param name="index">the zero-based diagnostic number to retrieve.</param>
            <returns>
            the requested diagnostic. This diagnostic must be freed
            via a call to <c>clang_disposeDiagnostic()</c>.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_codeCompleteGetContexts(System.IntPtr)">
            <summary>
            Determines what completions are appropriate for the context
            the given code completion.
            </summary>
            <param name="results">the code completion results to query</param>
            <returns>
            the kinds of completions that are appropriate for use
            long with the given code completion results.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_codeCompleteGetContainerKind(System.IntPtr,System.UInt32@)">
            <summary>
            Returns the cursor kind for the container for the current code
            completion context.The container is only guaranteed to be set for
            contexts where a container exists (i.e.member accesses or Objective-C
            message sends); if there is not a container, this function will return
            CXCursor_InvalidCode.
            </summary>
            <param name="results">the code completion results to query</param>
            <param name="is_incomplete">
            on return, this value will be false if Clang has complete
            information about the container.If Clang does not have complete
            information, this value will be true.
            </param>
            <returns>the container kind, or CXCursor_InvalidCode if there is not a container</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_codeCompleteGetContainerUSR(System.IntPtr)">
            <summary>
            Returns the USR for the container for the current code completion
            context.If there is not a container for the current context, this
            function will return the empty string.
            </summary>
            <param name="results">the code completion results to query</param>
            <returns>the USR for the container</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_codeCompleteGetObjCSelector(System.IntPtr)">
            <summary>
            Returns the currently-entered selector for an Objective-C message
            send, formatted like "initWithFoo:bar:". Only guaranteed to return a
            non-empty string for CXCompletionContext_ObjCInstanceMessage and
            CXCompletionContext_ObjCClassMessage.
            </summary>
            <param name="results">the code completion results to query</param>
            <returns>
            the selector (or partial selector) that has been entered thus far
            for an Objective-C message send.
            </returns>
        </member>
        <member name="F:ClangNet.Native.LibClang.LibraryName">
            <summary>
            LibClang Library Name
            </summary>
        </member>
        <member name="F:ClangNet.Native.LibClang.LibraryCallingConvention">
            <summary>
            LibClang Library Calling Convention Type
            </summary>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompilationDatabase_fromDirectory(System.String,ClangNet.CompilationDatabaseError@)">
             <summary>
             Creates a compilation database from the database found in directory
             buildDir.For example, CMake can output a compile_commands.json which can
             be used to build the database.
            
             It must be freed by <c>clang_CompilationDatabase_dispose()</c>.
             </summary>
             <param name="build_dir">Build Directory</param>
             <param name="error_code">Error Code</param>
             <returns>Compilation Database</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompilationDatabase_dispose(System.IntPtr)">
            <summary>
            Free the given compilation database
            </summary>
            <param name="compilation_database">Compilation Database</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompilationDatabase_getCompileCommands(System.IntPtr,System.String)">
            <summary>
            Find the compile commands used for a file. The compile commands
            must be freed by <c>clang_CompileCommands_dispose()</c>.
            </summary>
            <param name="compilation_database">Compilation Database</param>
            <param name="complete_filename">Complete Filename</param>
            <returns>Compile Commands</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompilationDatabase_getAllCompileCommands(System.IntPtr)">
            <summary>
            Get all the compile commands in the given compilation database.
            </summary>
            <param name="compilation_database">Compilation Database</param>
            <returns>Compile Commands</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommands_dispose(System.IntPtr)">
            <summary>
            Free the given CompileCommands
            </summary>
            <param name="compile_commands">Compile Commands</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommands_getSize(System.IntPtr)">
            <summary>
            Get the number of CompileCommand we have for a file
            </summary>
            <param name="compile_commands">Compile Commands</param>
            <returns>the number of CompileCommand</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommands_getCommand(System.IntPtr,System.UInt32)">
            <summary>
            Get the I'th CompileCommand for a file
            Note : 0 &lt;= i &lt; clang_CompileCommands_getSize(CXCompileCommands)
            </summary>
            <param name="compile_commands">Compile Commands</param>
            <param name="i">Index</param>
            <returns>Compile Command</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommand_getDirectory(System.IntPtr)">
            <summary>
            Get the working directory where the CompileCommand was executed from
            </summary>
            <param name="compile_command">Compile Command</param>
            <returns>Working Direction Path</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommand_getFilename(System.IntPtr)">
            <summary>
            Get the filename associated with the CompileCommand.
            </summary>
            <param name="compile_command">Compile Command</param>
            <returns>Filename</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommand_getNumArgs(System.IntPtr)">
            <summary>
            Get the number of arguments in the compiler invocation.
            </summary>
            <param name="compile_command">Compile Command</param>
            <returns>the number of arguments</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommand_getArg(System.IntPtr,System.UInt32)">
             <summary>
             Get the I'th argument value in the compiler invocations
            
             Invariant :
              - argument 0 is the compiler executable
             </summary>
             <param name="compile_command">Compile Command</param>
             <param name="i">Index</param>
             <returns>Argument Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommand_getNumMappedSources(System.IntPtr)">
            <summary>
            Get the number of source mappings for the compiler invocation.
            </summary>
            <param name="compile_command">Compile Command</param>
            <returns>the number of source mappings</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommand_getMappedSourcePath(System.IntPtr,System.UInt32)">
            <summary>
            Get the I'th mapped source path for the compiler invocation.
            </summary>
            <param name="compile_command">Compile Command</param>
            <param name="i">Index</param>
            <returns>Mapped Source Path</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CompileCommand_getMappedSourceContent(System.IntPtr,System.UInt32)">
            <summary>
            Get the I'th mapped source content for the compiler invocation.
            </summary>
            <param name="compile_command">Compile Command</param>
            <param name="i">Index</param>
            <returns>Mapped Source Content</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXConstructor_isConvertingConstructor(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ constructor is a converting constructor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Converting Constructor
            Other : Converting Construcctor
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXConstructor_isCopyConstructor(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ constructor is a copy constructor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Copy Constructor
            Other : Copy Construcctor
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXConstructor_isDefaultConstructor(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ constructor is the default constructor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Default Constructor
            Other : Default Construcctor
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXConstructor_isMoveConstructor(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ constructor is a move constructor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Move Constructor
            Other : Move Construcctor
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXField_isMutable(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ field is declared 'mutable'.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Mutable Field
            Other : Mutable Field
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXMethod_isDefaulted(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ method is declared '= default'.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Defaulted Method
            Other : Defaulted Method
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXMethod_isPureVirtual(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ member function or member function template is pure virtual.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Pure Virtual Method
            Other : Pure Virtual Method
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXMethod_isStatic(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ member function or member function template is declared 'static'.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Static Method
            Other Static Method
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXMethod_isVirtual(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ member function or member function template is
            explicitly declared 'virtual' or if it overrides a virtual method from
            one of the base classes.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Virtual Method
            Other Virtual Method
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXRecord_isAbstract(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ record is abstract, i.e. whether a class or struct
            has a pure virtual member function.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Abstract Record
            Other Abstract Record
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EnumDecl_isScoped(ClangNet.Native.CXCursor)">
            <summary>
            Determine if an enum declaration refers to a scoped enum.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Scoped Enum
            Other : Scoped Enum
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXXMethod_isConst(ClangNet.Native.CXCursor)">
            <summary>
            Determine if a C++ member function or member function template is
            declared 'const'.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Constant Method
            Other : Constant Method
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTemplateCursorKind(ClangNet.Native.CXCursor)">
             <summary>
             Given a cursor that represents a template, determine
             the cursor kind of the specializations would be generated by instantiating
             the template.
            
             This routine can be used to determine what flavor of function template,
             class template, or class template partial specialization is stored in the
             cursor.For example, it can describe whether a class template cursor is
             declared with "struct", "class" or "union".
             </summary>
             <param name="cursor">The cursor to query. This cursor should represent a template declaration</param>
             <returns>
             The cursor kind of the specializations that would be generated
             by instantiating the template <paramref name="cursor"/>.
             If <paramref name="cursor"/> is not a template, returns <c>XCursor_NoDeclFound</c>C.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getSpecializedCursorTemplate(ClangNet.Native.CXCursor)">
             <summary>
             Given a cursor that may represent a specialization or instantiation
             of a template, retrieve the cursor that represents the template that it
             specializes or from which it was instantiated.
            
             This routine determines the template involved both for explicit
             specializations of templates and for implicit instantiations of the template,
             both of which are referred to as "specializations". For a class template
             specialization(e.g., <c>std::vector&lt;bool&gt;</c>), this routine will return
             either the primary template(<c>std::vector</c>) or, if the specialization was
             nstantiated from a class template partial specialization, the class template
             partial specialization.For a class template partial specialization and a
             unction template specialization(including instantiations), this
             this routine will return the specialized template.
            
             For members of a class template (e.g., member functions, member classes, or
             static data members), returns the specialized or instantiated member.
             Although not strictly "templates" in the C++ language, members of class
             templates have the same notions of specializations and instantiations that
             templates do, so this routine treats them similarly.
             </summary>
             <param name="cursor">A cursor that may be a specialization of a template or a member of a template.</param>
             <returns>
             If the given cursor is a specialization or instantiation of a
             template or a member thereof, the template or member that it specializes or
             from which it was instantiated.Otherwise, returns a NULL cursor.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorReferenceNameRange(ClangNet.Native.CXCursor,ClangNet.NameRefFlags,System.UInt32)">
            <summary>
            Given a cursor that references something else, return the source range
            covering that reference.
            </summary>
            <param name="cursor">A cursor pointing to a member reference, a declaration reference, or an operator call.</param>
            <param name="named_flags">
            A bitset with three independent flags:
            CXNameRange_WantQualifier,
            CXNameRange_WantTemplateArgs,
            CXNameRange_WantSinglePiece.
            </param>
            <param name="piece_index">
            For contiguous names or when passing the flag
            CXNameRange_WantSinglePiece, only one piece with index 0 is
            available.When the CXNameRange_WantSinglePiece flag is not passed for a
            non-contiguous names, this index can be used to retrieve the individual
            pieces of the name.See also CXNameRange_WantSinglePiece.
            </param>
            <returns>
            The piece of the name pointed to by the given cursor. If there is no
            name, or if the PieceIndex is out-of-range, a null-cursor will be returned.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorUSR(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve a Unified Symbol Resolution (USR) for the entity referenced
             by the given cursor.
            
             A Unified Symbol Resolution (USR) is a string that identifies a particular
             entity (function, class, variable, etc.) within a program.USRs can be
             compared across translation units to determine, e.g., when references in
             one translation refer to an entity defined in another translation unit.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Unified Symbol Resolution (USR) String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_constructUSR_ObjCClass(System.String)">
            <summary>
            Construct a USR for a specified Objective-C class.
            </summary>
            <param name="class_name">Class Name</param>
            <returns>Objective-C Class USR String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_constructUSR_ObjCCategory(System.String,System.String)">
            <summary>
            Construct a USR for a specified Objective-C category.
            </summary>
            <param name="class_name">Class Name</param>
            <param name="category_name">Category Name</param>
            <returns>Objective-C Category USR String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_constructUSR_ObjCProtocol(System.String)">
            <summary>
            Construct a USR for a specified Objective-C protocol.
            </summary>
            <param name="protocol_name">Protocol Name</param>
            <returns>Objective-C Protocol USR String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_constructUSR_ObjCIvar(System.String,ClangNet.Native.CXString)">
            <summary>
            Construct a USR for a specified Objective-C instance variable and
            the USR for its containing class.
            </summary>
            <param name="name">Instance Variable Name</param>
            <param name="class_usr">Class USR String</param>
            <returns>Objective-C Instance Variable USR String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_constructUSR_ObjCMethod(System.String,System.UInt32,ClangNet.Native.CXString)">
            <summary>
            Construct a USR for a specified Objective-C method and
            the USR for its containing class.
            </summary>
            <param name="name">Method Name</param>
            <param name="isInstance_method">Instance Method Flag</param>
            <param name="class_usr">Class USR String</param>
            <returns>Objective-C Method USR String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_constructUSR_ObjCProperty(System.String,ClangNet.Native.CXString)">
            <summary>
            Construct a USR for a specified Objective-C property and the USR
            for its containing class.
            </summary>
            <param name="property">Property Name</param>
            <param name="class_usr">Class USR String</param>
            <returns>Objective-C Property USR String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorSpelling(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve a name for the entity referenced by this cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Cursor Spelling</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getSpellingNameRange(ClangNet.Native.CXCursor,System.UInt32,System.UInt32)">
            <summary>
            Retrieve a range for a piece that forms the cursors spelling name.
            Most of the times there is only one range for the complete spelling but for
            Objective-C methods and Objective-C message expressions, there are multiple
            pieces for each selector identifier.
            </summary>
            <param name="cursor">Cursor</param>
            <param name="piece_index">
            the index of the spelling name piece. If this is greater
            than the actual number of pieces, it will return a NULL(invalid) range.
            </param>
            <param name="options">Reserved.</param>
            <returns>Source Range for Cursor Spelling Name</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_PrintingPolicy_getProperty(System.IntPtr,ClangNet.PrintingPolicyProperty)">
            <summary>
            Get a property value for the given printing policy.
            </summary>
            <param name="policy">Printing Policy</param>
            <param name="property">Printing Policy Property</param>
            <returns>Property Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_PrintingPolicy_setProperty(System.IntPtr,ClangNet.PrintingPolicyProperty,System.UInt32)">
            <summary>
            Set a property value for the given printing policy.
            </summary>
            <param name="policy">Printing Policy</param>
            <param name="property">Printing Policy Property</param>
            <param name="value">Property Value</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorPrintingPolicy(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the default policy for the cursor.
            
             The policy should be released after use with
             <c>clang_PrintingPolicy_dispose()</c>.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Default Printing Policy</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_PrintingPolicy_dispose(System.IntPtr)">
            <summary>
            Release a printing policy.
            </summary>
            <param name="policy">Printing Policy</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorPrettyPrinted(ClangNet.Native.CXCursor,System.IntPtr)">
            <summary>
            Pretty print declarations.
            </summary>
            <param name="cursor">The cursor representing a declaration.</param>
            <param name="policy">
            Policy The policy to control the entities being printed. If
            NULL, a default policy is used.
            </param>
            <returns>
            The pretty printed declaration or the empty string for
            other cursors.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorDisplayName(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the display name for the entity referenced by this cursor.
            
             The display name contains extra information that helps identify the cursor,
             such as the parameters of a function or template or the arguments of a
             class template specialization.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Display Name</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorReferenced(ClangNet.Native.CXCursor)">
             <summary>
             For a cursor that is a reference, retrieve a cursor representing the
             entity that it references.
            
             Reference cursors refer to other entities in the AST. For example, an
             Objective-C superclass reference cursor refers to an Objective-C class.
             This function produces the cursor for the Objective-C class from the
             cursor for the superclass reference.If the input cursor is a declaration or
             definition, it returns that declaration or definition unchanged.
             Otherwise, returns the NULL cursor.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Refferenced Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorDefinition(ClangNet.Native.CXCursor)">
             <summary>
             For a cursor that is either a reference to or a declaration
             of some entity, retrieve a cursor that describes the definition of
             that entity.
            
             Some entities can be declared multiple times within a translation
             unit, but only one of those declarations can also be a
             definition.For example, given:
            
             <code>
             int f(int, int);
             int g(int x, int y) { return f(x, y); }
             int f(int a, int b) { return a + b; }
             int f(int, int);
             </code>
            
             there are three declarations of the function "f", but only the
             second one is a definition.The <c>clang_getCursorDefinition()</c>
             function will take any cursor pointing to a declaration of "f"
             (the first or fourth lines of the example) or a cursor referenced
             that uses "f" (the call to "f' inside "g") and will return a
             declaration cursor pointing to the definition(the second "f"
             declaration).
            
             If given a cursor for which there is no corresponding definition,
             e.g., because there is no definition of that entity within this
             translation unit, returns a NULL cursor.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Definition Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isCursorDefinition(ClangNet.Native.CXCursor)">
            <summary>
            Determine whether the declaration pointed to by this cursor
            is also a definition of that entity.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Definition
            Other : Definition
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCanonicalCursor(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the canonical cursor corresponding to the given cursor.
            
             In the C family of languages, many kinds of entities can be declared several
             times within a single translation unit.For example, a structure type can
             be forward-declared(possibly multiple times) and later defined:
            
             <code>
             struct X;
             struct X;
             struct X
             {
                 int member;
             };
             </code>
            
             The declarations and the definition of <c>X</c> are represented by three
             different cursors, all of which are declarations of the same underlying
             entity.One of these cursor is considered the "canonical" cursor, which
             is effectively the representative for the underlying entity.One can
             determine if two cursors are declarations of the same underlying entity by
             comparing their canonical cursors.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>The canonical cursor for the entity referred to by the given cursor.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getObjCSelectorIndex(ClangNet.Native.CXCursor)">
             <summary>
             If the cursor points to a selector identifier in an Objective-C
             method or message expression, this returns the selector index.
            
             After getting a cursor with #clang_getCursor, this can be called to
             determine if the location points to a selector identifier.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>
             The selector index if the cursor is an Objective-C method or message
             expression and the cursor is pointing to a selector identifier, or -1
             otherwise.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isDynamicCall(ClangNet.Native.CXCursor)">
             <summary>
             Given a cursor pointing to a C++ method call or an Objective-C
             message, returns non-zero if the method/message is "dynamic", meaning:
            
             For a C++ method: the call is virtual.
             For an Objective-C message: the receiver is an object instance, not 'super'
             or a specific class.
            
             If the method/message is "static" or the cursor does not point to a
             method/message, it will return zero.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>
             0 : Not Dynamic Call
             Other : Dynamic Call
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getReceiverType(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor pointing to an Objective-C message or property
            reference, or C++ method call, returns the CXType of the receiver.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Get Receiver Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getObjCPropertyAttributes(ClangNet.Native.CXCursor,System.UInt32)">
            <summary>
            Given a cursor that represents a property declaration, return the
            associated property attributes.The bits are formed from
            <c>CXObjCPropertyAttrKind</c>.
            </summary>
            <param name="cursor">Cursor</param>
            <param name="reserved">Reserved for future use, pass 0.</param>
            <returns>Get Objective-C Property Attribute Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getObjCPropertyGetterName(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents a property declaration, return the
            name of the method that implements the getter.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Objective-C Property Getter Name String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getObjCPropertySetterName(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents a property declaration, return the
            name of the method that implements the setter, if any.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Objective-C Property Setter Name String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getObjCDeclQualifiers(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents an Objective-C method or parameter
            declaration, return the associated Objective-C qualifiers for the return
            type or the parameter respectively.The bits are formed from
            <c>CXObjCDeclQualifierKind</c>.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Objective-C Declaration Qualifier Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isObjCOptional(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents an Objective-C method or property
            declaration, return non-zero if the declaration was affected by "@optional".
            Returns zero if the cursor is not such a declaration or it is "@required".
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Objective-C Optional
            Other : Objective-C Optional
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isVariadic(ClangNet.Native.CXCursor)">
            <summary>
            Returns non-zero if the given cursor is a variadic function or method.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Variadic Function or Method
            Other : Variadic Function or Method
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isExternalSymbol(ClangNet.Native.CXCursor,ClangNet.Native.CXString@,ClangNet.Native.CXString@,System.UInt32@)">
            <summary>
            Returns non-zero if the given cursor points to a symbol marked with
            external_source_symbol attribute.
            </summary>
            <param name="cursor">Cursor</param>
            <param name="language">
            If non-NULL, and the attribute is present, will be set to
            the 'language' string from the attribute.
            </param>
            <param name="defined_in">
            If non-NULL, and the attribute is present, will be set to
            the 'definedIn' string from the attribute.
            </param>
            <param name="is_generated">
            If non-NULL, and the attribute is present, will be set to
            non-zero if the 'generated_declaration' is set in the attribute.
            </param>
            <returns>
            0 : Not External Symbol
            Other : External Symbol
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getCommentRange(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents a declaration, return the associated
            comment's source range.
            The range may include multiple consecutive comments
            with whitespace in between.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Source Range of Comments</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getRawCommentText(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents a declaration, return the associated
            comment text, including comment markers.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Raw Comment Text</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getBriefCommentText(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents a documentable entity (e.g.,
            declaration), return the associated \paragraph; otherwise return the
            first paragraph.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Brief Comment Text</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNullCursor">
            <summary>
            Retrieve the NULL cursor, which represents no entity.
            </summary>
            <returns>NULL Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTranslationUnitCursor(System.IntPtr)">
             <summary>
             Retrieve the cursor that represents the given translation unit.
            
             The translation unit cursor can be used to start traversing the
             various declarations within the given translation unit.
             </summary>
             <param name="tu">Translation Unit</param>
             <returns>Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_equalCursors(ClangNet.Native.CXCursor,ClangNet.Native.CXCursor)">
            <summary>
            Determine whether two cursors are equivalent.
            </summary>
            <param name="cursor1">Cursor1</param>
            <param name="cursor2">Cursor2</param>
            <returns>
            0 : Not Equal
            Other : Equal
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isNull(ClangNet.Native.CXCursor)">
            <summary>
            Returns non-zero if <paramref name="cursor"/> is null.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Null Cursor
            Other : Not Null Cursor
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_hashCursor(ClangNet.Native.CXCursor)">
            <summary>
            Compute a hash value for the given cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Hash Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorKind(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve the kind of the given cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Cursor Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isDeclaration(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor kind represents a declaration.
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Declaration
            Other : Declaration
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isInvalidDeclaration(ClangNet.Native.CXCursor)">
             <summary>
             Determine whether the given declaration is invalid.
            
             A declaration is invalid if it could not be parsed successfully.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>
             non-zero if the cursor represents a declaration and it is
             invalid, otherwise NULL.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isReference(ClangNet.CursorKind)">
             <summary>
             Determine whether the given cursor kind represents a simple reference.
            
             Note that other kinds of cursors(such as expressions) can also refer to
             other cursors.
             Use <c>clang_getCursorReferenced()</c> to determine whether a
             particular cursor refers to another entity.
             </summary>
             <param name="cursor_kind">Cursor Kind</param>
             <returns>
             0 : Not Reference
             Other : Reference
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isExpression(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor kind represents an expression.
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Expression
            Other : Expression
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isStatement(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor kind represents a statement.
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Statement
            Other : Statement
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isAttribute(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor kind represents an attribute.
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Attribute
            Other : Attribute
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_hasAttrs(ClangNet.Native.CXCursor)">
            <summary>
            Determine whether the given cursor has any attributes.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Has Attribute
            Other : Has Attribute
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isInvalid(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor kind represents an invalid cursor.
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Invalid
            Other : Invalid
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isTranslationUnit(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor kind represents a translation unit.
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Translation Unit
            Other : Translation Unit
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isPreprocessing(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor represents a preprocessing
            element, such as a preprocessor directive or macro instantiation.
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Translation Unit
            Other : Translation Unit
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isUnexposed(ClangNet.CursorKind)">
            <summary>
            Determine whether the given cursor represents a currently
            unexposed piece of the AST(e.g., <c>CXCursor_UnexposedStmt</c>).
            </summary>
            <param name="cursor_kind">Cursor Kind</param>
            <returns>
            0 : Not Unexposed
            Other : Unexposed
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorLinkage(ClangNet.Native.CXCursor)">
            <summary>
            Determine the linkage of the entity referred to by a given cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Linkage Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorVisibility(ClangNet.Native.CXCursor)">
             <summary>
             Describe the visibility of the entity referred to by a cursor.
            
             This returns the default visibility if not explicitly specified by
             a visibility attribute.The default visibility may be changed by
             commandline arguments.
             </summary>
             <param name="cursor">The cursor to query.</param>
             <returns>The visibility of the cursor.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorAvailability(ClangNet.Native.CXCursor)">
            <summary>
            Determine the availability of the entity that this cursor refers to,
            taking the current target platform into account.
            </summary>
            <param name="cursor">The cursor to query.</param>
            <returns>The availability of the cursor.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorPlatformAvailability(ClangNet.Native.CXCursor,System.Int32@,ClangNet.Native.CXString@,System.Int32@,ClangNet.Native.CXString@,System.IntPtr@,System.Int32)">
            <summary>
            Determine the availability of the entity that this cursor refers to
            on any platforms for which availability information is known.
            </summary>
            <param name="cursor">The cursor to query.</param>
            <param name="always_deprecated">
            If non-NULL, will be set to indicate whether the
            entity is deprecated on all platforms.
            </param>
            <param name="deprecated_message">
            If non-NULL, will be set to the message text
            provided along with the unconditional deprecation of this entity.
            The client is responsible for deallocating this string.
            </param>
            <param name="always_unavailable">
            If non-NULL, will be set to indicate whether the
            entity is unavailable on all platforms.
            </param>
            <param name="unavailable_message">
            If non-NULL, will be set to the message text
            provided along with the unconditional unavailability of this entity.
            The client is responsible for deallocating this string.
            </param>
            <param name="availability">
            If non-NULL, an array of CXPlatformAvailability instances
            that will be populated with platform availability information, up to either
            the number of platforms for which availability information is available(as
            returned by this function) or <paramref name="availability_size"/>, whichever is smaller.
            </param>
            <param name="availability_size">
            The number of elements available in the
            <paramref name="availability"/> array.
            </param>
            <returns>
            The number of platforms (N) for which availability information is
            available(which is unrelated to <paramref name="availability_size"/>).
            </returns>
            <remarks>
            Note that the client is responsible for calling
            <c>clang_disposeCXPlatformAvailability()</c> to free each of the
            platform-availability structures returned.
            There are <c>min(N, availability_size)</c> such structures.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeCXPlatformAvailability(System.IntPtr)">
            <summary>
            Free the memory associated with a <c>CXPlatformAvailability</c> structure.
            </summary>
            <param name="availability">Platform Availability</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorLanguage(ClangNet.Native.CXCursor)">
            <summary>
            Determine the "language" of the entity referred to by a given cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Language Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorTLSKind(ClangNet.Native.CXCursor)">
            <summary>
            Determine the "thread-local storage (TLS) kind" of the declaration
            referred to by a cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Thread Local Storage(TLS) Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getTranslationUnit(ClangNet.Native.CXCursor)">
            <summary>
            Returns the translation unit that a cursor originated from.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Translation Unit</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_createCXCursorSet">
            <summary>
            Creates an empty CXCursorSet.
            </summary>
            <returns>Cursor Set</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeCXCursorSet(System.IntPtr)">
            <summary>
            Disposes a CXCursorSet and releases its associated memory.
            </summary>
            <param name="cset">Cursor Set</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXCursorSet_contains(System.IntPtr,ClangNet.Native.CXCursor)">
            <summary>
            Queries a CXCursorSet to see if it contains a specific CXCursor.
            </summary>
            <param name="cset">Cursor Set</param>
            <param name="cursor">Cursor</param>
            <returns>non-zero if the set contains the specified cursor.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXCursorSet_insert(System.IntPtr,ClangNet.Native.CXCursor)">
            <summary>
            Inserts a CXCursor into a CXCursorSet.
            </summary>
            <param name="cset">Cursor Set</param>
            <param name="cursor">Cursor</param>
            <returns>zero if the CXCursor was already in the set, and non-zero otherwise.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorSemanticParent(ClangNet.Native.CXCursor)">
             <summary>
             Determine the semantic parent of the given cursor.
            
             The semantic parent of a cursor is the cursor that semantically contains
             the given <paramref name="cursor"/>.For many declarations, the lexical and semantic parents
             are equivalent (the lexical parent is returned by
             <c>clang_getCursorLexicalParent()</c>). They diverge when declarations or
             definitions are provided out-of-line.For example:
             <code>
             class C
              {
              void f();
             };
            
             void C::f() { }
             </code>
            
             In the out-of-line definition of <c>C::f</c>, the semantic parent is
             the class <c>C</c>, of which this function is a member. The lexical parent is
             the place where the declaration actually occurs in the source code; in this
             case, the definition occurs in the translation unit.In general, the
             lexical parent for a given entity can change without affecting the semantics
             of the program, and the lexical parent of different declarations of the
             same entity may be different. Changing the semantic parent of a declaration,
             on the other hand, can have a major impact on semantics, and redeclarations
             of a particular entity should all have the same semantic context.
            
             In the example above, both declarations of <c>C::f</c> have <c>C</c> as their
             semantic context, while the lexical context of the first <c>C::f</c> is <c>C</c>
             and the lexical context of the second <c>C::f</c> is the translation unit.
            
             For global declarations, the semantic parent is the translation unit.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Semantic Parent Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorLexicalParent(ClangNet.Native.CXCursor)">
             <summary>
             Determine the lexical parent of the given cursor.
            
             The lexical parent of a cursor is the cursor in which the given <paramref name="cursor"/>
             was actually written.For many declarations, the lexical and semantic parents
             are equivalent(the semantic parent is returned by
             <c>clang_getCursorSemanticParent()</c>).
             They diverge when declarations or
             definitions are provided out-of-line.For example:
            
             <code>
             class C
              {
              void f();
             };
            
             void C::f() { }
             </code>
            
             In the out-of-line definition of <c>C::f</c>, the semantic parent is
             the class <c>C</c>, of which this function is a member. The lexical parent is
             the place where the declaration actually occurs in the source code; in this
             case, the definition occurs in the translation unit.In general, the
             lexical parent for a given entity can change without affecting the semantics
             of the program, and the lexical parent of different declarations of the
             same entity may be different. Changing the semantic parent of a declaration,
             on the other hand, can have a major impact on semantics, and redeclarations
             of a particular entity should all have the same semantic context.
            
             In the example above, both declarations of <c>C::f</c> have <c>C</c> as their
             semantic context, while the lexical context of the first <c>C::f</c> is <c>C</c>
             and the lexical context of the second <c>C::f</c> is the translation unit.
            
             For declarations written in the global scope, the lexical parent is
             the translation unit.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Lexical Parent Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getOverriddenCursors(ClangNet.Native.CXCursor,System.IntPtr@,System.UInt32@)">
             <summary>
             Determine the set of methods that are overridden by the given
             method.
            
             In both Objective-C and C++, a method(aka virtual member function,
             in C++) can override a virtual method in a base class. For
             Objective-C, a method is said to override any method in the class's
             base class, its protocols, or its categories' protocols, that has the same
             selector and is of the same kind(class or instance).
             If no such method exists, the search continues to the class's superclass,
             its protocols, and its categories, and so on.A method from an Objective-C
             implementation is considered to override the same methods as its
             corresponding method in the interface.
            
             For C++, a virtual member function overrides any virtual member
             function with the same signature that occurs in its base
             classes.With multiple inheritance, a virtual member function can
             override several virtual member functions coming from different
             base classes.
            
             In all cases, this function determines the immediate overridden
             method, rather than all of the overridden methods.For example, if
             a method is originally declared in a class A, then overridden in B
             (which in inherits from A) and also in C(which inherited from B),
             then the only overridden method returned from this function when
             invoked on C's method will be B's method. The client may then
             invoke this function again, given the previously-found overridden
             methods, to map out the complete method-override set.
             </summary>
             <param name="cursor">
             A cursor representing an Objective-C or C++
             method.This routine will compute the set of methods that this
             method overrides.
             </param>
             <param name="overridden">
             A pointer whose pointee will be replaced with a
             pointer to an array of cursors, representing the set of overridden
             methods.If there are no overridden methods, the pointee will be
             set to NULL.The pointee must be freed via a call to
             <c>clang_disposeOverriddenCursors()</c>.
             </param>
             <param name="num_overridden">
             A pointer to the number of overridden
             functions, will be set to the number of overridden functions in the
             array pointed to by <paramref name="overridden"/>.
             </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeOverriddenCursors(System.IntPtr)">
            <summary>
            Free the set of overridden cursors returned by
            <c>clang_getOverriddenCursors()</c>.
            </summary>
            <param name="overridden">the set of overridden cursors</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getIncludedFile(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve the file that is included by the given inclusion directive cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Included File</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursor(System.IntPtr,ClangNet.Native.CXSourceLocation)">
             <summary>
             Map a source location to the cursor that describes the entity at that
             location in the source code.
            
             <c>clang_getCursor()</c> maps an arbitrary source location within a translation
             unit down to the most specific cursor that describes the entity at that
             location.
             For example, given an expression <c>x + y</c>, invoking
             <c>clang_getCursor()</c> with a source location pointing to "x" will return the
             cursor for "x"; similarly for "y".
             If the cursor points anywhere between "x" or "y" (e.g., on the + or the whitespace around it),
             <c>clang_getCursor()</c> will return a cursor referring to the "+" expression.
             </summary>
             <param name="tu">Translation Unit</param>
             <param name="source_location">Source Location</param>
             <returns>Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorLocation(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the physical location of the source constructor referenced
             by the given cursor.
            
             The location of a declaration is typically the location of the name of that
             declaration, where the name of that declaration would occur if it is
             unnamed, or some keyword that introduces that particular declaration.
             The location of a reference is where that reference occurs within the
             source code.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Physical Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorExtent(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the physical extent of the source construct referenced by
             the given cursor.
            
             The extent of a cursor starts with the file/line/column pointing at the
             first character within the source construct that the cursor refers to and
             ends with the last character within that source construct.For a
             declaration, the extent covers the declaration itself.For a reference,
             the extent covers the location of the reference (e.g., where the referenced
             entity was actually used).
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Physical Source Extent</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_visitChildren(ClangNet.Native.CXCursor,ClangNet.Native.CXCursorVisitor,System.IntPtr)">
             <summary>
             Visit the children of a particular cursor.
            
             This function visits all the direct children of the given cursor,
             invoking the given <paramref name="visitor"/> function with the cursors of each
             visited child.The traversal may be recursive, if the visitor returns
             <c>CXChildVisit_Recurse</c>. The traversal may also be ended prematurely, if
             the visitor returns <c>CXChildVisit_Break</c>.
             </summary>
             <param name="parent">
             the cursor whose child may be visited.All kinds of
             cursors can be visited, including invalid cursors (which, by
             definition, have no children).
             </param>
             <param name="visitor">
             the visitor function that will be invoked for each
             child of <paramref name="parent"/>.
             </param>
             <param name="client_data">
             pointer data supplied by the client, which will
             be passed to the visitor each time it is invoked.
             </param>
             <returns>
             a non-zero value if the traversal was terminated
             prematurely by the visitor returning <c>CXChildVisit_Break</c>.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorKindSpelling(ClangNet.CursorKind)">
            <summary>
            Get Cursor Kind Spelling
            </summary>
            <param name="Kind">Cursor Kind</param>
            <returns>Cursor Kind Spelling</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDefinitionSpellingAndExtent(ClangNet.Native.CXCursor,System.IntPtr@,System.IntPtr@,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Get Definition Spelling And Extent
            </summary>
            <param name="cursor">Cursor</param>
            <param name="start_buf">Start Buffer Pointer</param>
            <param name="end_buf">End Buffer Pointer</param>
            <param name="start_line">Start Line</param>
            <param name="start_column">Start Column</param>
            <param name="end_line">End Line</param>
            <param name="end_column">End Column</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_enableStackTraces">
            <summary>
            Enable Stack Traces
            </summary>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_executeOnThread(System.Action{System.IntPtr},System.IntPtr,System.UInt32)">
            <summary>
            Execute Function On Thread
            </summary>
            <param name="fn">Function</param>
            <param name="user_data">User Data</param>
            <param name="stack_size">Stack Size</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNumDiagnosticsInSet(System.IntPtr)">
            <summary>
            Determine the number of diagnostics in a CXDiagnosticSet.
            </summary>
            <param name="diags">Diagnostic Set</param>
            <returns>Number of Diagnostics</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticInSet(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve a diagnostic associated with the given CXDiagnosticSet.
            </summary>
            <param name="diags">the CXDiagnosticSet to query.</param>
            <param name="index">the zero-based diagnostic number to retrieve.</param>
            <returns>
            the requested diagnostic. This diagnostic must be freed
            via a call to <c>clang_disposeDiagnostic()</c>.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_loadDiagnostics(System.String,ClangNet.LoadDiagError@,ClangNet.Native.CXString@)">
            <summary>
             Deserialize a set of diagnostics from a Clang diagnostics bitcode file.
            </summary>
            <param name="file">The name of the file to deserialize.</param>
            <param name="error">
            A pointer to a enum value recording if there was a problem
            deserializing the diagnostics.
            </param>
            <param name="error_string">
            A pointer to a CXString for recording the error string
            if the file was not successfully loaded.
            </param>
            <returns>
            A loaded CXDiagnosticSet if successful, and NULL otherwise.
            These diagnostics should be released using <c>clang_disposeDiagnosticSet()</c>.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeDiagnosticSet(System.IntPtr)">
            <summary>
            Release a CXDiagnosticSet and all of its contained diagnostics.
            </summary>
            <param name="diags">Diagnostic Set</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getChildDiagnostics(System.IntPtr)">
             <summary>
             Retrieve the child diagnostics of a CXDiagnostic.
            
             This CXDiagnosticSet does not need to be released by
             <c>clang_disposeDiagnosticSet()</c>.
             </summary>
             <param name="diagnostic">Diagnostic Set</param>
             <returns>Diagnostic Set</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNumDiagnostics(System.IntPtr)">
            <summary>
            Determine the number of diagnostics produced for the given
            translation unit.
            </summary>
            <param name="tu">Translation Unit</param>
            <returns>Number of Diagnostics</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnostic(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve a diagnostic associated with the given translation unit.
            </summary>
            <param name="tu">Translation Unit</param>
            <param name="index">Index of Diagnostics</param>
            <returns>Diagnostic</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticSetFromTU(System.IntPtr)">
            <summary>
            Retrieve the complete set of diagnostics associated with a translation unit.
            </summary>
            <param name="tu">Translation Unit</param>
            <returns>Diagnostic Set</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeDiagnostic(System.IntPtr)">
            <summary>
            Destroy a diagnostic.
            </summary>
            <param name="diagnostic">Diagnostic</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_formatDiagnostic(System.IntPtr,ClangNet.DiagnosticDisplayOptions)">
             <summary>
             Format the given diagnostic in a manner that is suitable for display.
            
             This routine will format the given diagnostic to a string, rendering
             the diagnostic according to the various options given.The
             <c>clang_defaultDiagnosticDisplayOptions()</c> function returns the set of
             options that most closely mimics the behavior of the clang compiler.
             </summary>
             <param name="diagnostic">The diagnostic to print.</param>
             <param name="options">
             A set of options that control the diagnostic display,
             created by combining <c>CXDiagnosticDisplayOptions</c> values.
             </param>
             <returns>A new string containing for formatted diagnostic.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_defaultDiagnosticDisplayOptions">
            <summary>
            Retrieve the set of display options most similar to the
            default behavior of the clang compiler.
            </summary>
            <returns>
            A set of display options suitable for use with <c>clang_formatDiagnostic()</c>.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticSeverity(System.IntPtr)">
            <summary>
            Determine the severity of the given diagnostic.
            </summary>
            <param name="diagnostic">Diagnostic</param>
            <returns>Diagnostic Severity</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticLocation(System.IntPtr)">
             <summary>
             Retrieve the source location of the given diagnostic.
            
             This location is where Clang would print the caret('^') when
             displaying the diagnostic on the command line.
             </summary>
             <param name="diagnostic">Diagnostic</param>
             <returns>Diagnostic Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticSpelling(System.IntPtr)">
            <summary>
            Retrieve the text of the given diagnostic.
            </summary>
            <param name="diagnostic">Diagnostic</param>
            <returns>Diagnostic Spelling</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticOption(System.IntPtr,ClangNet.Native.CXString@)">
            <summary>
            Retrieve the name of the command-line option that enabled this diagnostic.
            </summary>
            <param name="diagnostic">The diagnostic to be queried.</param>
            <param name="disable">If non-NULL, will be set to the option that disables this diagnostic (if any).</param>
            <returns>
            A string that contains the command-line option used to enable this
            warning, such as "-Wconversion" or "-pedantic".
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticCategory(System.IntPtr)">
             <summary>
             Retrieve the category number for this diagnostic.
            
             Diagnostics can be categorized into groups along with other, related
             diagnostics(e.g., diagnostics under the same warning flag). This routine
             retrieves the category number for the given diagnostic.
             </summary>
             <param name="diagnostic">Diagnostic</param>
             <returns>
             The number of the category that contains this diagnostic, or zero
             if this diagnostic is uncategorized.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticCategoryName(System.UInt32)">
            <summary>
            Retrieve the name of a particular diagnostic category.
            This is now deprecated.
            Use <c>clang_getDiagnosticCategoryText()</c> instead.
            </summary>
            <param name="category">
            A diagnostic category number, as returned by
            <c>clang_getDiagnosticCategory()</c>.
            </param>
            <returns>The name of the given diagnostic category.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticCategoryText(System.IntPtr)">
            <summary>
            Retrieve the diagnostic category text for a given diagnostic.
            </summary>
            <param name="diagnostic">Diagnostic</param>
            <returns>The text of the given diagnostic category.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticNumRanges(System.IntPtr)">
            <summary>
            Determine the number of source ranges associated with the given diagnostic.
            </summary>
            <param name="diagnostic">Diagnostic</param>
            <returns>Number of Diagnostic Source Ranges</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticRange(System.IntPtr,System.UInt32)">
             <summary>
             Retrieve a source range associated with the diagnostic.
            
             A diagnostic's source ranges highlight important elements in the source
             code.On the command line, Clang displays source ranges by
             underlining them with '~' characters.
             </summary>
             <param name="diagnostic">the diagnostic whose range is being extracted.</param>
             <param name="range">the zero-based index specifying which range to</param>
             <returns>the requested source range.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticNumFixIts(System.IntPtr)">
            <summary>
            Determine the number of fix-it hints associated with the
            given diagnostic.
            </summary>
            <param name="diagnostic">Diagnostic</param>
            <returns>Number of Diagnostic Fix-It Hints</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDiagnosticFixIt(System.IntPtr,System.UInt32,ClangNet.Native.CXSourceRange@)">
             <summary>
             Retrieve the replacement information for a given fix-it.
            
             Fix-its are described in terms of a source range whose contents
             should be replaced by a string. This approach generalizes over
             three kinds of operations: removal of source code(the range covers
             the code to be removed and the replacement string is empty),
             replacement of source code(the range covers the code to be
             replaced and the replacement string provides the new code), and
             insertion(both the start and end of the range point at the
             insertion location, and the replacement string provides the text to
             insert).
             </summary>
             <param name="diagnostic">The diagnostic whose fix-its are being queried.</param>
             <param name="fix_it">The zero-based index of the fix-it.</param>
             <param name="replacement_range">
             ReplacementRange The source range whose contents will be
             replaced with the returned replacement string. Note that source
             ranges are half-open ranges[a, b), so the source code should be
             replaced from a and up to(but not including) b.
             </param>
             <returns>
             A string containing text that should be replace the source
             code indicated by the <paramref name="replacement_range"/>.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getParsedComment(ClangNet.Native.CXCursor)">
            <summary>
            Given a cursor that represents a documentable entity (e.g.,
            declaration), return the associated parsed comment as a
            <c>CXComment_FullComment</c> AST node.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Comment</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Comment_getKind(ClangNet.Native.CXComment)">
            <summary>
            Get Comment Kind
            </summary>
            <param name="comment">Comment</param>
            <returns>Comment Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Comment_getNumChildren(ClangNet.Native.CXComment)">
            <summary>
            Get Number of Comment Children
            </summary>
            <param name="comment">Comment</param>
            <returns>Number of Comment Children</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Comment_getChild(ClangNet.Native.CXComment,System.UInt32)">
            <summary>
            Get Child Comment
            </summary>
            <param name="comment">Comment</param>
            <param name="child_index">Index of Comment Children</param>
            <returns>Child Comment</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Comment_isWhitespace(ClangNet.Native.CXComment)">
             <summary>
             A <c>CXComment_Paragraph</c> node is considered whitespace if it contains
             only <c>CXComment_Text</c> nodes that are empty or whitespace.
            
             Other AST nodes (except <c>CXComment_Paragraph</c> and <c>CXComment_Text</c>) are
             never considered whitespace.
             </summary>
             <param name="comment">Comment</param>
             <returns>non-zero if <paramref name="comment"/> is whitespace.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_InlineContentComment_hasTrailingNewline(ClangNet.Native.CXComment)">
            <summary>
            Check Comment has Trailing New Line
            </summary>
            <param name="comment">Comment</param>
            <returns>
            non-zero if <paramref name="comment"/> is inline content and has a newline
             immediately following it in the comment text.Newlines between paragraphs
             do not count.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TextComment_getText(ClangNet.Native.CXComment)">
            <summary>
            Get Text of Text Comment
            </summary>
            <param name="comment">a <c>CXComment_Text</c> AST node.</param>
            <returns>text contained in the AST node.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_InlineCommandComment_getCommandName(ClangNet.Native.CXComment)">
            <summary>
            Get Command Name of Inline Command Comment
            </summary>
            <param name="comment">a <c>CXComment_InlineCommand</c> AST node.</param>
            <returns>name of the inline command.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_InlineCommandComment_getRenderKind(ClangNet.Native.CXComment)">
            <summary>
            Get Render Kind of Inline Command Comment
            </summary>
            <param name="comment">a <c>CXComment_InlineCommand</c> AST node.</param>
            <returns>
            the most appropriate rendering mode, chosen on command
            semantics in Doxygen.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_InlineCommandComment_getNumArgs(ClangNet.Native.CXComment)">
            <summary>
            Get Number of Command Arguments
            </summary>
            <param name="comment">a <c>CXComment_InlineCommand</c> AST node.</param>
            <returns>number of command arguments.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_InlineCommandComment_getArgText(ClangNet.Native.CXComment,System.UInt32)">
            <summary>
            Get Argument Text of Inline Command Comment
            </summary>
            <param name="comment">a <c>CXComment_InlineCommand</c> AST node.</param>
            <param name="arg_index">argument index (zero-based).</param>
            <returns>text of the specified argument.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_HTMLTagComment_getTagName(ClangNet.Native.CXComment)">
            <summary>
            Get Tag Name of HTML Tag Comment
            </summary>
            <param name="comment">a <c>CXComment_HTMLStartTag</c> or <c>CXComment_HTMLEndTag</c> AST node</param>
            <returns>HTML tag name.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_HTMLStartTagComment_isSelfClosing(ClangNet.Native.CXComment)">
            <summary>
            Check HTML Start Tag Comment is Slef Closing
            </summary>
            <param name="comment">a <c>CXComment_HTMLStartTag</c> AST node.</param>
            <returns>non-zero if tag is self-closing (for example, &lt;br /&gt;).</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_HTMLStartTag_getNumAttrs(ClangNet.Native.CXComment)">
            <summary>
            Get Number of Attributes of HTML Start Tag Comment
            </summary>
            <param name="comment">a <c>CXComment_HTMLStartTag</c> AST node.</param>
            <returns>number of attributes (name-value pairs) attached to the start tag.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_HTMLStartTag_getAttrName(ClangNet.Native.CXComment,System.UInt32)">
            <summary>
            Get Attribute Name of HTML Start Tag Comment
            </summary>
            <param name="comment">a <c>CXComment_HTMLStartTag</c> AST node.</param>
            <param name="attr_index">attribute index (zero-based).</param>
            <returns>name of the specified attribute.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_HTMLStartTag_getAttrValue(ClangNet.Native.CXComment,System.UInt32)">
            <summary>
            Get Attribute Value of HTML Start Tag Comment
            </summary>
            <param name="comment">a <c>CXComment_HTMLStartTag</c> AST node.</param>
            <param name="attr_index">attribute index (zero-based).</param>
            <returns>value of the specified attribute.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_BlockCommandComment_getCommandName(ClangNet.Native.CXComment)">
            <summary>
            Get Command Name of Block Command Comment
            </summary>
            <param name="comment">a <c>CXComment_BlockCommand</c> AST node.</param>
            <returns>name of the block command.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_BlockCommandComment_getNumArgs(ClangNet.Native.CXComment)">
            <summary>
            Get Number of Arguments of Block Command Comment
            </summary>
            <param name="comment">a <c>CXComment_BlockCommand</c> AST node.</param>
            <returns>number of word-like arguments.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_BlockCommandComment_getArgText(ClangNet.Native.CXComment,System.UInt32)">
            <summary>
            Get Argument Text of Block Command Comment
            </summary>
            <param name="comment">a <c>CXComment_BlockCommand</c> AST node.</param>
            <param name="arg_index">argument index (zero-based).</param>
            <returns>text of the specified word-like argument.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_BlockCommandComment_getParagraph(ClangNet.Native.CXComment)">
            <summary>
            Get Paragraph of Block Command Comment
            </summary>
            <param name="comment">a <c>CXComment_BlockCommand</c> or <c>CXComment_VerbatimBlockCommand</c> AST node.</param>
            <returns>paragraph argument of the block command.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ParamCommandComment_getParamName(ClangNet.Native.CXComment)">
            <summary>
            Get Parameter Name of Param Command Comment
            </summary>
            <param name="comment">a <c>CXComment_ParamCommand</c> AST node.</param>
            <returns>parameter name.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ParamCommandComment_isParamIndexValid(ClangNet.Native.CXComment)">
            <summary>
            Check Param Command Comment is Valid Parameter Index
            </summary>
            <param name="comment">a <c>CXComment_ParamCommand</c> AST node.</param>
            <returns>
            non-zero if the parameter that this AST node represents was found
            in the function prototype and <c>clang_ParamCommandComment_getParamIndex()</c>
            function will return a meaningful value.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ParamCommandComment_getParamIndex(ClangNet.Native.CXComment)">
            <summary>
            Get Parameter Index of Param Command Comment
            </summary>
            <param name="comment">a <c>CXComment_ParamCommand</c> AST node.</param>
            <returns>
            zero-based parameter index in function prototype.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ParamCommandComment_isDirectionExplicit(ClangNet.Native.CXComment)">
            <summary>
            Check Diction of Param Command Comment is Explicit
            </summary>
            <param name="comment">a <c>CXComment_ParamCommand</c> AST node.</param>
            <returns>
            non-zero if parameter passing direction was specified explicitly in
            the comment.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_ParamCommandComment_getDirection(ClangNet.Native.CXComment)">
            <summary>
            Get Diction of Param Command Comment
            </summary>
            <param name="comment">a <c>CXComment_ParamCommand</c> AST node.</param>
            <returns>parameter passing direction.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TParamCommandComment_getParamName(ClangNet.Native.CXComment)">
            <summary>
            Get Parameter Name of Template Param Command Comment
            </summary>
            <param name="comment">a <c>CXComment_TParamCommand</c> AST node.</param>
            <returns>template parameter name.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TParamCommandComment_isParamPositionValid(ClangNet.Native.CXComment)">
            <summary>
            Check Parameter Position of Template Param Command Comment is Valid
            </summary>
            <param name="comment">a <c>CXComment_TParamCommand</c> AST node.</param>
            <returns>
            non-zero if the parameter that this AST node represents was found
            in the template parameter list and
            <c>clang_TParamCommandComment_getDepth()</c> and
            <c>clang_TParamCommandComment_getIndex()</c> functions will return a meaningful
            value.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TParamCommandComment_getDepth(ClangNet.Native.CXComment)">
             <summary>
             Get Depth of Template Param Command Comment
            
             For example,
              <code>
              template&lt;typename C, template&lt;typename T&gt; class TT&gt;
                  void test(TT&lt;int&gt; aaa);
              </code>
              for C and TT nesting depth is 0,
              for T nesting depth is 1.
             </summary>
             <param name="comment">a <c>CXComment_TParamCommand</c> AST node.</param>
             <returns>zero-based nesting depth of this parameter in the template parameter list.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TParamCommandComment_getIndex(ClangNet.Native.CXComment,System.UInt32)">
             <summary>
             Get Index of Template Param Command Comment
            
             For example,
             <code>
             template&lt;typename C, template&lt;typename T&gt; class TT&gt;
                 void test(TT&lt;int&gt; aaa);
             </code>
             for C and TT nesting depth is 0, so we can ask for index at depth 0:
             at depth 0 C's index is 0, TT's index is 1.
            
             For T nesting depth is 1, so we can ask for index at depth 0 and 1:
             at depth 0 T's index is 1 (same as TT's),
             at depth 1 T's index is 0.
             </summary>
             <param name="comment">a <c>CXComment_TParamCommand</c> AST node.</param>
             <param name="depth">Depth</param>
             <returns>
             zero-based parameter index in the template parameter list at a
             given nesting depth.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_VerbatimBlockLineComment_getText(ClangNet.Native.CXComment)">
            <summary>
            Get Text of Verbatim Block Line Comment
            </summary>
            <param name="comment">a <c>CXComment_VerbatimBlockLine</c> AST node.</param>
            <returns>text contained in the AST node.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_VerbatimLineComment_getText(ClangNet.Native.CXComment)">
            <summary>
            Get Text of Verbatim Line Comment
            </summary>
            <param name="comment">a <c>CXComment_VerbatimLine</c> AST node.</param>
            <returns>text contained in the AST node.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_HTMLTagComment_getAsString(ClangNet.Native.CXComment)">
            <summary>
            Convert an HTML tag AST node to string.
            </summary>
            <param name="comment">a <c>CXComment_HTMLStartTag</c> or <c>CXComment_HTMLEndTag</c> AST node.</param>
            <returns>string containing an HTML tag.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_FullComment_getAsHTML(ClangNet.Native.CXComment)">
             <summary>
             Convert a given full parsed comment to an HTML fragment.
            
             Specific details of HTML layout are subject to change.Don't try to parse
             this HTML back into an AST, use other APIs instead.
            
             Currently the following CSS classes are used:
             \li "para-brief" for \paragraph and equivalent commands;
             \li "para-returns" for \\returns paragraph and equivalent commands;
             \li "word-returns" for the "Returns" word in \\returns paragraph.
            
             Function argument documentation is rendered as a \&lt;dl\&gt; list with arguments
             sorted in function prototype order.CSS classes used:
             \li "param-name-index-NUMBER" for parameter name (\&lt;dt\&gt;);
             \li "param-descr-index-NUMBER" for parameter description(\&lt;dd\&gt;);
             \li "param-name-index-invalid" and "param-descr-index-invalid" are used if
             parameter index is invalid.
            
             Template parameter documentation is rendered as a \&lt;dl\&gt; list with
             parameters sorted in template parameter list order.CSS classes used:
             \li "tparam-name-index-NUMBER" for parameter name (\&lt;dt\&gt;);
             \li "tparam-descr-index-NUMBER" for parameter description(\&lt;dd\&gt;);
             \li "tparam-name-index-other" and "tparam-descr-index-other" are used for
             names inside template template parameters;
             \li "tparam-name-index-invalid" and "tparam-descr-index-invalid" are used if
             parameter position is invalid.
             </summary>
             <param name="comment">a <c>CXComment_FullComment</c> AST node.</param>
             <returns>string containing an HTML fragment.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_FullComment_getAsXML(ClangNet.Native.CXComment)">
             <summary>
             Convert a given full parsed comment to an XML document.
            
             A Relax NG schema for the XML can be found in comment-xml-schema.rng file
             inside clang source tree.
             </summary>
             <param name="comment">a <c>CXComment_FullComment</c> AST node.</param>
             <returns>string containing an XML document.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFileName(System.IntPtr)">
            <summary>
            Retrieve the complete file and path name of the given file.
            </summary>
            <param name="sFile">CXFile Object</param>
            <returns>CXString Object</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFileTime(System.IntPtr)">
            <summary>
            Retrieve the last modification time of the given file.
            </summary>
            <param name="sFile">CXFile Object</param>
            <returns>The Last Modification Time</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFileUniqueID(System.IntPtr,ClangNet.Native.CXFileUniqueID@)">
            <summary>
            Retrieve the unique ID for the given file.
            </summary>
            <param name="file">the file to get the ID for.</param>
            <param name="out_id">stores the returned CXFileUniqueID.</param>
            <returns>If there was a failure getting the unique ID, returns non-zero, otherwise returns 0.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isFileMultipleIncludeGuarded(System.IntPtr,System.IntPtr)">
            <summary>
            Determine whether the given header is guarded against
            multiple inclusions, either with the conventional
            #ifndef/#define/#endif macro guards or with #pragma once.
            </summary>
            <param name="tu">the translation unit</param>
            <param name="file">the file</param>
            <returns>File Multiple Include Guarded Flag</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFile(System.IntPtr,System.String)">
            <summary>
            Retrieve a file handle within the given translation unit.
            </summary>
            <param name="tu">the translation unit</param>
            <param name="file_name">the name of the file.</param>
            <returns>the file handle for the named file in the translation unit tu,
            or a NULL file handle if the file was not a part of this translation unit.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFileContents(System.IntPtr,System.IntPtr,System.UInt64@)">
            <summary>
            Retrieve the buffer associated with the given file.
            </summary>
            <param name="tu">the translation unit</param>
            <param name="file">The file for which to retrieve the buffer.</param>
            <param name="size">[out] if non-NULL, will be set to the size of the buffer.</param>
            <returns>the string buffer</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_File_isEqual(System.IntPtr,System.IntPtr)">
            <summary>
            Returns non-zero if the <c>file1</c> and <c>file2</c> point to the same file,
            or they are both NULL.
            </summary>
            <param name="file1">file1</param>
            <param name="file2">file2</param>
            <returns>
            Two file is not same : 0
            other : non-zero
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_File_tryGetRealPathName(System.IntPtr)">
             <summary>
             Returns the real path name of <c>file</c>.
            
             An empty string may be returned. Use <c>clang_getFileName()</c> in that case.
             </summary>
             <param name="file">file</param>
             <returns>the real path</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_findReferencesInFile(ClangNet.Native.CXCursor,System.IntPtr,ClangNet.Native.CXCursorAndRangeVisitor)">
            <summary>
            Find references of a declaration in a specific file.
            </summary>
            <param name="cursor">pointing to a declaration or a reference of one.</param>
            <param name="file">to search for references.</param>
            <param name="visitor">
            callback that will receive pairs of CXCursor/CXSourceRange for each reference found.
            The CXSourceRange will point inside the file; if the reference is inside
            a macro(and not a macro argument) the CXSourceRange will be invalid.
            </param>
            <returns>one of the CXResult enumerators.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_findIncludesInFile(System.IntPtr,System.IntPtr,ClangNet.Native.CXCursorAndRangeVisitor)">
            <summary>
            Find #import/#include directives in a specific file.
            </summary>
            <param name="tu">translation unit containing the file to query.</param>
            <param name="file">to search for #import/#include directives.</param>
            <param name="visitor">callback that will receive pairs of CXCursor/CXSourceRange for each directive found.</param>
            <returns>one of the CXResult enumerators.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_isEntityObjCContainerKind(ClangNet.IndexEntityKind)">
            <summary>
            Check specified Index Entity Kind is Entity Objective-C Container Kind
            </summary>
            <param name="index_entity_kind">Index Entity Kind</param>
            <returns>
            0 : Not Entity Objective-C Container Kind
            Other : Entity Objective-C Container Kind
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getObjCContainerDeclInfo(System.IntPtr)">
            <summary>
            Get Objective-C Container Declaration Info
            </summary>
            <param name="index_decl_info">Index Declaration Info</param>
            <returns>Objective-C Container Declaration Info</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getObjCInterfaceDeclInfo(System.IntPtr)">
            <summary>
            Get Objective-C Interface Declaration Info
            </summary>
            <param name="index_decl_info">Index Declaration Info</param>
            <returns>Objective-C Interface Declaration Info</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getObjCCategoryDeclInfo(System.IntPtr)">
            <summary>
            Get Objective-C Category Declaration Info
            </summary>
            <param name="index_decl_info">Index Declaration Info</param>
            <returns>Objective-C Category Declaration Info</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getObjCProtocolRefListInfo(System.IntPtr)">
            <summary>
            Get Objective-C Protocol Reference List Info
            </summary>
            <param name="index_decl_info">Index Declaration Info</param>
            <returns>Objective-C Protocol Reference List Info</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getObjCPropertyDeclInfo(System.IntPtr)">
            <summary>
            Get Objective-C Property Declaration Info
            </summary>
            <param name="index_decl_info">Index Declaration Info</param>
            <returns>Objective-C Property Declaration Info</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getIBOutletCollectionAttrInfo(System.IntPtr)">
            <summary>
            Get IBOutlet Collection AttributeInfo
            </summary>
            <param name="index_attr_info">Index Attribute Info</param>
            <returns>IBOutlet Collection AttributeInfo</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getCXXClassDeclInfo(System.IntPtr)">
            <summary>
            Get C++ Class Declaration Info
            </summary>
            <param name="index_decl_info">Index Declaration Info</param>
            <returns>C++ Class Declaration Info</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getClientContainer(System.IntPtr)">
            <summary>
            For retrieving a custom CXIdxClientContainer attached to a container.
            </summary>
            <param name="index_container_info">Index Container Info</param>
            <returns>Index Client Container</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_setClientContainer(System.IntPtr,System.IntPtr)">
            <summary>
            For setting a custom CXIdxClientContainer attached to a container.
            </summary>
            <param name="index_container_info">Index Container Info</param>
            <param name="index_client_container">Index Client Container</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_getClientEntity(System.IntPtr)">
            <summary>
            For retrieving a custom CXIdxClientEntity attached to an entity.
            </summary>
            <param name="index_entity_info">Index Entity Info</param>
            <returns>Index Client Entity</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_index_setClientEntity(System.IntPtr,System.IntPtr)">
            <summary>
            For setting a custom CXIdxClientEntity attached to an entity.
            </summary>
            <param name="index_entity_info">Index Entity Info</param>
            <param name="index_client_entity">Index Client Entity</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_IndexAction_create(System.IntPtr)">
            <summary>
            An indexing action/session, to be applied to one or multiple
            translation units.
            </summary>
            <param name="index">The index object with which the index action will be associated.</param>
            <returns>Index Action</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_IndexAction_dispose(System.IntPtr)">
             <summary>
             Destroy the given index action.
            
             The index action must not be destroyed until all of the translation units
             created within that index action have been destroyed.
             </summary>
             <param name="index_action">Index Action</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_indexSourceFile(System.IntPtr,System.IntPtr,ClangNet.Native.IndexerCallbacks[],System.UInt32,ClangNet.IndexOptionFlags,System.String,System.String[],System.Int32,ClangNet.Native.CXUnsavedFile[],System.UInt32,System.IntPtr@,ClangNet.TranslationUnitFlags)">
            <summary>
            Index the given source file and the translation unit corresponding
            to that file via callbacks implemented through #IndexerCallbacks.
            </summary>
            <param name="index_action">Index Action</param>
            <param name="client_data">
            pointer data supplied by the client, which will
            be passed to the invoked callbacks.
            </param>
            <param name="index_callbacks">
            Pointer to indexing callbacks that the client
            implements.
            </param>
            <param name="index_callbacks_size">
            Size of <c>IndexerCallbacks</c> structure that gets
            passed in <paramref name="index_callbacks"/>.</param>
            <param name="index_options">
            A bitmask of options that affects how indexing is
            performed.This should be a bitwise OR of the CXIndexOpt_XXX flags.
            </param>
            <param name="source_filename">
            The name of the source file to load, or NULL if the
            source file is included in <paramref name="command_line_args"/>.
            </param>
            <param name="command_line_args">
            The command-line arguments that would be
            passed to the <c>clang</c> executable if it were being invoked out-of-process.
            These command-line options will be parsed and will affect how the translation
            unit is parsed.Note that the following options are ignored: '-c',
            '-emit-ast', '-fsyntax-only' (which is the default), and '-o &lt;output file&gt;'.
            </param>
            <param name="num_command_line_args">
            The number of command-line arguments in
            <paramref name="command_line_args"/>.
            </param>
            <param name="unsaved_files">
            the files that have not yet been saved to disk
            but may be required for code completion, including the contents of
            those files.
            The contents and name of these files(as specified by CXUnsavedFile)
            are copied when necessary, so the client only needs to
            guarantee their validity until the call to this function returns.
            </param>
            <param name="num_unsaved_files">
            the number of unsaved file entries in <paramref name="unsaved_files"/>.
            </param>
            <param name="out_tu">
            pointer to store a \c CXTranslationUnit that can be
            reused after indexing is finished.Set to \c NULL if you do not require it.
            </param>
            <param name="tu_options">
            A bitmask of options that affects how the translation unit
            is managed but not its compilation.This should be a bitwise OR of the
            CXTranslationUnit_XXX flags.
            </param>
            <returns>
            0 on success or if there were errors from which the compiler could
            recover.If there is a failure from which there is no recovery, returns
            a non-zero <c>CXErrorCode</c>.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_indexSourceFileFullArgv(System.IntPtr,System.IntPtr,ClangNet.Native.IndexerCallbacks[],System.UInt32,ClangNet.IndexOptionFlags,System.String,System.String[],System.Int32,ClangNet.Native.CXUnsavedFile[],System.UInt32,System.IntPtr@,ClangNet.TranslationUnitFlags)">
            <summary>
            Same as clang_indexSourceFile but requires a full command line
            for <c>command_line_args</c> including argv[0]. This is useful if the standard
            library paths are relative to the binary.
            </summary>
            <param name="index_action">Index Action</param>
            <param name="client_data">
            pointer data supplied by the client, which will
            be passed to the invoked callbacks.
            </param>
            <param name="index_callbacks">
            Pointer to indexing callbacks that the client
            implements.
            </param>
            <param name="index_callbacks_size">
            Size of <c>IndexerCallbacks</c> structure that gets
            passed in <paramref name="index_callbacks"/>.</param>
            <param name="index_options">
            A bitmask of options that affects how indexing is
            performed.This should be a bitwise OR of the CXIndexOpt_XXX flags.
            </param>
            <param name="source_filename">
            The name of the source file to load, or NULL if the
            source file is included in <paramref name="command_line_args"/>.
            </param>
            <param name="command_line_args">
            The command-line arguments that would be
            passed to the <c>clang</c> executable if it were being invoked out-of-process.
            These command-line options will be parsed and will affect how the translation
            unit is parsed.Note that the following options are ignored: '-c',
            '-emit-ast', '-fsyntax-only' (which is the default), and '-o &lt;output file&gt;'.
            </param>
            <param name="num_command_line_args">
            The number of command-line arguments in
            <paramref name="command_line_args"/>.
            </param>
            <param name="unsaved_files">
            the files that have not yet been saved to disk
            but may be required for code completion, including the contents of
            those files.
            The contents and name of these files(as specified by CXUnsavedFile)
            are copied when necessary, so the client only needs to
            guarantee their validity until the call to this function returns.
            </param>
            <param name="num_unsaved_files">
            the number of unsaved file entries in <paramref name="unsaved_files"/>.
            </param>
            <param name="out_tu">
            pointer to store a \c CXTranslationUnit that can be
            reused after indexing is finished.Set to \c NULL if you do not require it.
            </param>
            <param name="tu_options">
            A bitmask of options that affects how the translation unit
            is managed but not its compilation.This should be a bitwise OR of the
            CXTranslationUnit_XXX flags.
            </param>
            <returns>
            0 on success or if there were errors from which the compiler could
            recover.If there is a failure from which there is no recovery, returns
            a non-zero <c>CXErrorCode</c>.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_indexTranslationUnit(System.IntPtr,System.IntPtr,ClangNet.Native.IndexerCallbacks[],System.UInt32,ClangNet.IndexOptionFlags,System.IntPtr)">
             <summary>
             Index the given translation unit via callbacks implemented through
             <c>IndexerCallbacks</c>.
            
             The order of callback invocations is not guaranteed to be the same as
             when indexing a source file.The high level order will be:
            
             -Preprocessor callbacks invocations
             -Declaration/reference callbacks invocations
             -Diagnostic callback invocations
             </summary>
             <param name="index_action">Index Action</param>
             <param name="client_data">
             pointer data supplied by the client, which will
             be passed to the invoked callbacks.
             </param>
             <param name="index_callbacks">
             Pointer to indexing callbacks that the client
             implements.
             </param>
             <param name="index_callbacks_size">
             Size of <c>IndexerCallbacks</c> structure that gets
             passed in <paramref name="index_callbacks"/>.</param>
             <param name="index_options">
             A bitmask of options that affects how indexing is
             performed.This should be a bitwise OR of the CXIndexOpt_XXX flags.
             </param>
             <param name="tu">Translation Unit</param>
             <returns>
             If there is a failure from which there is no recovery, returns
             non-zero, otherwise returns 0.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_indexLoc_getFileLocation(ClangNet.Native.CXIdxLoc,System.IntPtr@,System.IntPtr@,System.UInt32@,System.UInt32@,System.UInt32@)">
             <summary>
             Retrieve the CXIdxFile, file, line, column, and offset represented by
             the given <c>CXIdxLoc</c>.
            
             If the location refers into a macro expansion, retrieves the
             location of the macro expansion and if it refers into a macro argument
             retrieves the location of the argument.
             </summary>
             <param name="loc">Index Location</param>
             <param name="indexFile">Index Client File</param>
             <param name="file">File</param>
             <param name="line">Line</param>
             <param name="column">Column</param>
             <param name="offset">Offset</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_indexLoc_getCXSourceLocation(ClangNet.Native.CXIdxLoc)">
            <summary>
            Retrieve the CXSourceLocation represented by the given CXIdxLoc.
            </summary>
            <param name="loc">Index Location</param>
            <returns>Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_visitFields(ClangNet.Native.CXType,ClangNet.Native.CXFieldVisitor,System.IntPtr)">
             <summary>
             Visit the fields of a particular type.
            
             This function visits all the direct fields of the given cursor,
             invoking the given <paramref name="visitor"/> function with the cursors of each
             visited field.The traversal may be ended prematurely, if
             the visitor returns <c>CXFieldVisit_Break</c>.
             </summary>
             <param name="type">the record type whose field may be visited.</param>
             <param name="visitor">
             the visitor function that will be invoked for each
             field of <paramref name="type"/>.
             </param>
             <param name="client_data">
             pointer data supplied by the client, which will
             be passed to the visitor each time it is invoked.
             </param>
             <returns>
             a non-zero value if the traversal was terminated
             prematurely by the visitor returning <c>CXFieldVisit_Break</c>.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_createIndex(System.Int32,System.Int32)">
             <summary>
             Provides a shared context for creating translation units.
            
             It provides two options:
             - exclude_declarations_from_pch: When non-zero, allows enumeration of "local"
             declarations(when loading any new translation units). A "local" declaration
             is one that belongs in the translation unit itself and not in a precompiled
             header that was used by the translation unit.If zero, all declarations
             will be enumerated.
            
             This process of creating the 'pch', loading it separately, and using it
             (via -include-pch) allows 'exclude_declarations_from_pch' to remove redundant callbacks
             (which gives the indexer the same performance benefit as the compiler).
            
             <code>
               // exclude_declarations_from_pch = 1, display_diagnostics=1
               Idx = clang_createIndex(1, 1);
            
               // IndexTest.pch was produced with the following command:
               // "clang -x c IndexTest.h -emit-ast -o IndexTest.pch"
               TU = clang_createTranslationUnit(Idx, "IndexTest.pch");
            
               // This will load all the symbols from 'IndexTest.pch'
               clang_visitChildren(clang_getTranslationUnitCursor(TU), TranslationUnitVisitor, 0);
            
               clang_disposeTranslationUnit(TU);
            
               // This will load all the symbols from 'IndexTest.c', excluding symbols from 'IndexTest.pch'.
               char* args[] = { "-Xclang", "-include-pch=IndexTest.pch" };
            
               TU = clang_createTranslationUnitFromSourceFile(Idx, "IndexTest.c", 2, args, 0, 0);
            
               clang_visitChildren(clang_getTranslationUnitCursor(TU), TranslationUnitVisitor, 0);
               clang_disposeTranslationUnit(TU);
             </code>
             </summary>
             <param name="exclude_declarations_from_pch">Exclude Declarations from PCH Flag</param>
             <param name="display_diagnostics">Display Diagnostics Flag</param>
             <returns>CXIndex Object</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeIndex(System.IntPtr)">
            <summary>
            Destroy the given index.
            </summary>
            <remarks>
            The index must not be destroyed until all of the translation units created
            within that index have been destroyed.
            </remarks>
            <param name="index">CXIndex Object</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXIndex_setGlobalOptions(System.IntPtr,ClangNet.GlobalOptionFlags)">
            <summary>
            Sets general options associated with a CXIndex.
            <code>
              CXIndex idx = ...;
              clang_CXIndex_setGlobalOptions(idx,
                clang_CXIndex_getGlobalOptions(idx) |
                  CXGlobalOpt_ThreadBackgroundPriorityForIndexing);
            </code>
            </summary>
            <param name="index">CXIndex Object</param>
            <param name="options">A bitmask of options, a bitwise OR of GlobalOptionFlags.</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXIndex_getGlobalOptions(System.IntPtr)">
            <summary>
            Gets the general options associated with a CXIndex.
            </summary>
            <param name="index">CXIndex Object</param>
            <returns>
            A bitmask of options, a bitwise OR of GlobalOptionFlags flags that
            are associated with the given CXIndex object.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_CXIndex_setInvocationEmissionPathOption(System.IntPtr,System.String)">
             <summary>
             Sets the invocation emission path option in a CXIndex.
            
             The invocation emission path specifies a path which will contain log
             files for certain libclang invocations.A null value(default) implies that
             libclang invocations are not logged..
             </summary>
             <param name="index">Index</param>
             <param name="path">Invocation Emission Path Option</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNullLocation">
            <summary>
            Retrieve a NULL (invalid) source location.
            </summary>
            <returns>Null Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_equalLocations(ClangNet.Native.CXSourceLocation,ClangNet.Native.CXSourceLocation)">
            <summary>
            Determine whether two source locations, which must refer into
            the same translation unit, refer to exactly the same point in the
            source code.
            </summary>
            <param name="loc1">Source Location1</param>
            <param name="loc2">Source Location2</param>
            <returns>
            non-zero if the source locations refer to the same location, zero
            if they refer to different locations.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getLocation(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Retrieves the source location associated with a given file/line/column
            in a particular translation unit.
            </summary>
            <param name="tu">Translation Unit</param>
            <param name="file">File</param>
            <param name="line">Line</param>
            <param name="column">Column</param>
            <returns>Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getLocationForOffset(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Retrieves the source location associated with a given character offset
            in a particular translation unit.
            </summary>
            <param name="tu">Translation Unit</param>
            <param name="file">File</param>
            <param name="offset">Offset</param>
            <returns>Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Location_isInSystemHeader(ClangNet.Native.CXSourceLocation)">
            <summary>
             Returns non-zero if the given source location is in a system header.
            </summary>
            <param name="location">Source Location</param>
            <returns>
            0 : Not In System Header
            Other : In System Header
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Location_isFromMainFile(ClangNet.Native.CXSourceLocation)">
            <summary>
            Returns non-zero if the given source location is in the main file of
            the corresponding translation unit.
            </summary>
            <param name="location">Source Location</param>
            <returns>
            0 : Not From Main File
            Other : From Main File
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNullRange">
            <summary>
            Retrieve a NULL (invalid) source range.
            </summary>
            <returns>Null Source Range</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getRange(ClangNet.Native.CXSourceLocation,ClangNet.Native.CXSourceLocation)">
            <summary>
            Retrieve a source range given the beginning and ending source locations.
            </summary>
            <param name="begin">Beginning Source Location</param>
            <param name="end">Ending Source Location</param>
            <returns>Source Range</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_equalRanges(ClangNet.Native.CXSourceRange,ClangNet.Native.CXSourceRange)">
            <summary>
            Determine whether two ranges are equivalent.
            </summary>
            <param name="range1">Source Range1</param>
            <param name="range2">Source Range2</param>
            <returns>non-zero if the ranges are the same, zero if they differ.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Range_isNull(ClangNet.Native.CXSourceRange)">
            <summary>
            Returns non-zero if <paramref name="range"/> is null.
            </summary>
            <param name="range">Source Range</param>
            <returns>
            0 : Not Null Source Range
            Other : Null Source Range
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getExpansionLocation(ClangNet.Native.CXSourceLocation,System.IntPtr@,System.UInt32@,System.UInt32@,System.UInt32@)">
             <summary>
             Retrieve the file, line, column, and offset represented by
             the given source location.
            
             If the location refers into a macro expansion, retrieves the
             location of the macro expansion.
             </summary>
             <param name="location">
             the location within a source file that will be decomposed
             into its parts.
             </param>
             <param name="file">
             if non-NULL, will be set to the file to which the given
             source location points.
             </param>
             <param name="line">
             if non-NULL, will be set to the line to which the given
             source location points.
             </param>
             <param name="column">
             if non-NULL, will be set to the column to which the given
             source location points.
             </param>
             <param name="offset">
             if non-NULL, will be set to the offset into the
             buffer to which the given source location points.
             </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getPresumedLocation(ClangNet.Native.CXSourceLocation,ClangNet.Native.CXString@,System.UInt32@,System.UInt32@)">
             <summary>
             Retrieve the file, line and column represented by the given source
             location, as specified in a #line directive.
            
             Example: given the following source code in a file somefile.c
            
             <code>
             #123 "dummy.c" 1
            
             static int func(void)
             {
              return 0;
             }
             </code>
            
             the location information returned by this function would be
            
             File: dummy.c Line: 124 Column: 12
            
             whereas <c>clang_getExpansionLocation()</c> would have returned
            
             File: somefile.c Line: 3 Column: 12
             </summary>
             <param name="location">
             location the location within a source file that will be decomposed
             into its parts.
             </param>
             <param name="filename">
             if non-NULL, will be set to the filename of the
             source location.Note that filenames returned will be for "virtual" files,
             which don't necessarily exist on the machine running clang - e.g. when
             parsing preprocessed output obtained from a different environment. If
             a non-NULL value is passed in, remember to dispose of the returned value
             using <c>clang_disposeString()</c> once you've finished with it. For an invalid
             source location, an empty string is returned.
             </param>
             <param name="line">
             if non-NULL, will be set to the line number of the
             source location.For an invalid source location, zero is returned.
             </param>
             <param name="column">
             if non-NULL, will be set to the column number of the
             source location.For an invalid source location, zero is returned.
             </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getInstantiationLocation(ClangNet.Native.CXSourceLocation,System.IntPtr@,System.UInt32@,System.UInt32@,System.UInt32@)">
             <summary>
             Legacy API to retrieve the file, line, column, and offset represented
             by the given source location.
            
             This interface has been replaced by the newer interface
             <c>clang_getExpansionLocation()</c>.
             See that interface's documentation for details.
             </summary>
             <param name="location">
             the location within a source file that will be decomposed
             into its parts.
             </param>
             <param name="file">
             if non-NULL, will be set to the file to which the given
             source location points.
             </param>
             <param name="line">
             if non-NULL, will be set to the line to which the given
             source location points.
             </param>
             <param name="column">
             if non-NULL, will be set to the column to which the given
             source location points.
             </param>
             <param name="offset">
             if non-NULL, will be set to the offset into the
             buffer to which the given source location points.
             </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getSpellingLocation(ClangNet.Native.CXSourceLocation,System.IntPtr@,System.UInt32@,System.UInt32@,System.UInt32@)">
             <summary>
             Retrieve the file, line, column, and offset represented by
             the given source location.
            
             If the location refers into a macro instantiation, return where the
             location was originally spelled in the source file.
             </summary>
             <param name="location">
             the location within a source file that will be decomposed
             into its parts.
             </param>
             <param name="file">
             if non-NULL, will be set to the file to which the given
             source location points.
             </param>
             <param name="line">
             if non-NULL, will be set to the line to which the given
             source location points.
             </param>
             <param name="column">
             if non-NULL, will be set to the column to which the given
             source location points.
             </param>
             <param name="offset">
             if non-NULL, will be set to the offset into the
             buffer to which the given source location points.
             </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFileLocation(ClangNet.Native.CXSourceLocation,System.IntPtr@,System.UInt32@,System.UInt32@,System.UInt32@)">
             <summary>
             Retrieve the file, line, column, and offset represented by
             the given source location.
            
             If the location refers into a macro expansion, return where the macro was
             expanded or where the macro argument was written, if the location points at
             a macro argument.
             </summary>
             <param name="location">
             the location within a source file that will be decomposed
             into its parts.
             </param>
             <param name="file">
             if non-NULL, will be set to the file to which the given
             source location points.
             </param>
             <param name="line">
             if non-NULL, will be set to the line to which the given
             source location points.
             </param>
             <param name="column">
             if non-NULL, will be set to the column to which the given
             source location points.
             </param>
             <param name="offset">
             if non-NULL, will be set to the offset into the
             buffer to which the given source location points.
             </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getRangeStart(ClangNet.Native.CXSourceRange)">
            <summary>
            Retrieve a source location representing the first character within a
            source range.
            </summary>
            <param name="range">Source Range</param>
            <returns>Start Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getRangeEnd(ClangNet.Native.CXSourceRange)">
            <summary>
            Retrieve a source location representing the last character within a
            source range.
            </summary>
            <param name="range">Source Range</param>
            <returns>End Source Location</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getSkippedRanges(System.IntPtr,System.IntPtr)">
             <summary>
             Retrieve all ranges that were skipped by the preprocessor.
            
             The preprocessor will skip lines when they are surrounded by an
             if/ifdef/ifndef directive whose condition does not evaluate to true.
             </summary>
             <param name="tu">Translation Unit</param>
             <param name="file">File</param>
             <returns>Skipped Source Range List</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getAllSkippedRanges(System.IntPtr)">
            <summary>
            Retrieve all ranges from all files that were skipped by the
            preprocessor.
            </summary>
            <param name="tu">Translation Unit</param>
            <returns>Skipped Source Range List</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeSourceRangeList(System.IntPtr)">
            <summary>
            Destroy the given <c>CXSourceRangeList</c>.
            </summary>
            <param name="ranges">Source Range List</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getMangling(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve the CXString representing the mangled name of the cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>the CXString representing the mangled name of the cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getCxxManglings(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve the CXStrings representing the mangled symbols of the C++
            constructor or destructor at the cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            CXStrings representing the mangled symbols of the C++
            constructor or destructor at the cursor
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getObjCManglings(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve the CXStrings representing the mangled symbols of the ObjC
            class interface or implementation at the cursor.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            the CXStrings representing the mangled symbols of the ObjC
            class interface or implementation at the cursor
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getClangVersion">
            <summary>
            Return a version string, suitable for showing to a user, but not
            intended to be parsed (the format is not guaranteed to be stable).
            </summary>
            <returns>Version String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_toggleCrashRecovery(System.UInt32)">
            <summary>
            Enable/disable crash recovery.
            </summary>
            <param name="is_enabled">
            Flag to indicate if crash recovery is enabled.
            A non-zero value enables crash recovery, while 0 disables it.
            </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getInclusions(System.IntPtr,ClangNet.Native.CXInclusionVisitor,System.IntPtr)">
            <summary>
            Visit the set of preprocessor inclusions in a translation unit.
            The visitor function is called with the provided data for every included
            file.This does not include headers included by the PCH file(unless one
            is inspecting the inclusions in the PCH file itself).
            </summary>
            <param name="tu">Translation Unit</param>
            <param name="visitor">Inclusion Visitor</param>
            <param name="client_data">Client Data</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_Evaluate(ClangNet.Native.CXCursor)">
            <summary>
            If cursor is a statement declaration tries to evaluate the
            statement and if its variable, tries to evaluate its initializer,
            into its corresponding type.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Evaluation Result</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_getKind(System.IntPtr)">
            <summary>
            Returns the kind of the evaluated result.
            </summary>
            <param name="eval_result">Evaluation Result</param>
            <returns>Evaluation Result Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_getAsInt(System.IntPtr)">
            <summary>
            Returns the evaluation result as integer if the kind is Int.
            </summary>
            <param name="eval_result">Evaluation Result</param>
            <returns>Integer Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_getAsLongLong(System.IntPtr)">
            <summary>
            Returns the evaluation result as a long long integer if the
            kind is Int. This prevents overflows that may happen if the result is
            returned with <c>clang_EvalResult_getAsInt()</c>.
            </summary>
            <param name="eval_result">Evaluation Result</param>
            <returns>Long Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_isUnsignedInt(System.IntPtr)">
            <summary>
            Returns a non-zero value if the kind is Int and the evaluation
            result resulted in an unsigned integer.
            </summary>
            <param name="eval_result">Evaluation Result</param>
            <returns>Unsigned Integer Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_getAsUnsigned(System.IntPtr)">
            <summary>
            Returns the evaluation result as an unsigned integer if
            the kind is Int and <c>clang_EvalResult_isUnsignedInt</c> is non-zero.
            </summary>
            <param name="eval_result">Evaluation Result</param>
            <returns>Unsigned Long Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_getAsDouble(System.IntPtr)">
            <summary>
            Returns the evaluation result as double if the kind is double.
            </summary>
            <param name="eval_result">Evaluation Result</param>
            <returns>Double Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_getAsStr(System.IntPtr)">
            <summary>
            Returns the evaluation result as a constant string if the
            kind is other than Int or float. User must not free this pointer,
            instead call <c>clang_EvalResult_dispose()</c> on the <c>CXEvalResult</c> returned
            by <c>clang_Cursor_Evaluate()</c>.
            </summary>
            <param name="eval_result">Evaluation Result</param>
            <returns>String Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_EvalResult_dispose(System.IntPtr)">
            <summary>
            Disposes the created Eval memory.
            </summary>
            <param name="eval_result">Evaluation Result</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getModule(ClangNet.Native.CXCursor)">
            <summary>
            Given a CXCursor_ModuleImportDecl cursor, return the associated module.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Module</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getModuleForFile(System.IntPtr,System.IntPtr)">
            <summary>
            Given a CXFile header file, return the module that contains it, if one exists.
            </summary>
            <param name="tu">Translation Unit</param>
            <param name="file">File</param>
            <returns>Module</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Module_getASTFile(System.IntPtr)">
            <summary>
            Get AST File from Module
            </summary>
            <param name="module">a module object.</param>
            <returns>the module file where the provided module object came from.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Module_getParent(System.IntPtr)">
            <summary>
            Get Parent Module
            </summary>
            <param name="module">a module object.</param>
            <returns>
            the parent of a sub-module or NULL if the given module is top-level,
            e.g. for 'std.vector' it will return the 'std' module.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Module_getName(System.IntPtr)">
            <summary>
            Get Module Name
            </summary>
            <param name="module">a module object.</param>
            <returns>
            the name of the module, e.g. for the 'std.vector'
            sub-module it will return "vector".
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Module_getFullName(System.IntPtr)">
            <summary>
            Get Module Full Name
            </summary>
            <param name="module">a module object.</param>
            <returns>the full name of the module, e.g. "std.vector".</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Module_isSystem(System.IntPtr)">
            <summary>
            Check Module is System Module
            </summary>
            <param name="module">a module object.</param>
            <returns>non-zero if the module is a system one.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Module_getNumTopLevelHeaders(System.IntPtr,System.IntPtr)">
            <summary>
            Get Number of Top Level Headers
            </summary>
            <param name="tu">Translation Unit</param>
            <param name="module">a module object.</param>
            <returns>the number of top level headers associated with this module.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Module_getTopLevelHeader(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Get Top Level Header
            </summary>
            <param name="tu">Translation Unit</param>
            <param name="module">a module object.</param>
            <param name="index">top level header index (zero-based).</param>
            <returns>the specified top level header associated with the module.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getRemappings(System.String)">
            <summary>
            Retrieve a remapping.
            </summary>
            <param name="path">the path that contains metadata about remappings.</param>
            <returns>
            the requested remapping. This remapping must be freed
            via a call to <c>clang_remap_dispose()</c>.
            Can return NULL if an error occurred.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getRemappingsFromFileList(System.String[],System.UInt32)">
            <summary>
            Retrieve a remapping.
            </summary>
            <param name="file_paths">pointer to an array of file paths containing remapping info.</param>
            <param name="num_files">number of file paths.</param>
            <returns>
            the requested remapping. This remapping must be freed
            via a call to <c>clang_remap_dispose()</c>.
            Can return NULL if an error occurred.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_remap_getNumFiles(System.IntPtr)">
            <summary>
            Determine the number of remappings.
            </summary>
            <param name="remapping">remapping</param>
            <returns>the number of remappings</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_remap_getFilenames(System.IntPtr,System.UInt32,ClangNet.Native.CXString@,ClangNet.Native.CXString@)">
            <summary>
            Get the original and the associated filename from the remapping.
            </summary>
            <param name="remapping">remapping</param>
            <param name="index">index</param>
            <param name="original">If non-NULL, will be set to the original filename.</param>
            <param name="transformed">the associated filename</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_remap_dispose(System.IntPtr)">
            <summary>
            Dispose the remapping.
            </summary>
            <param name="remapping">remapping</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCString(ClangNet.Native.CXString)">
            <summary>
            Retrieve the character data associated with the given string
            </summary>
            <param name="string">CXString Data</param>
            <returns>Character Data</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeString(ClangNet.Native.CXString)">
            <summary>
            Free the given string
            </summary>
            <param name="string">CXString Data</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeStringSet(System.IntPtr)">
            <summary>
            Free the given string set
            </summary>
            <param name="set">CXStringSet Reference Data</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getToken(System.IntPtr,ClangNet.Native.CXSourceLocation)">
            <summary>
            Get the raw lexical token starting with the given location.
            </summary>
            <param name="tu">the translation unit whose text is being tokenized.</param>
            <param name="location">the source location with which the token starts.</param>
            <returns>
            The token starting with the given location or NULL if no such token
            Texist.The returned pointer must be freed with clang_disposeTokens before the
            Ttranslation unit is destroyed.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTokenKind(ClangNet.Native.CXToken)">
            <summary>
            Determine the kind of the given token.
            </summary>
            <param name="token">Token</param>
            <returns>Token Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTokenSpelling(System.IntPtr,ClangNet.Native.CXToken)">
             <summary>
             Determine the spelling of the given token.
            
             The spelling of a token is the textual representation of that token, e.g.,
             the text of an identifier or keyword.
             </summary>
             <param name="tu">the translation unit whose text is being tokenized.</param>
             <param name="token">Token</param>
             <returns>Token Spelling</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTokenLocation(System.IntPtr,ClangNet.Native.CXToken)">
            <summary>
            Retrieve the source location of the given token.
            </summary>
            <param name="tu">the translation unit whose text is being tokenized.</param>
            <param name="token">Token</param>
            <returns>Source Location of Token</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTokenExtent(System.IntPtr,ClangNet.Native.CXToken)">
            <summary>
            Retrieve a source range that covers the given token.
            </summary>
            <param name="tu">the translation unit whose text is being tokenized.</param>
            <param name="token">Token</param>
            <returns>Source Range of Token</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_tokenize(System.IntPtr,ClangNet.Native.CXSourceRange,System.IntPtr@,System.UInt32@)">
            <summary>
            Tokenize the source code described by the given range into raw
            lexical tokens.
            </summary>
            <param name="tu">the translation unit whose text is being tokenized.</param>
            <param name="range">
            Range the source range in which text should be tokenized.
            All of the tokens produced by tokenization will fall within this source range.
            </param>
            <param name="tokens">
            this pointer will be set to point to the array of tokens
            that occur within the given source range.The returned pointer must be
            freed with <c>clang_disposeTokens()</c> before the translation unit is destroyed.
            </param>
            <param name="num_tokens">it will be set to the number of tokens in the <paramref name="tokens"/> array.</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_annotateTokens(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr@)">
             <summary>
             Annotate the given set of tokens by providing cursors for each token
             that can be mapped to a specific entity within the abstract syntax tree.
            
             This token-annotation routine is equivalent to invoking
             clang_getCursor() for the source locations of each of the
             tokens.The cursors provided are filtered, so that only those
             cursors that have a direct correspondence to the token are
             accepted.For example, given a function call \c f(x),
             clang_getCursor() would provide the following cursors:
            
               * when the cursor is over the 'f', a DeclRefExpr cursor referring to 'f'.
               * when the cursor is over the '(' or the ')', a CallExpr referring to 'f'.
               * when the cursor is over the 'x', a DeclRefExpr cursor referring to 'x'.
            
             Only the first and last of these cursors will occur within the
             annotate, since the tokens "f" and "x' directly refer to a function
             and a variable, respectively, but the parentheses are just a small
             part of the full syntax of the function call expression, which is
             not provided as an annotation.
             </summary>
             <param name="tu">the translation unit that owns the given tokens.</param>
             <param name="tokens">the set of tokens to annotate.</param>
             <param name="num_tokens">the number of tokens in <paramref name="tokens"/>.</param>
             <param name="cursors">
             an array of <paramref name="num_tokens"/> cursors, whose contents will be
             replaced with the cursors corresponding to each token.
             </param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeTokens(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Free the given set of tokens.
            </summary>
            <param name="tu">the translation unit that owns the given tokens.</param>
            <param name="tokens">the set of tokens</param>
            <param name="num_tokens">the number of tokens in <paramref name="tokens"/>.</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTranslationUnitSpelling(System.IntPtr)">
            <summary>
            Get the original translation unit source file name.
            </summary>
            <param name="tu">Translation Unit</param>
            <returns>Translation Unit Source File Name</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_createTranslationUnitFromSourceFile(System.IntPtr,System.String,System.Int32,System.String[],System.UInt32,ClangNet.Native.CXUnsavedFile[])">
             <summary>
             Return the CXTranslationUnit for a given source file and the provided
             command line arguments one would pass to the compiler.
            
             Note: The 'source_filename' argument is optional.
             If the caller provides a NULL pointer,
             the name of the source file is expected to reside in the
             specified command line arguments.
            
             Note: When encountered in 'clang_command_line_args', the following options
             are ignored:
            
             '-c'
             '-emit-ast'
             '-fsyntax-only'
             '-o &lt;output file&gt;'  (both '-o' and '&lt;output file&gt;' are ignored)
             </summary>
             <param name="index">The index object with which the translation unit will be associated.</param>
             <param name="source_filename">
             The name of the source file to load, or NULL if the
             source file is included in <paramref name="clang_command_line_ags"/>.
             </param>
             <param name="num_clang_command_line_args">
             The number of command-line arguments in
             <paramref name="clang_command_line_ags"/>.
             </param>
             <param name="clang_command_line_ags">
             The command-line arguments that would be
             passed to the <c>clang</c> executable if it were being invoked out-of-process.
             These command-line options will be parsed and will affect how the translation
             unit is parsed.Note that the following options are ignored: '-c',
             '-emit-ast', '-fsyntax-only' (which is the default), and '-o &lt;output file&gt;'.
             </param>
             <param name="num_unsaved_files">
             the number of unsaved file entries in <paramref name="unsaved_files"/>.
             </param>
             <param name="unsaved_files">
             the files that have not yet been saved to disk
             but may be required for code completion, including the contents of
             those files.
             The contents and name of these files(as specified by CXUnsavedFile)
             are copied when necessary, so the client only needs to
             guarantee their validity until the call to this function returns.
             </param>
             <returns>Translation Unit</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_createTranslationUnit(System.IntPtr,System.String)">
            <summary>
            Same as <c>clang_createTranslationUnit2()</c>, but returns
            the <c>CXTranslationUnit</c> instead of an error code.
            In case of an error this routine returns a <c>NULL</c> <c>CXTranslationUnit</c>,
            without further detailed error codes.
            </summary>
            <param name="index">The index object with which the translation unit will be associated.</param>
            <param name="ast_filename">AST File Name</param>
            <returns>Translation Unit</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_createTranslationUnit2(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Create a translation unit from an AST file (\c -emit-ast).
            </summary>
            <param name="index">The index object with which the translation unit will be associated.</param>
            <param name="ast_filename">AST File Name</param>
            <param name="out_tu">A non-NULL pointer to store the created
            <c>CXTranslationUnit</c>.</param>
            <returns>Zero on success, otherwise returns an error code.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_defaultEditingTranslationUnitOptions">
             <summary>
             Returns the set of flags that is suitable for parsing a translation
             unit that is being edited.
            
             The set of flags returned provide options for <c>clang_parseTranslationUnit()</c>
             to indicate that the translation unit is likely to be reparsed many times,
             either explicitly (via <c>clang_reparseTranslationUnit()</c>) or implicitly
             (e.g., by code completion(<c>clang_codeCompletionAt()</c>)).
             The returned flag set contains an unspecified set of optimizations
             (e.g., the precompiled preamble) geared toward improving the performance of these routines.
             The set of optimizations enabled may change from one version to the next.
             </summary>
             <returns>Default Translation Unit Flags</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_parseTranslationUnit(System.IntPtr,System.String,System.String[],System.Int32,ClangNet.Native.CXUnsavedFile[],System.UInt32,ClangNet.TranslationUnitFlags)">
            <summary>
            Same as <c>clang_parseTranslationUnit2()</c>, but returns
            the <c>CXTranslationUnit</c> instead of an error code.
            In case of an error this routine returns a <c>NULL</c> <c>CXTranslationUnit</c>,
            without further detailed error codes.
            </summary>
            <param name="index">The index object with which the translation unit will be associated.</param>
            <param name="source_filename">Source File Name</param>
            <param name="command_line_args">
            The command-line arguments that would be
            passed to the <c>clang</c> executable if it were being invoked out-of-process.
            These command-line options will be parsed and will affect how the translation
            unit is parsed.Note that the following options are ignored: '-c',
            '-emit-ast', '-fsyntax-only' (which is the default), and '-o &lt;output file&gt;'.
            </param>
            <param name="num_command_line_args">
            The number of command-line arguments in
            <paramref name="command_line_args"/>.
            </param>
            <param name="unsaved_files">
            the files that have not yet been saved to disk
            but may be required for code completion, including the contents of
            those files.
            The contents and name of these files(as specified by CXUnsavedFile)
            are copied when necessary, so the client only needs to
            guarantee their validity until the call to this function returns.
            </param>
            <param name="num_unsaved_files">
            the number of unsaved file entries in <paramref name="unsaved_files"/>.
            </param>
            <param name="options">
            A bitmask of options that affects how the translation unit
            is managed but not its compilation.This should be a bitwise OR of the
            CXTranslationUnit_XXX flags.
            </param>
            <returns>Translation Unit</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_parseTranslationUnit2(System.IntPtr,System.String,System.String[],System.Int32,ClangNet.Native.CXUnsavedFile[],System.UInt32,ClangNet.TranslationUnitFlags,System.IntPtr@)">
             <summary>
             Parse the given source file and the translation unit corresponding
             to that file.
            
             This routine is the main entry point for the Clang C API, providing the
             ability to parse a source file into a translation unit that can then be
             queried by other functions in the API.This routine accepts a set of
             command-line arguments so that the compilation can be configured in the same
             way that the compiler is configured on the command line.
             </summary>
             <param name="index">The index object with which the translation unit will be associated.</param>
             <param name="source_filename">
             The name of the source file to load, or NULL if the
             source file is included in <paramref name="command_line_args"/>.
             </param>
             <param name="command_line_args">
             The command-line arguments that would be
             passed to the <c>clang</c> executable if it were being invoked out-of-process.
             These command-line options will be parsed and will affect how the translation
             unit is parsed.Note that the following options are ignored: '-c',
             '-emit-ast', '-fsyntax-only' (which is the default), and '-o &lt;output file&gt;'.
             </param>
             <param name="num_command_line_args">
             The number of command-line arguments in <paramref name="command_line_args"/>.
             </param>
             <param name="unsaved_files">
             the files that have not yet been saved to disk
             but may be required for parsing, including the contents of
             those files.The contents and name of these files (as specified by
             CXUnsavedFile) are copied when necessary, so the client only needs to
             guarantee their validity until the call to this function returns.
             </param>
             <param name="num_unsaved_files">
             the number of unsaved file entries in <paramref name="unsaved_files"/>.
             </param>
             <param name="options">
             A bitmask of options that affects how the translation unit
             is managed but not its compilation.This should be a bitwise OR of the
             CXTranslationUnit_XXX flags.
             </param>
             <param name="out_tu">
             A non-NULL pointer to store the created
             <c>CXTranslationUnit</c>, describing the parsed code and containing any
             diagnostics produced by the compiler.
             </param>
             <returns>Zero on success, otherwise returns an error code.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_parseTranslationUnit2FullArgv(System.IntPtr,System.String,System.String[],System.Int32,ClangNet.Native.CXUnsavedFile[],System.UInt32,ClangNet.TranslationUnitFlags,System.IntPtr@)">
            <summary>
            Same as clang_parseTranslationUnit2 but requires a full command line
            for <paramref name="command_line_args"/> including argv[0]. This is useful if the standard
            library paths are relative to the binary.
            </summary>
            <param name="index">The index object with which the translation unit will be associated.</param>
            <param name="source_filename">
            The name of the source file to load, or NULL if the
            source file is included in <paramref name="command_line_args"/>.
            </param>
            <param name="command_line_args">
            The command-line arguments that would be
            passed to the <c>clang</c> executable if it were being invoked out-of-process.
            These command-line options will be parsed and will affect how the translation
            unit is parsed.Note that the following options are ignored: '-c',
            '-emit-ast', '-fsyntax-only' (which is the default), and '-o &lt;output file&gt;'.
            </param>
            <param name="num_command_line_args">
            The number of command-line arguments in <paramref name="command_line_args"/>.
            </param>
            <param name="unsaved_files">
            the files that have not yet been saved to disk
            but may be required for parsing, including the contents of
            those files.The contents and name of these files (as specified by
            CXUnsavedFile) are copied when necessary, so the client only needs to
            guarantee their validity until the call to this function returns.
            </param>
            <param name="num_unsaved_files">
            the number of unsaved file entries in <paramref name="unsaved_files"/>.
            </param>
            <param name="options">
            A bitmask of options that affects how the translation unit
            is managed but not its compilation.This should be a bitwise OR of the
            CXTranslationUnit_XXX flags.
            </param>
            <param name="out_tu">
            A non-NULL pointer to store the created
            <c>CXTranslationUnit</c>, describing the parsed code and containing any
            diagnostics produced by the compiler.
            </param>
            <returns>Zero on success, otherwise returns an error code.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_defaultSaveOptions(System.IntPtr)">
             <summary>
             Returns the set of flags that is suitable for saving a translation
             unit.
            
             The set of flags returned provide options for
             <c>clang_saveTranslationUnit()</c> by default. The returned flag
             set contains an unspecified set of options that save translation units with
             the most commonly-requested data.
             </summary>
             <param name="tu">Translation Unit</param>
             <returns>Default Save Translation Unit Flags</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_saveTranslationUnit(System.IntPtr,System.String,ClangNet.SaveTranslationUnitFlags)">
             <summary>
             Saves a translation unit into a serialized representation of
             that translation unit on disk.
            
             Any translation unit that was parsed without error can be saved
             into a file.The translation unit can then be deserialized into a
             new <c>CXTranslationUnit</c> with <c>clang_createTranslationUnit()</c> or,
             if it is an incomplete translation unit that corresponds to a
             header, used as a precompiled header when parsing other translation
             units.
             </summary>
             <param name="tu">The translation unit to save.</param>
             <param name="filename">The file to which the translation unit will be saved.</param>
             <param name="options">
             A bitmask of options that affects how the translation unit
             is saved.This should be a bitwise OR of the
             CXSaveTranslationUnit_XXX flags.
             </param>
             <returns>
             A value that will match one of the enumerators of the CXSaveError
             enumeration.Zero(CXSaveError_None) indicates that the translation unit was
             saved successfully, while a non-zero value indicates that a problem occurred.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_suspendTranslationUnit(System.IntPtr)">
             <summary>
             Suspend a translation unit in order to free memory associated with it.
            
             A suspended translation unit uses significantly less memory but on the other
             side does not support any other calls than <c>clang_reparseTranslationUnit()</c>
             to resume it or <c>clang_disposeTranslationUnit()</c> to dispose it completely.
             </summary>
             <param name="tu">Translation Unit</param>
             <returns>???</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeTranslationUnit(System.IntPtr)">
            <summary>
            Destroy the specified CXTranslationUnit object.
            </summary>
            <param name="tu">Translation Unit</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_defaultReparseOptions(System.IntPtr)">
             <summary>
             Returns the set of flags that is suitable for reparsing a translation
             unit.
            
             The set of flags returned provide options for
             <c>clang_reparseTranslationUnit()</c> by default. The returned flag
             set contains an unspecified set of optimizations geared toward common uses
             of reparsing.The set of optimizations enabled may change from one version
             to the next.
             </summary>
             <param name="tu">Translation Unit</param>
             <returns>Default Reparse Translation Unit Flags</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_reparseTranslationUnit(System.IntPtr,System.UInt32,ClangNet.Native.CXUnsavedFile[],ClangNet.ReparseTranslationUnitFlags)">
             <summary>
             Reparse the source files that produced this translation unit.
            
             This routine can be used to re-parse the source files that originally
             created the given translation unit, for example because those source files
             have changed(either on disk or as passed via <paramref name="unsaved_files"/>).
             The source code will be reparsed with the same command-line options as it
             was originally parsed.
            
             Reparsing a translation unit invalidates all cursors and source locations
             that refer into that translation unit. This makes reparsing a translation
             unit semantically equivalent to destroying the translation unit and then
             creating a new translation unit with the same command-line arguments.
             However, it may be more efficient to reparse a translation
             unit using this routine.
             </summary>
             <param name="tu">
             The translation unit whose contents will be re-parsed. The
             translation unit must originally have been built with
             <c>clang_createTranslationUnitFromSourceFile()</c>.
             </param>
             <param name="num_unsaved_files">
             The number of unsaved file entries in <paramref name="num_unsaved_files"/>
             </param>
             <param name="unsaved_files">
             The files that have not yet been saved to disk
             Tbut may be required for parsing, including the contents of
             Tthose files.The contents and name of these files (as specified by
             TCXUnsavedFile) are copied when necessary, so the client only needs to
             Tguarantee their validity until the call to this function returns.
             </param>
             <param name="options">
             A bitset of options composed of the flags in CXReparse_Flags.
             The function <c>clang_defaultReparseOptions()</c> produces a default set of
             options recommended for most uses, based on the translation unit.
             </param>
             <returns>
             0 if the sources could be reparsed.  A non-zero error code will be
             returned if reparsing was impossible, such that the translation unit is
             invalid.In such cases, the only valid call for <paramref name="tu"/> is
             <c>clang_disposeTranslationUnit(tu)</c>.  The error codes returned by this
             routine are described by the <c>CXErrorCode</c> enum.
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTUResourceUsageName(ClangNet.ResourceUsageKind)">
            <summary>
            Returns the human-readable null-terminated C string that represents
            the name of the memory category.This string should never be freed.
            </summary>
            <param name="kind">Resource Usage Kind</param>
            <returns>Resource Usage Kind Name</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCXTUResourceUsage(System.IntPtr)">
            <summary>
            Return the memory usage of a translation unit.  This object
            should be released with <c>clang_disposeCXTUResourceUsage()</c>.
            </summary>
            <param name="tu">Translation Unit</param>
            <returns>Translation Unit Resource Usage</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_disposeCXTUResourceUsage(ClangNet.Native.CXTUResourceUsage)">
            <summary>
            Dispose Translation Unit Resource Usage object.
            </summary>
            <param name="usage">Translation Unit Resource Usage</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTranslationUnitTargetInfo(System.IntPtr)">
             <summary>
             Get target information for this translation unit.
            
             The CXTargetInfo object cannot outlive the CXTranslationUnit object.
             </summary>
             <param name="tu">Translation Unit</param>
             <returns>Target Info</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TargetInfo_dispose(System.IntPtr)">
            <summary>
            Destroy the CXTargetInfo object.
            </summary>
            <param name="target_info">Target Info</param>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TargetInfo_getTriple(System.IntPtr)">
             <summary>
             Get the normalized target triple as a string.
            
             Returns the empty string in case of any error.
             </summary>
             <param name="target_info">Target Info</param>
             <returns>Normalized Target Triple String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_TargetInfo_getPointerWidth(System.IntPtr)">
             <summary>
             Get the pointer width of the target in bits.
            
             Returns -1 in case of error.
             </summary>
             <param name="target_info">Target Info</param>
             <returns>Pointer Width</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorType(ClangNet.Native.CXCursor)">
            <summary>
            Retrieve the type of a CXCursor (if any).
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTypeSpelling(ClangNet.Native.CXType)">
             <summary>
             Pretty-print the underlying type using the rules of the
             language of the translation unit from which it came.
            
             If the type is invalid, an empty string is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Type Spelling String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTypedefDeclUnderlyingType(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the underlying type of a typedef declaration.
            
             If the cursor does not reference a typedef declaration,
             an invalid type is returned.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Typedef Underlying Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getEnumDeclIntegerType(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the integer type of an enum declaration.
            
             If the cursor does not reference an enum declaration,
             an invalid type is returned.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Enum Declaration Integer Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getEnumConstantDeclValue(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the integer value of an enum constant declaration as a signed
             long long.
            
             If the cursor does not reference an enum constant declaration, LLONG_MIN is returned.
             Since this is also potentially a valid constant value, the kind of the cursor
             must be verified before calling this function.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Enum Constant Declaration Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getEnumConstantDeclUnsignedValue(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the integer value of an enum constant declaration as an unsigned
             long long.
            
             If the cursor does not reference an enum constant declaration, ULLONG_MAX is returned.
             Since this is also potentially a valid constant value, the kind of the cursor
             must be verified before calling this function.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Enum Constant Declaration Unsigned Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFieldDeclBitWidth(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the bit width of a bit field declaration as an integer.
            
             If a cursor that is not a bit field declaration is passed in, -1 is returned.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Field Declaration Bit Width</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getNumArguments(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the number of non-variadic arguments associated with a given
             cursor.
            
             The number of arguments can be determined for calls as well as for
             declarations of functions or methods.For other cursors -1 is returned.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Number of Non-Variadic Arguments</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getArgument(ClangNet.Native.CXCursor,System.UInt32)">
             <summary>
             Retrieve the argument cursor of a function or method.
            
             The argument cursor can be determined for calls as well as for declarations
             of functions or methods.For other cursors and for invalid indices, an
             invalid cursor is returned.
             </summary>
             <param name="cursor">Cursor</param>
             <param name="index">Index of Arguments</param>
             <returns>Argument of Function or Method</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getNumTemplateArguments(ClangNet.Native.CXCursor)">
             <summary>
             Returns the number of template args of a function decl representing a
             template specialization.
            
             If the argument cursor cannot be converted into a template function
             declaration, -1 is returned.
            
             For example, for the following declaration and specialization:
             template&lt;typename T, int kInt, bool kBool&gt;
             void foo() { ... }
            
             template&lt;&gt;
             void foo&lt;float, -7, true&gt;();
            
             The value 3 would be returned from this call.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Number of Template Arguments</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getTemplateArgumentKind(ClangNet.Native.CXCursor,System.UInt32)">
             <summary>
             Retrieve the kind of the I'th template argument of the CXCursor C.
            
             If the argument CXCursor does not represent a FunctionDecl, an invalid
             template argument kind is returned.
            
             For example, for the following declaration and specialization:
             template&lt;typename T, int kInt, bool kBool&gt;
             void foo() { ... }
            
             template&lt;&gt;
             void foo&lt;float, -7, true&gt;();
            
             For I = 0, 1, and 2, Type, Integral, and Integral will be returned,
             respectively.
             </summary>
             <param name="cursor">Cursor</param>
             <param name="index">Index of Template Arguments</param>
             <returns>Template Argument Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getTemplateArgumentType(ClangNet.Native.CXCursor,System.UInt32)">
             <summary>
             Retrieve a CXType representing the type of a TemplateArgument of a
             function decl representing a template specialization.
            
             If the argument CXCursor does not represent a FunctionDecl whose I'th
             template argument has a kind of CXTemplateArgKind_Integral, an invalid type
             is returned.
            
             For example, for the following declaration and specialization:
             template&lt;typename T, int kInt, bool kBool&gt;
             void foo() { ... }
            
             template&lt;&gt;
             void foo&lt;float, -7, true&gt;();
            
             If called with I = 0, "float", will be returned.
             Invalid types will be returned for I == 1 or 2.
             </summary>
             <param name="cursor">Cursor</param>
             <param name="index">Index of Template Arguments</param>
             <returns>Template Argument Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getTemplateArgumentValue(ClangNet.Native.CXCursor,System.UInt32)">
             <summary>
             Retrieve the value of an Integral TemplateArgument (of a function
             decl representing a template specialization) as a signed long long.
            
             It is undefined to call this function on a CXCursor that does not represent a
             FunctionDecl or whose I'th template argument is not an integral value.
            
             For example, for the following declaration and specialization:
             template&lt;typename T, int kInt, bool kBool&gt;
             void foo() { ... }
            
             template&lt;&gt;
             void foo&lt;float, -7, true&gt;();
            
             If called with I = 1 or 2, -7 or true will be returned, respectively.
             For I == 0, this function's behavior is undefined.
             </summary>
             <param name="cursor">Cursor</param>
             <param name="index">Index of Template Arguments</param>
             <returns>Template Argument Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getTemplateArgumentUnsignedValue(ClangNet.Native.CXCursor,System.UInt32)">
             <summary>
             Retrieve the value of an Integral TemplateArgument (of a function
             decl representing a template specialization) as an unsigned long long.
            
             It is undefined to call this function on a CXCursor that does not represent a
             FunctionDecl or whose I'th template argument is not an integral value.
            
             For example, for the following declaration and specialization:
             template&lt;typename T, int kInt, bool kBool&gt;
             void foo() { ... }
            
             template&lt;&gt;
             void foo&lt;float, 2147483649, true&gt;();
            
             If called with I = 1 or 2, 2147483649 or true will be returned, respectively.
             For I == 0, this function's behavior is undefined.
             </summary>
             <param name="cursor">Cursor</param>
             <param name="index">Index of Template Arguments</param>
             <returns>Template Argument Unsigned Value</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_equalTypes(ClangNet.Native.CXType,ClangNet.Native.CXType)">
            <summary>
            Determine whether two CXTypes represent the same type.
            </summary>
            <param name="type1">Type1</param>
            <param name="type2">Type2</param>
            <returns>non-zero if the CXTypes represent the same type and zero otherwise.</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCanonicalType(ClangNet.Native.CXType)">
             <summary>
             Return the canonical type for a CXType.
            
             Clang's type system explicitly models typedefs and all the ways
             a specific type can be represented.The canonical type is the underlying
             type with all the "sugar" removed.For example, if 'T' is a typedef
             for 'int', the canonical type for 'T' would be 'int'.
             </summary>
             <param name="type">Type</param>
             <returns>Canonical Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isConstQualifiedType(ClangNet.Native.CXType)">
            <summary>
            Determine whether a CXType has the "const" qualifier set,
            without looking through typedefs that may have added "const" at a
            different level.
            </summary>
            <param name="type">Type</param>
            <returns>
            0 : Not Const Qualified Type
            Other : Const Qualified Type
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isMacroFunctionLike(ClangNet.Native.CXCursor)">
            <summary>
            Determine whether a  CXCursor that is a macro, is
            function like.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Function Like Macro
            Other : Function Like Macro
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isMacroBuiltin(ClangNet.Native.CXCursor)">
            <summary>
            Determine whether a  CXCursor that is a macro, is a
            builtin one.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Builtin Macro
            Other : Builtin Macro
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isFunctionInlined(ClangNet.Native.CXCursor)">
            <summary>
             Determine whether a CXCursor that is a function declaration, is an
             inline declaration.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Inlined Function
            Other : Inlined Function
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isVolatileQualifiedType(ClangNet.Native.CXType)">
            <summary>
            Determine whether a CXType has the "volatile" qualifier set,
            without looking through typedefs that may have added "volatile" at
            a different level.
            </summary>
            <param name="type">Type</param>
            <returns>
            0 : Not Volatile Qualified Type
            Other : Volatile Qualified Type
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isRestrictQualifiedType(ClangNet.Native.CXType)">
            <summary>
            Determine whether a CXType has the "restrict" qualifier set,
            without looking through typedefs that may have added "restrict" at a
            different level.
            </summary>
            <param name="type">Type</param>
            <returns>
            0 : Not Restrict Qualified Type
            Other : Restrict Qualified Type
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getAddressSpace(ClangNet.Native.CXType)">
            <summary>
            Returns the address space of the given type.
            </summary>
            <param name="type">Type</param>
            <returns>Address Space of Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTypedefName(ClangNet.Native.CXType)">
            <summary>
            Returns the typedef name of the given type.
            </summary>
            <param name="type">Type</param>
            <returns>Typedef Name</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getPointeeType(ClangNet.Native.CXType)">
            <summary>
            For pointer types, returns the type of the pointee.
            </summary>
            <param name="type">Type</param>
            <returns>Pointee Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTypeDeclaration(ClangNet.Native.CXType)">
            <summary>
            Return the cursor for the declaration of the given type.
            </summary>
            <param name="type">Type</param>
            <returns>Type Declaration Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getDeclObjCTypeEncoding(ClangNet.Native.CXCursor)">
            <summary>
            Returns the Objective-C type encoding for the specified declaration.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>Objective-C Type Encoding String</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getObjCEncoding(ClangNet.Native.CXType)">
            <summary>
            Returns the Objective-C type encoding for the specified CXType.
            </summary>
            <param name="type">Cursor</param>
            <returns>Objective-C Type Encoding</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getTypeKindSpelling(ClangNet.TypeKind)">
            <summary>
            Retrieve the spelling of a given CXTypeKind.
            </summary>
            <param name="kind">Type Kind</param>
            <returns>Type Kind Spelling</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getFunctionTypeCallingConv(ClangNet.Native.CXType)">
             <summary>
             Retrieve the calling convention associated with a function type.
            
             If a non-function type is passed in, CXCallingConv_Invalid is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Calling Convention</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getResultType(ClangNet.Native.CXType)">
             <summary>
             Retrieve the return type associated with a function type.
            
             If a non-function type is passed in, an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Result Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getExceptionSpecificationType(ClangNet.Native.CXType)">
             <summary>
             Retrieve the exception specification type associated with a function type.
             This is a value of type CXCursor_ExceptionSpecificationKind.
            
             If a non-function type is passed in, an error code of -1 is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Exception Specification Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNumArgTypes(ClangNet.Native.CXType)">
             <summary>
             Retrieve the number of non-variadic parameters associated with a
             function type.
            
             If a non-function type is passed in, -1 is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Number of Non-Variadic Argument Types</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getArgType(ClangNet.Native.CXType,System.UInt32)">
             <summary>
             Retrieve the type of a parameter of a function type.
            
             If a non-function type is passed in or the function does not have enough
             parameters, an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <param name="index">Index of Argument Types</param>
             <returns>Argument Type of Function Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getObjCObjectBaseType(ClangNet.Native.CXType)">
             <summary>
             Retrieves the base type of the ObjCObjectType.
            
             If the type is not an ObjC object, an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Objective-C Base Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getNumObjCProtocolRefs(ClangNet.Native.CXType)">
             <summary>
             Retrieve the number of protocol references associated with an ObjC object/id.
            
             If the type is not an ObjC object, 0 is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Number of Objective-C Protocol References</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getObjCProtocolDecl(ClangNet.Native.CXType,System.UInt32)">
             <summary>
             Retrieve the decl for a protocol reference for an ObjC object/id.
            
             If the type is not an ObjC object or there are not enough protocol
             references, an invalid cursor is returned.
             </summary>
             <param name="type">Type</param>
             <param name="index">Index of Protocol References</param>
             <returns>Declaration Cursor for Protocol Reference</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getNumObjCTypeArgs(ClangNet.Native.CXType)">
             <summary>
             Retreive the number of type arguments associated with an ObjC object.
            
             If the type is not an ObjC object, 0 is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Number of Objective-C Type Arguments</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getObjCTypeArg(ClangNet.Native.CXType,System.UInt32)">
             <summary>
             Retrieve a type argument associated with an ObjC object.
            
             If the type is not an ObjC or the index is not valid,
             an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <param name="index">Index of Type Arguments</param>
             <returns>Objective-C Type Argument</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isFunctionTypeVariadic(ClangNet.Native.CXType)">
            <summary>
            Return 1 if the CXType is a variadic function type, and 0 otherwise.
            </summary>
            <param name="type">Type</param>
            <returns>
            0 : Not Variadic Function Type
            Other : Variadic Function Type
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorResultType(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the return type associated with a given cursor.
            
             This only returns a valid type if the cursor refers to a function or method.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Result Type of Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCursorExceptionSpecificationType(ClangNet.Native.CXCursor)">
             <summary>
             Retrieve the exception specification type associated with a given cursor.
             This is a value of type CXCursor_ExceptionSpecificationKind.
            
             This only returns a valid result if the cursor refers to a function or method.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Exception Speficiation Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isPODType(ClangNet.Native.CXType)">
            <summary>
            Return 1 if the CXType is a POD (plain old data) type, and 0
            otherwise.
            </summary>
            <param name="type">Type</param>
            <returns>
            0 : Not POD Type
            Other : POD Type
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getElementType(ClangNet.Native.CXType)">
             <summary>
             Return the element type of an array, complex, or vector type.
            
             If a type is passed in that is not an array, complex, or vector type,
             an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Element Type of Array / Complex / Vector Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNumElements(ClangNet.Native.CXType)">
             <summary>
             Return the number of elements of an array or vector type.
            
             If a type is passed in that is not an array or vector type,
             -1 is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Number of Elements of Array or Vector Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getArrayElementType(ClangNet.Native.CXType)">
             <summary>
             Return the element type of an array type.
            
             If a non-array type is passed in, an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Element Type of Array</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getArraySize(ClangNet.Native.CXType)">
             <summary>
             Return the array size of a constant array.
            
             If a non-array type is passed in, -1 is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Array Size of Constant Array</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getNamedType(ClangNet.Native.CXType)">
             <summary>
             Retrieve the type named by the qualified-id.
            
             If a non-elaborated type is passed in, an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Named Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_isTransparentTagTypedef(ClangNet.Native.CXType)">
             <summary>
             Determine if a typedef is 'transparent' tag.
            
             A typedef is considered 'transparent' if it shares a name and spelling
             location with its underlying tag type, as is the case with the NS_ENUM macro.
             </summary>
             <param name="type">Type</param>
             <returns>
             0 : Not Transparent Tag Typedef
             Other : Transparent Tag Typedef
             </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getNullability(ClangNet.Native.CXType)">
            <summary>
            Retrieve the nullability kind of a pointer type.
            </summary>
            <param name="type">Type</param>
            <returns>Type Nullability Kind</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getAlignOf(ClangNet.Native.CXType)">
             <summary>
             Return the alignment of a type in bytes as per C++[expr.alignof]
             standard.
            
             If the type declaration is invalid, CXTypeLayoutError_Invalid is returned.
             If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete
             is returned.
             If the type declaration is a dependent type, CXTypeLayoutError_Dependent is
             returned.
             If the type declaration is not a constant size type,
             CXTypeLayoutError_NotConstantSize is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Alignment of Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getClassType(ClangNet.Native.CXType)">
             <summary>
             Return the class type of an member pointer type.
            
             If a non-member-pointer type is passed in, an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Class Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getSizeOf(ClangNet.Native.CXType)">
             <summary>
             Return the size of a type in bytes as per C++[expr.sizeof] standard.
            
             If the type declaration is invalid, CXTypeLayoutError_Invalid is returned.
             If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete
             is returned.
             If the type declaration is a dependent type, CXTypeLayoutError_Dependent is
             returned.
             </summary>
             <param name="type">Type</param>
             <returns>Size of Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getOffsetOf(ClangNet.Native.CXType,System.String)">
             <summary>
             Return the offset of a field named S in a record of type T in bits
             as it would be returned by __offsetof__ as per C++11[18.2p4]
            
             If the cursor is not a record field declaration, CXTypeLayoutError_Invalid
             is returned.
             If the field's type declaration is an incomplete type,
             CXTypeLayoutError_Incomplete is returned.
             If the field's type declaration is a dependent type,
             CXTypeLayoutError_Dependent is returned.
             If the field's name S is not found,
             CXTypeLayoutError_InvalidFieldName is returned.
             </summary>
             <param name="type">Type</param>
             <param name="str">Field Name</param>
             <returns>Offset of Field Name</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getModifiedType(ClangNet.Native.CXType)">
             <summary>
             Return the type that was modified by this attributed type.
            
             If the type is not an attributed type, an invalid type is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Modified Type</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getOffsetOfField(ClangNet.Native.CXCursor)">
             <summary>
             Return the offset of the field represented by the Cursor.
            
             If the cursor is not a field declaration, -1 is returned.
             If the cursor semantic parent is not a record field declaration,
             CXTypeLayoutError_Invalid is returned.
             If the field's type declaration is an incomplete type,
             CXTypeLayoutError_Incomplete is returned.
             If the field's type declaration is a dependent type,
             CXTypeLayoutError_Dependent is returned.
             If the field's name S is not found,
             CXTypeLayoutError_InvalidFieldName is returned.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Offset of Field Cursor</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isAnonymous(ClangNet.Native.CXCursor)">
            <summary>
            Determine whether the given cursor represents an anonymous
            tag or namespace.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Anonymous Tag or Namespace
            Other : Anonymous Tag or Namespace
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isAnonymousRecordDecl(ClangNet.Native.CXCursor)">
            <summary>
            Determine whether the given cursor represents an anonymous record
            declaration.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Anonymous Record Declaration
            Other : Anonymous Record Declaration
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isInlineNamespace(ClangNet.Native.CXCursor)">
            <summary>
            Determine whether the given cursor represents an inline namespace
            declaration.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Inline Namespace Declaration
            Other : Inline Namespace Declaration
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getNumTemplateArguments(ClangNet.Native.CXType)">
            <summary>
            Returns the number of template arguments for given template
            specialization, or -1 if type <paramref name="type"/> is not a template specialization.
            </summary>
            <param name="type">Type</param>
            <returns>Number of Template Arguments</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getTemplateArgumentAsType(ClangNet.Native.CXType,System.UInt32)">
             <summary>
             Returns the type template argument of a template class specialization
             at given index.
            
             This function only returns template type arguments and does not handle
             template template arguments or variadic packs.
             </summary>
             <param name="type">Type</param>
             <param name="index">Index of Template Arguments</param>
             <returns>Type Template Argument</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Type_getCXXRefQualifier(ClangNet.Native.CXType)">
             <summary>
             Retrieve the ref-qualifier kind of a function or method.
            
             The ref-qualifier is returned for C++ functions or methods.For other types
             or non-C++ declarations, CXRefQualifier_None is returned.
             </summary>
             <param name="type">Type</param>
             <returns>Reference Qualifier Kind of Function or Method</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_isBitField(ClangNet.Native.CXCursor)">
            <summary>
            Returns non-zero if the cursor specifies a Record member that is a
            bitfield.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Bitfield
            Other Bitfield
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_isVirtualBase(ClangNet.Native.CXCursor)">
            <summary>
            Returns 1 if the base class specified by the cursor with kind
            CX_CXXBaseSpecifier is virtual.
            </summary>
            <param name="cursor">Cursor</param>
            <returns>
            0 : Not Virtual Base Class
            Other : Virtual Base Class
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getCXXAccessSpecifier(ClangNet.Native.CXCursor)">
             <summary>
             Returns the access control level for the referenced object.
            
             If the cursor refers to a C++ declaration, its access control level within its
             parent scope is returned.Otherwise, if the cursor refers to a base specifier or
             access specifier, the specifier itself is returned.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>C++ Access Specifier</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_Cursor_getStorageClass(ClangNet.Native.CXCursor)">
             <summary>
             Returns the storage class for a function or variable declaration.
            
             If the passed in Cursor is not a function or variable declaration,
             CX_SC_Invalid is returned else the storage class.
             </summary>
             <param name="cursor">Cursor</param>
             <returns>Storage Class</returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getNumOverloadedDecls(ClangNet.Native.CXCursor)">
            <summary>
            Determine the number of overloaded declarations referenced by a
            <c>CXCursor_OverloadedDeclRef</c> cursor.
            </summary>
            <param name="cursor">The cursor whose overloaded declarations are being queried.</param>
            <returns>
            The number of overloaded declarations referenced by <paramref name="cursor"/>.
            If it is not a <c>CXCursor_OverloadedDeclRef</c> cursor, returns 0.
            </returns>
        </member>
        <member name="M:ClangNet.Native.LibClang.clang_getOverloadedDecl(ClangNet.Native.CXCursor,System.UInt32)">
            <summary>
            Retrieve a cursor for one of the overloaded declarations referenced
            by a <c>CXCursor_OverloadedDeclRef</c> cursor.
            </summary>
            <param name="cursor">The cursor whose overloaded declarations are being queried.</param>
            <param name="index">index The zero-based index into the set of overloaded declarations in the cursor.</param>
            <returns>
            A cursor representing the declaration referenced by the given
            <paramref name="cursor"/> at the specified <paramref name="index"/>.If the cursor does not have an
            associated set of overloaded declarations, or if the index is out of bounds,
            returns <c>clang_getNullCursor()</c>;
            </returns>
        </member>
        <member name="T:ClangNet.Native.CXCursorVisitor">
             <summary>
             Visitor invoked for each cursor found by a traversal.
            
             This visitor function will be invoked for each cursor found by
             <c>clang_visitCursorChildren()</c>.
             Its first argument is the cursor being visited,
             its second argument is the parent visitor for that cursor,
             and its third argument is the client data provided to
             <c>clang_visitCursorChildren()</c>.
            
             The visitor should return one of the <c>CXChildVisitResult</c>
             values to direct <c>clang_visitCursorChildren()</c>.
             </summary>
             <param name="cursor">Cursor</param>
             <param name="parent">Parent Cursor</param>
             <param name="client_data">Client Data</param>
             <returns>Child Visit Result</returns>
        </member>
        <member name="T:ClangNet.Native.CXFieldVisitor">
             <summary>
             Visitor invoked for each field found by a traversal.
            
             This visitor function will be invoked for each field found by
             <c>clang_Type_visitFields</c>. Its first argument is the cursor being
             visited, its second argument is the client data provided to
             <c>clang_Type_visitFields</c>.
            
             The visitor should return one of the <c>CXVisitorResult</c> values
             to direct <c>clang_Type_visitFields</c>.
             </summary>
             <param name="cursor">Cursor</param>
             <param name="client_data">Client Data</param>
             <returns>Visitor Result</returns>
        </member>
        <member name="T:ClangNet.Native.CXInclusionVisitor">
             <summary>
             Visitor invoked for each file in a translation unit
             (used with <c>clang_getInclusions()</c>).
            
             This visitor function will be invoked by <c>clang_getInclusions()</c> for each
             file included(either at the top-level or by #include directives) within
             a translation unit.The first argument is the file being included, and
             the second and third arguments provide the inclusion stack.  The
             array is sorted in order of immediate inclusion.  For example,
             the first element refers to the location that included 'included_file'.
             </summary>
             <param name="included_file">Include File</param>
             <param name="inclusion_stack">Inclusion Stack</param>
             <param name="include_len">Include Length</param>
             <param name="client_data">Client Data</param>
        </member>
        <member name="T:ClangNet.Native.CXCodeCompleteResults">
            <summary>
            Native Clang Code Complete Results
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCodeCompleteResults.Results">
            <summary>
            Clang Completion Result Array Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCodeCompleteResults.NumResults">
            <summary>
            Number of Completion Result Array
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXComment">
            <summary>
            Native Clang Comment
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXComment.ASTNode">
            <summary>
            AST Node Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXComment.TranslationUnit">
            <summary>
            Clang Translation Unit
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXCompletionResult">
            <summary>
            Native Clang Completion Result
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCompletionResult.CursorKind">
            <summary>
            Cursor Kind
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCompletionResult.CompletionString">
            <summary>
            Clang Completion String
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXCursor">
             <summary>
             Native Clang Cursor
             </summary>
             <remarks>
             A cursor representing some element in the abstract syntax tree for
             a translation unit.
             The cursor abstraction unifies the different kinds of entities in a
             program--declaration, statements, expressions, references to declarations,
             etc.--under a single "cursor" abstraction with a common set of operations.
             Common operation for a cursor include: getting the physical location in
             a source file where the cursor points, getting the name associated with a
             cursor, and retrieving cursors for any child nodes of a particular cursor.
            
             Cursors can be produced in two specific ways.
             <c>clang_getTranslationUnitCursor()</c> produces a cursor for a translation unit,
             from which one can use <c>clang_visitChildren()</c> to explore the rest of the
             translation unit. <c>clang_getCursor()</c> maps from a physical source location
             to the entity that resides at that location, allowing one to map from the
             source code into the AST.
             </remarks>
        </member>
        <member name="F:ClangNet.Native.CXCursor.Kind">
            <summary>
            Cursor Kind
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCursor.XData">
            <summary>
            X Data
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCursor.Data1">
            <summary>
            1st Data of void* [3]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCursor.Data2">
            <summary>
            1st Data of void* [3]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCursor.Data3">
            <summary>
            1st Data of void* [3]
            </summary>
        </member>
        <member name="M:ClangNet.Native.CXCursor.#ctor(ClangNet.CursorKind,System.Int32,System.IntPtr[])">
            <summary>
            Constructor
            </summary>
            <param name="kind">Cursor Kind</param>
            <param name="xdata">X Data</param>
            <param name="data">Data Array of void* [3]</param>
        </member>
        <member name="T:ClangNet.Native.CXCursorAndRangeVisitorHandler">
            <summary>
            Native Clang Cursor And Range Visitor Handler
            </summary>
            <param name="context">Context</param>
            <param name="cursor">Clang Cursor</param>
            <param name="range">Clang Source Range</param>
            <returns>Visitor Result</returns>
        </member>
        <member name="T:ClangNet.Native.CXCursorAndRangeVisitor">
            <summary>
            Native Clang Cursor And Range Visitor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCursorAndRangeVisitor.Context">
            <summary>
            Context
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXCursorAndRangeVisitor.Visit">
            <summary>
            Clang Cursor And Range Visitor Handler
            </summary>
        </member>
        <member name="M:ClangNet.Native.CXCursorAndRangeVisitor.#ctor(ClangNet.Native.CXCursorAndRangeVisitorHandler)">
            <summary>
            Constructor
            </summary>
            <param name="visit">Clang Cursor And Range Visitor Delegate</param>
        </member>
        <member name="T:ClangNet.Native.CXFileUniqueID">
            <summary>
            Native Clang File Unique ID
            </summary>
            <remarks>
            Uniquely identifies a CXFile, that refers to the same underlying file,
            across an indexing session.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXFileUniqueID.Data1">
            <summary>
            1st data of unsigned long long [3]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXFileUniqueID.Data2">
            <summary>
            2nd data of unsigned long long [3]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXFileUniqueID.Data3">
            <summary>
            3rd data of unsigned long long [3]
            </summary>
        </member>
        <member name="M:ClangNet.Native.CXFileUniqueID.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="data1">1st data</param>
            <param name="data2">2nd data</param>
            <param name="data3">3rd data</param>
        </member>
        <member name="T:ClangNet.Native.CXIdxAttrInfo">
            <summary>
            Native Clang Index Attribute Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxAttrInfo.Kind">
            <summary>
            Index Attribute Kind
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxAttrInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxAttrInfo.Loc">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxBaseClassInfo">
            <summary>
            Native Clang Index Base Class Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxBaseClassInfo.Base">
            <summary>
            Base Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxBaseClassInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxBaseClassInfo.Loc">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxContainerInfo">
            <summary>
            Native Clang Index Container Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxContainerInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxCXXClassDeclInfo">
            <summary>
            Native Clang Index C++ Class Declaration Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxCXXClassDeclInfo.DeclInfo">
            <summary>
            Clang Index Declaration Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxCXXClassDeclInfo.Bases">
            <summary>
            Clang Index Base Class Info Array Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxCXXClassDeclInfo.NumBases">
            <summary>
            Number of Base Class Info Array
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxDeclInfo">
            <summary>
            Native Clang Index Declaration Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.EntityInfo">
            <summary>
            Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.Loc">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.SemanticContainer">
            <summary>
            Semantic Clang Index Container Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.LexicalContainer">
            <summary>
            Lexical Clang Index Container Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.IsRedeclaration">
            <summary>
            Redeclaration Flag
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.IsDefinition">
            <summary>
            Definition Flag
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.IsContainer">
            <summary>
            Container Flag
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.DeclAsContainer">
            <summary>
            Declaration As Clang Index Container Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.IsImplicit">
            <summary>
            Implicit Flag
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.Attributes">
            <summary>
            Clang Index Attribute Info Array Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.NumAttributes">
            <summary>
            Number of Attribute Info Array
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxDeclInfo.Flags">
            <summary>
            Index Declaration Info Flags
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxEntityInfo">
            <summary>
            Native Clang Index Entity Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.Kind">
            <summary>
            Index Entity Kind
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.CxxTemplateKind">
            <summary>
            Index Entity C++ Template Kind
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.Lang">
            <summary>
            Index Entity Language
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.Name">
            <summary>
            Entity Name
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.USR">
            <summary>
            Entity USR
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.Attributes">
            <summary>
            Clang Index Attribute Info Array Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityInfo.NumAttributes">
            <summary>
            Number of Attribute Info Array
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxEntityRefInfo">
            <summary>
            Native Clang Index Entity Reference Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityRefInfo.Kind">
            <summary>
            Index Entity Reference Kind
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityRefInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityRefInfo.Loc">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityRefInfo.ReferencedEntity">
            <summary>
            Referenced Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityRefInfo.ParentEntity">
            <summary>
            Parent Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityRefInfo.Container">
            <summary>
            Clang Index Container Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxEntityRefInfo.Role">
            <summary>
            Symbol Role
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxIBOutletCollectionAttrInfo">
            <summary>
            Native Clang Index IBOutlet Collection Attribute Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIBOutletCollectionAttrInfo.AttrInfo">
            <summary>
            Clang Index Attriubute Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIBOutletCollectionAttrInfo.ObjcClass">
            <summary>
            Objective-C Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIBOutletCollectionAttrInfo.ClassCursor">
            <summary>
            Class Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIBOutletCollectionAttrInfo.ClassLoc">
            <summary>
            Class Clang Index Location
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxImportedASTFileInfo">
            <summary>
            Native Clang Index Imported AST File Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxImportedASTFileInfo.File">
            <summary>
            Clang File
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxImportedASTFileInfo.Module">
            <summary>
            Clang Module
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxImportedASTFileInfo.Loc">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxImportedASTFileInfo.IsImplicit">
            <summary>
            Implicit Flag
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxIncludedFileInfo">
            <summary>
            Native Clang Index Included File Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIncludedFileInfo.HashLoc">
            <summary>
            Hash Clang Index Location
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIncludedFileInfo.Filename">
            <summary>
            Filename
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIncludedFileInfo.File">
            <summary>
            Clang File
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIncludedFileInfo.IsImport">
            <summary>
            Import Flag
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIncludedFileInfo.IsAngled">
            <summary>
            Angled Flag
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxIncludedFileInfo.IsModuleImport">
            <summary>
            Module Import Flag
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxLoc">
            <summary>
            Native Clang Index Location
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxLoc.PtrData1">
            <summary>
            1st Data of void* [2]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxLoc.PtrData2">
            <summary>
            2nd Data of void* [2]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxLoc.IntData">
            <summary>
            Int Data
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxObjCCategoryDeclInfo">
            <summary>
            Native Clang Index Objective-C Category Declaration Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCCategoryDeclInfo.ContainerInfo">
            <summary>
            Clang Index Objective-C Container Declaration Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCCategoryDeclInfo.ObjCClass">
            <summary>
            Objective-C Class Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCCategoryDeclInfo.ClassCursor">
            <summary>
            Class Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCCategoryDeclInfo.ClassLoc">
            <summary>
            Class Clang Index Location
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCCategoryDeclInfo.Protocols">
            <summary>
            Clang Index Objective-C Protocol Reference List Info Pointer
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxObjCContainerDeclInfo">
            <summary>
            Native Clang Index Objective-C Container Declaration Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCContainerDeclInfo.DeclInfo">
            <summary>
            Clang Index Declaration Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCContainerDeclInfo.Kind">
            <summary>
            Index Objective-C Container Kind
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxObjCInterfaceDeclInfo">
            <summary>
            Native Clang Index Objective-C Interface Declaration Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCInterfaceDeclInfo.ContainerInfo">
            <summary>
            Clang Index Objective-C Container Declaration Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCInterfaceDeclInfo.SuperInfo">
            <summary>
            Super Clang Index Base Class Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCInterfaceDeclInfo.Protocols">
            <summary>
            Clang Index Objective-C Protocol Reference List Info Pointer
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxObjCPropertyDeclInfo">
            <summary>
            Native Clang Index Objective-C Property Declaration Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCPropertyDeclInfo.DeclInfo">
            <summary>
            Clang Index Declaration Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCPropertyDeclInfo.Getter">
            <summary>
            Getter Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCPropertyDeclInfo.Setter">
            <summary>
            Setter Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxObjCProtocolRefInfo">
            <summary>
            Native Clang Index Objective-C Protocol Reference Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCProtocolRefInfo.Protocol">
            <summary>
            Protocol Clang Index Entity Info Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCProtocolRefInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCProtocolRefInfo.Loc">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXIdxObjCProtocolRefListInfo">
            <summary>
            Clang Index Objective-C Protocol Reference List Info
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCProtocolRefListInfo.Protocols">
            <summary>
            Clang Index Objective-C Protocol Reference Info Array Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXIdxObjCProtocolRefListInfo.NumProtocols">
            <summary>
            Number of Protocol Reference Info Array
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXPlatformAvailability">
            <summary>
            Native Clang Platform Availability
            </summary>
            <remarks>
            Describes the availability of a given entity on a particular platform,
            e.g., a particular class might only be available on Mac OS 10.7 or newer.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXPlatformAvailability.Platform">
             <summary>
             Platform Clang String
             </summary>
             <remarks>
             A string that describes the platform for which this structure
             provides availability information.
            
             Possible values are "ios" or "macos".
             </remarks>
        </member>
        <member name="F:ClangNet.Native.CXPlatformAvailability.Introduced">
            <summary>
            Introduced Clang Version
            </summary>
            <remarks>
            The version number in which this entity was introduced.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXPlatformAvailability.Deprecated">
            <summary>
            Deprecated Clang Version
            </summary>
            <remarks>
            The version number in which this entity was deprecated (but is still available).
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXPlatformAvailability.Obsoleted">
            <summary>
            Obsoleted Clang Version
            </summary>
            <remarks>
            The version number in which this entity was obsoleted, and therefore
            is no longer available.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXPlatformAvailability.Unavailable">
            <summary>
            Unavailable Flag
            </summary>
            <remarks>
            Whether the entity is unconditionally unavailable on this platform.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXPlatformAvailability.Message">
            <summary>
            Optional Message Clang String
            </summary>
            <remarks>
            An optional message to provide to a user of this API,
            e.g., to suggest replacement APIs.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.CXSourceLocation">
             <summary>
             Native Clang Source Location
             </summary>
             <remarks>
             Identifies a specific source location within a translation unit.
            
             Use <c>clang_getExpansionLocation()</c> or <c>clang_getSpellingLocation()</c>
             to map a source location to a particular file, line, and column.
             </remarks>
        </member>
        <member name="F:ClangNet.Native.CXSourceLocation.PtrData1">
            <summary>
            1st Data of void* [2]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXSourceLocation.PtrData2">
            <summary>
            2nd Data of void* [2]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXSourceLocation.IntData">
            <summary>
            Int Data
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXSourceRange">
             <summary>
             Native Clang Source Range
             </summary>
             <remarks>
             Identifies a half-open character range in the source code.
            
             Use <c>clang_getRangeStart()</c> and <c>clang_getRangeEnd()</c>
             to retrieve the starting and end locations from a source range, respectively.
             </remarks>
        </member>
        <member name="F:ClangNet.Native.CXSourceRange.PtrData1">
            <summary>
            1st Data of void* [2]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXSourceRange.PtrData2">
            <summary>
            2nd Data of void* [2]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXSourceRange.BeginIntData">
            <summary>
            Begin Int Data
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXSourceRange.EndIntData">
            <summary>
            End Int Data
            </summary>
        </member>
        <member name="M:ClangNet.Native.CXSourceRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="begin">Begin Int Data</param>
            <param name="end">End Int Data</param>
        </member>
        <member name="T:ClangNet.Native.CXSourceRangeList">
            <summary>
            Native Clang Source Range List
            </summary>
            <remarks>
            Identifies an array of ranges.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXSourceRangeList.Count">
            <summary>
            Source Range Count
            </summary>
            <remarks>
            The number of ranges in the <c>Ranges</c> array.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXSourceRangeList.Ranges">
            <summary>
            Clang Source Range Array Pointer
            </summary>
            <remarks>
            An array of <c>CXSourceRange</c>
            </remarks>
        </member>
        <member name="T:ClangNet.Native.CXString">
             <summary>
             Native Clang String
             </summary>
             <remarks>
             A character string.
            
             The <c>CXString</c> type is used to return strings from the interface when
             the ownership of that string might differ from one call to the next.
             Use <c>clang_getCString()</c> to retrieve the string data and, once finished
             with the string data, call <c>clang_disposeString()</c> to free the string.
             </remarks>
        </member>
        <member name="F:ClangNet.Native.CXString.Data">
            <summary>
            Data of void*
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXString.PrivateFlags">
            <summary>
            Private Flags
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXStringSet">
            <summary>
            Native Clang String Set
            </summary>
            <remarks>
            <c>CXString</c> collection.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXStringSet.Strings">
            <summary>
            Clang String Array Pointer
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXStringSet.Count">
            <summary>
            String Count
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXToken">
            <summary>
            Native Clang Token
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXToken.int_data1">
            <summary>
            1st Data of unsigned [4]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXToken.int_data2">
            <summary>
            2nd Data of unsigned [4]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXToken.int_data3">
            <summary>
            3rd Data of unsigned [4]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXToken.int_data4">
            <summary>
            4th Data of unsigned [4]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXToken.ptr_data">
            <summary>
            Pointer Data
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXTUResourceUsage">
            <summary>
            Native Clang Translation Unit Resource Usage
            </summary>
            <remarks>
            The memory usage of a CXTranslationUnit, broken into categories.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXTUResourceUsage.Data">
            <summary>
            Pointer Data
            </summary>
            <remarks>
            Private data member, used for queries.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXTUResourceUsage.NumEntries">
            <summary>
            Number of Resource Usage Entriy Array
            </summary>
            <remarks>
            The number of entries in the 'entries' array.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXTUResourceUsage.Entries">
            <summary>
            Clang Translation Unit Resource Usage Entry Array Pointer
            </summary>
            <remarks>
            An array of key-value pairs, representing the breakdown of memory usage.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.CXTUResourceUsageEntry">
            <summary>
            Native Clang Translation Unit Resource Usage Entry
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXTUResourceUsageEntry.Kind">
            <summary>
            Resource Usage Kind
            </summary>
            <remarks>
            The memory usage category.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXTUResourceUsageEntry.Amount">
             <summary>
             Amount
             </summary>
             <remarks>
             Amount of resources used.
            
             The units will depend on the resource kind.
             </remarks>
        </member>
        <member name="T:ClangNet.Native.CXType">
            <summary>
            Native Clang Type
            </summary>
            <remarks>
            The type of an element in the abstract syntax tree.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXType.Kind">
            <summary>
            Type Kind
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXType.Data1">
            <summary>
            1st Data of void* [2]
            </summary>
        </member>
        <member name="F:ClangNet.Native.CXType.Data2">
            <summary>
            2nd Data of void* [2]
            </summary>
        </member>
        <member name="T:ClangNet.Native.CXUnsavedFile">
            <summary>
            Native Clang Unsaved File
            </summary>
            <remarks>
            Provides the contents of a file that has not yet been saved to disk.
            
            Each <c>CXUnsavedFile</c> instance provides the name of a file on the
            system along with the current contents of that file that have not
            yet been saved to disk.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXUnsavedFile.FileName">
            <summary>
            Filename
            </summary>
            <remarks>
            The file whose contents have not yet been saved.
            This file must already exist in the file system.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXUnsavedFile.Contents">
            <summary>
            Contents
            </summary>
            <remarks>
            A buffer containing the unsaved contents of this file.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXUnsavedFile.Length">
            <summary>
            Contents Length
            </summary>
            <remarks>
            The length of the unsaved contents of this buffer.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.CXUnsavedFile.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">The file whose contents have not yet been saved.</param>
            <param name="contents">A buffer containing the unsaved contents of this file.</param>
        </member>
        <member name="T:ClangNet.Native.CXVersion">
            <summary>
            Native Clang Version
            </summary>
            <remarks>
            Describes a version number of the form major.minor.subminor.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXVersion.Major">
            <summary>
            Major Version Number
            </summary>
            <remarks>
            The major version number, e.g., the '10' in '10.7.3'.
            A negative value indicates that there is no version number at all.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXVersion.Minor">
            <summary>
            Minor Version Number
            </summary>
            <remarks>
            The minor version number, e.g., the '7' in '10.7.3'.
            This value will be negative if no minor version number was provided,
            e.g., for version '10'.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.CXVersion.SubMinor">
            <summary>
            Subminor Version Number
            </summary>
            <remarks>
            The subminor version number, e.g., the '3' in '10.7.3'.
            This value will be negative if no minor or subminor version number was provided,
            e.g., in version '10' or '10.7'.
            </remarks>
        </member>
        <member name="M:ClangNet.Native.CXVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="major">The major version number</param>
            <param name="minor">The minor version number</param>
            <param name="subminor">The subminor version number</param>
        </member>
        <member name="T:ClangNet.Native.AbortQueryHandler">
            <summary>
            Native Clang Abort Query Handler
            </summary>
            <param name="client_data">Client Data</param>
            <param name="reserved">Reserved</param>
            <returns>0 to continue, and non-zero to abort.</returns>
            <remarks>
            Called periodically to check whether indexing should be aborted.
            Should return 0 to continue, and non-zero to abort.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.DiagnosticHandler">
            <summary>
            Native Clang Diagnostic Handler
            </summary>
            <param name="client_data">Client Data</param>
            <param name="diagnostic_set">Diagnostic Set</param>
            <param name="reserved">Reserved</param>
            <remarks>
            Called at the end of indexing; passes the complete diagnostic set.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.EnteredMainFileHandler">
            <summary>
            Native Clang Entered Main File Handler
            </summary>
            <param name="client_data">Client Data</param>
            <param name="main_file">Main File</param>
            <param name="reserved">Reserved</param>
            <returns>Index Client File</returns>
            <remarks>
            Called to Entered Main File
            </remarks>
        </member>
        <member name="T:ClangNet.Native.PpIncludedFileHandler">
            <summary>
            Native Clang Preprocess Included File Handler
            </summary>
            <param name="client_data">Client Data</param>
            <param name="index_include_file_info">Index Included File Info</param>
            <returns>Index Client File</returns>
            <remarks>
            Called when a file gets #included/#imported.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.ImportedASTFileHandler">
             <summary>
             Native Clang Imported AST File Handler
             </summary>
             <param name="client_data">Client Data</param>
             <param name="index_imported_ast_file_info">Index Imported AST File Info</param>
             <returns>Index Client AST File</returns>
             <remarks>
             Called when a AST file (PCH or module) gets imported.
            
             AST files will not get indexed(there will not be callbacks to index all
             the entities in an AST file). The recommended action is that, if the AST
             file is not already indexed, to initiate a new indexing job specific to
             the AST file.
             </remarks>
        </member>
        <member name="T:ClangNet.Native.StartedTranslationUnitHandler">
            <summary>
            Native Clang Started Translation Unit Handler
            </summary>
            <param name="client_data">Client Data</param>
            <param name="reserved">Reserved</param>
            <returns>Index Client Container</returns>
            <remarks>
            Called at the beginning of indexing a translation unit.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.IndexDeclarationHandler">
            <summary>
            Native Clang Index Declaration Handler
            </summary>
            <param name="client_data">Client Data</param>
            <param name="index_decl_info">Index Declaration Info</param>
            <remarks>
            Called to Index a Declaration
            </remarks>
        </member>
        <member name="T:ClangNet.Native.IndexEntityReferenceHandler">
            <summary>
            Native Clang Index Entity Reference Handler
            </summary>
            <param name="client_data">Client Data</param>
            <param name="index_entity_ref_info">Index Entity Reference Info</param>
            <remarks>
            Called to index a reference of an entity.
            </remarks>
        </member>
        <member name="T:ClangNet.Native.IndexerCallbacks">
            <summary>
            Native Clang Indexer Callbacks
            </summary>
            <remarks>
            A group of callbacks used by <c>clang_indexSourceFile()</c> and
            <c>clang_indexTranslationUnit()</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.AbortQuery">
            <summary>
            Clang Abort Query Handler
            </summary>
            <remarks>
            Called periodically to check whether indexing should be aborted.
            Should return 0 to continue, and non-zero to abort.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.Diagnostic">
            <summary>
            Clang Diagnostic Handler
            </summary>
            <remarks>
            Called at the end of indexing; passes the complete diagnostic set.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.EnteredMainFile">
            <summary>
            Clang Entered Main File Handler
            </summary>
            <remarks>
            Called to Entered Main File
            </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.PpIncludedFile">
            <summary>
            Clang Preprocess Included File Handler
            </summary>
            <remarks>
            Called when a file gets #included/#imported.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.ImportedASTFile">
             <summary>
             Clang Imported AST File Handler
             </summary>
             <remarks>
             Called when a AST file (PCH or module) gets imported.
            
             AST files will not get indexed(there will not be callbacks to index all
             the entities in an AST file). The recommended action is that, if the AST
             file is not already indexed, to initiate a new indexing job specific to
             the AST file.
             </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.StartedTranslationUnit">
            <summary>
            Clang Started Translation Unit Handler
            </summary>
            <remarks>
            Called at the beginning of indexing a translation unit.
            </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.IndexDeclaration">
            <summary>
            Clang Index Declaration Handler
            </summary>
            <remarks>
            Called to Index a Declaration
            </remarks>
        </member>
        <member name="F:ClangNet.Native.IndexerCallbacks.IndexEntityReference">
            <summary>
            Clang Index Entity Referene Handler
            </summary>
            <remarks>
            Called to index a reference of an entity.
            </remarks>
        </member>
        <member name="T:ClangNet.CursorExceptionSpecificationKind">
            <summary>
            Cursor Exception Specification Kind
            </summary>
            <remarks>
            Describes the exception specification of a cursor.
            A negative value indicates that the cursor is not a function declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.None">
            <summary>
            None
            </summary>
            <remarks>
            The cursor has no exception specification.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.DynamicNone">
            <summary>
            Dynamic None
            </summary>
            <remarks>
            The cursor has exception specification throw()
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.Dynamic">
            <summary>
            Dynamic
            </summary>
            <remarks>
            The cursor has exception specification throw(T1, T2)
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.MSAny">
            <summary>
            MS Any
            </summary>
            <remarks>
            The cursor has exception specification throw(...).
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.BasicNoexcept">
            <summary>
            Basic Noexcept
            </summary>
            <remarks>
            The cursor has exception specification basic noexcept.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.ComputedNoexcept">
            <summary>
            Computed Noexcet
            </summary>
            <remarks>
            The cursor has exception specification computed noexcept.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.Unevaluated">
            <summary>
            Unevaluated
            </summary>
            <remarks>
            The exception specification has not yet been evaluated.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.Unparsed">
            <summary>
            Unparsed
            </summary>
            <remarks>
            The exception specification has not been parsed yet.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorExceptionSpecificationKind.NoThrow">
            <summary>
            No Throw
            </summary>
            <remarks>
            The cursor has a __declspec(nothrow) exception specification.
            </remarks>
        </member>
        <member name="T:ClangNet.CursorKind">
            <summary>
            Cursor Kind
            </summary>
            <remarks>
            Describes the kind of entity that a cursor refers to.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.UnexposedDeclaration">
             <summary>
             Unexposed Declaration
             </summary>
             <remarks>
             A declaration whose specific kind is not exposed via this
             interface.
            
             Unexposed declarations have the same operations as any other kind
             of declaration; one can extract their location information,
             spelling, find their definitions, etc. However, the specific kind
             of the declaration is not reported.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.StructDeclaration">
            <summary>
            Struct Declaration
            </summary>
            <remarks>
            A C or C++ struct.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.UnionDeclaration">
            <summary>
            Union Declaration
            </summary>
            <remarks>
            A C or C++ union.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ClassDeclaration">
            <summary>
            Class Declaration
            </summary>
            <remarks>
            A C++ class.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.EnumDeclaration">
            <summary>
            Enum Declaration
            </summary>
            <remarks>
            An enumeration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FieldDeclaration">
            <summary>
            Field Declaration
            </summary>
            <remarks>
            A field (in C) or non-static data member (in C++) in a
            struct, union, or C++ class.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.EnumConstantDeclaration">
            <summary>
            Enum Constant Declaration
            </summary>
            <remarks>
            An enumerator constant.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FunctionDeclaration">
            <summary>
            Function Declaration
            </summary>
            <remarks>
            A function.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.VarDeclaration">
            <summary>
            Variable Declaration
            </summary>
            <remarks>
            A variable.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ParmDeclaration">
            <summary>
            Parameter Declaration
            </summary>
            <remarks>
            A function or method parameter.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCInterfaceDeclaration">
            <summary>
            Objective-C Interface Declaration
            </summary>
            <remarks>
            An Objective-C @interface.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCCategoryDeclaration">
            <summary>
            Objective-C Category Declaration
            </summary>
            <remarks>
            An Objective-C @interface for a category.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCProtocolDeclaration">
            <summary>
            Objective-C Protocol Declaration
            </summary>
            <remarks>
            An Objective-C @protocol declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCPropertyDeclaration">
            <summary>
            Objective-C Property Declaration
            </summary>
            <remarks>
            An Objective-C @property declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCIvarDeclaration">
            <summary>
            Objective-C Instance Variable Declaration
            </summary>
            <remarks>
            An Objective-C instance variable.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCInstanceMethodDeclaration">
            <summary>
            Objective-C Instance Method Declaration
            </summary>
            <remarks>
            An Objective-C instance method.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCClassMethodDeclaration">
            <summary>
            Objective-C Class Method
            </summary>
            <remarks>
            An Objective-C class method.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCImplementationDeclaration">
            <summary>
            Objective-C Implementation Declaration
            </summary>
            <remarks>
            An Objective-C @implementation.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCCategoryImplDeclaration">
            <summary>
            Objective-C Category Implementation Declaration
            </summary>
            <remarks>
            An Objective-C @implementation for a category.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.TypedefDeclaration">
            <summary>
            Typedef Declaration
            </summary>
            <remarks>
            A typedef.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXMethod">
            <summary>
            C++ Method
            </summary>
            <remarks>
            A C++ class method.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.Namespace">
            <summary>
            Namespace
            </summary>
            <remarks>
            A C++ namespace.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.LinkageSpec">
            <summary>
            Linkage Specification
            </summary>
            <remarks>
            A linkage specification, e.g. 'extern "C"'.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.Constructor">
            <summary>
            Constructor
            </summary>
            <remarks>
            A C++ constructor.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.Destructor">
            <summary>
            Destructor
            </summary>
            <remarks>
            A C++ destructor.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ConversionFunction">
            <summary>
            Conversion Function
            </summary>
            <remarks>
            A C++ conversion function.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.TemplateTypeParameter">
            <summary>
            Template Type Parameter
            </summary>
            <remarks>
            A C++ template type parameter.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.NonTypeTemplateParameter">
            <summary>
            Non-Type Template Parameter
            </summary>
            <remarks>
            A C++ non-type template parameter.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.TemplateTemplateParameter">
            <summary>
            Template Template Parameter
            </summary>
            <remarks>
            A C++ template template parameter.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FunctionTemplate">
            <summary>
            Function Template
            </summary>
            <remarks>
            A C++ function template.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ClassTemplate">
            <summary>
            Class Template
            </summary>
            <remarks>
            A C++ class template.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ClassTemplatePartialSpecialization">
            <summary>
            Class Template Partial Specialization
            </summary>
            <remarks>
            A C++ class template partial specialization.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.NamespaceAlias">
            <summary>
            Namespace Alias
            </summary>
            <remarks>
            A C++ namespace alias declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.UsingDirective">
            <summary>
            Using Directive
            </summary>
            <remarks>
            A C++ using directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.UsingDeclaration">
            <summary>
            Using Declaration
            </summary>
            <remarks>
            A C++ using declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.TypeAliasDeclaration">
            <summary>
            Type Alias Declaration
            </summary>
            <remarks>
            A C++ alias declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCSynthesizeDeclaration">
            <summary>
            Objective-C Synthesize Declaration
            </summary>
            <remarks>
            An Objective-C @synthesize definition.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCDynamicDeclaration">
            <summary>
            Objective-C Dynamic Declaration
            </summary>
            <remarks>
            An Objective-C @dynamic definition.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXAccessSpecifier">
            <summary>
            C++ Access Specifier
            </summary>
            <remarks>
            An access specifier.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FirstDeclaration">
            <summary>
            First Declaration
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.LastDeclaration">
            <summary>
            Last Declaration
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.FirstReference">
            <summary>
            First Reference
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCSuperClassReference">
            <summary>
            Objective-C Super Class Reference
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCProtocolReference">
            <summary>
            Objective-C Protocol Reference
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCClassReference">
            <summary>
            Objective-C Class Reference
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.TypeReference">
             <summary>
             Type Reference
             </summary>
             <remarks>
             A reference to a type declaration.
            
             A type reference occurs anywhere where a type is named but not
             declared. For example, given:
             <code>
             typedef unsigned size_type;
             size_type size;
             </code>
             The typedef is a declaration of size_type (TypedefDecl),
             while the type of the variable "size" is referenced. The cursor
             referenced by the type of size is the typedef for size_type.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXBaseSpecifier">
            <summary>
            C++ Base Specifier
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.TemplateReference">
            <summary>
            Template Reference
            </summary>
            <remarks>
            A reference to a class template, function template, template
            template parameter, or class template partial specialization.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.NamespaceReference">
            <summary>
            Namespace Reference
            </summary>
            <remarks>
            A reference to a namespace or namespace alias.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.MemberReference">
            <summary>
            Member Reference
            </summary>
            <remarks>
            A reference to a member of a struct, union, or class that occurs in
            some non-expression context, e.g., a designated initializer.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.LabelReference">
             <summary>
             Label Reference
             </summary>
             <remarks>
             A reference to a labeled statement.
            
             This cursor kind is used to describe the jump to "start_over" in the
             goto statement in the following example:
             <code>
             start_over:
                 ++counter;
            
                 goto start_over;
             </code>
             A label reference cursor refers to a label statement.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OverloadedDeclarationReference">
             <summary>
             Overloaded Declaration Reference
             </summary>
             <remarks>
             A reference to a set of overloaded functions or function templates
             that has not yet been resolved to a specific function or function template.
            
             An overloaded declaration reference cursor occurs in C++ templates where
             a dependent name refers to a function. For example:
            
             <code>
             template&lt;typename T&gt; void swap(T&amp;, T&amp;);
            
             struct X { ... };
             void swap(X&amp;, X&amp;);
            
             template&lt;typename T&gt;
             void reverse(T* first, T* last) {
               while (first &lt; last - 1) {
                 swap(*first, *--last);
                 ++first;
               }
             }
            
             struct Y { };
             void swap(Y&amp;, Y&amp;);
             </code>
            
             Here, the identifier "swap" is associated with an overloaded declaration
             reference. In the template definition, "swap" refers to either of the two
             "swap" functions declared above, so both results will be available. At
             instantiation time, "swap" may also refer to other functions found via
             argument-dependent lookup (e.g., the "swap" function at the end of the
             example).
            
             The functions <c>clang_getNumOverloadedDecls()</c> and
             <c>clang_getOverloadedDecl()</c> can be used to retrieve the definitions
             referenced by this cursor.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.VariableReference">
            <summary>
            Variable Reference
            </summary>
            <remarks>
            A reference to a variable that occurs in some non-expression
            context, e.g., a C++ lambda capture list.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.LastReference">
            <summary>
            Last Reference
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.FirstInvalid">
            <summary>
            First Invalid
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.InvalidFile">
            <summary>
            Invalid File
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NoDeclarationFound">
            <summary>
            No Declaration Found
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NotImplemented">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.InvalidCode">
            <summary>
            Invalid Code
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.LastInvalid">
            <summary>
            Last Invalid
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.FirstExpression">
            <summary>
            First Expression
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.UnexposedExpression">
             <summary>
             Unexposed Expression
             </summary>
             <remarks>
             An expression whose specific kind is not exposed via this
             interface.
            
             Unexposed expressions have the same operations as any other kind
             of expression; one can extract their location information,
             spelling, children, etc. However, the specific kind of the
             expression is not reported.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.DeclarationReferenceExpression">
            <summary>
            Declaration Reference Expression
            </summary>
            <remarks>
            An expression that refers to some value declaration, such
            as a function, varible, or enumerator.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.MemberReferenceExpression">
            <summary>
            Member Reference Expression
            </summary>
            <remarks>
            An expression that refers to a member of a struct, union,
            class, Objective-C class, etc.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CallExpression">
            <summary>
            Call Expression
            </summary>
            <remarks>
            An expression that calls a function.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCMessageExpression">
            <summary>
            Objective-C Message Expression
            </summary>
            <remarks>
            An expression that sends a message to an Objective-C
            object or class.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.BlockExpression">
            <summary>
            Block Expression
            </summary>
            <remarks>
            An expression that represents a block literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.IntegerLiteral">
            <summary>
            Integral Literal
            </summary>
            <remarks>
            An integer literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FloatingLiteral">
            <summary>
            Floating Literal
            </summary>
            <remarks>
            A floating point number literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ImaginaryLiteral">
            <summary>
            Imaginary Literal
            </summary>
            <remarks>
            An imaginary number literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.StringLiteral">
            <summary>
            String Literal
            </summary>
            <remarks>
            A string literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CharacterLiteral">
            <summary>
            Character Literal
            </summary>
            <remarks>
            A character literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ParenExpression">
             <summary>
             Parenthesized Expression
             </summary>
             <remarks>
             A parenthesized expression, e.g. "(1)".
            
             This AST node is only formed if full location information is requested.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.UnaryOperator">
            <summary>
            Unary Operator Expression
            </summary>
            <remarks>
            This represents the unary-expression's (except sizeof and
            alignof).
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ArraySubscriptExpression">
            <summary>
            Array Subscripting Expression
            </summary>
            <remarks>
            [C99 6.5.2.1] Array Subscripting.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.BinaryOperator">
            <summary>
            Binary Operator Expression
            </summary>
            <remarks>
            A builtin binary operation expression such as "x + y" or
            "x &lt;= y".
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CompoundAssignOperator">
            <summary>
            Compound Assign Operator
            </summary>
            <remarks>
            Compound assignment such as "+=".
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ConditionalOperator">
            <summary>
            Conditional Operator
            </summary>
            <remarks>
            The ?: ternary operator.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CStyleCastExpression">
             <summary>
             C Style Cast Expression
             </summary>
             <remarks>
             An explicit cast in C (C99 6.5.4) or a C-style cast in C++
             (C++ [expr.cast]), which uses the syntax (Type)expr.
            
             For example: (int)f.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CompoundLiteralExpression">
            <summary>
            Compound Literal Expression
            </summary>
            <remarks>
            [C99 6.5.2.5]
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.InitListExpression">
            <summary>
            Initializer List Expression
            </summary>
            <remarks>
             Describes an C or C++ initializer list.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.AddrLabelExpression">
            <summary>
            Address Label Expression
            </summary>
            <remarks>
            The GNU address of label extension, representing &amp;&amp;label.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.StatementExpression">
            <summary>
            Statement Expression
            </summary>
            <remarks>
            This is the GNU Statement Expression extension: ({int X=4; X;})
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.GenericSelectionExpression">
            <summary>
            Generic Selection Expression
            </summary>
            <remarks>
            Represents a C11 generic selection.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.GNUNullExpression">
             <summary>
             GNU Null Expression
             </summary>
             <remarks>
             Implements the GNU __null extension, which is a name for a null
             pointer constant that has integral type (e.g., int or long) and is the same
             size and alignment as a pointer.
            
             The __null extension is typically only used by system headers, which define
             NULL as __null in C++ rather than using 0 (which is an integer that may not
             match the size of a pointer).
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXStaticCastExpression">
            <summary>
            C++ Static Cast Expression
            </summary>
            <remarks>
            C++'s static_cast&lt;&gt; expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXDynamicCastExpression">
            <summary>
            C++ Dynamic Cast Expression
            </summary>
            <remarks>
            C++'s dynamic_cast&lt;&gt; expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXReinterpretCastExpression">
            <summary>
            C++ Reinterpret Cast Expression
            </summary>
            <remarks>
            C++'s reinterpret_cast&lt;&gt; expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXConstCastExpression">
            <summary>
            C++ Const Cast Expression
            </summary>
            <remarks>
            C++'s const_cast&lt;&gt; expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXFunctionalCastExpression">
             <summary>
             C++ Functional Cast Expression
             </summary>
             <remarks>
             Represents an explicit C++ type conversion that uses "functional"
             notion (C++ [expr.type.conv]).
            
             Example:
             <code>
               x = int(0.5);
             </code>
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXTypeidExpression">
            <summary>
            C++ Type ID Expression
            </summary>
            <remarks>
            A C++ typeid expression (C++ [expr.typeid]).
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXBoolLiteralExpression">
            <summary>
            C++ Bool Literal Expression
            </summary>
            <remarks>
            [C++ 2.13.5] C++ Boolean Literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXNullPtrLiteralExpression">
            <summary>
            C++ Null Pointer Literal Expression
            </summary>
            <remarks>
            [C++0x 2.14.7] C++ Pointer Literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXThisExpression">
            <summary>
            C++ This Expression
            </summary>
            <remarks>
            Represents the "this" expression in C++
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXThrowExpression">
             <summary>
             C++ Throw Expression
             </summary>
             <remarks>
             [C++ 15] C++ Throw Expression.
            
             This handles 'throw' and 'throw' assignment-expression. When
             assignment-expression isn't present, Op will be null.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXNewExpression">
            <summary>
            C++ New Expression
            </summary>
            <remarks>
            A new expression for memory allocation and constructor calls, e.g:
            "new CXXNewExpr(foo)".
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXDeleteExpression">
            <summary>
            C++ Delete Expression
            </summary>
            <remarks>
            A delete expression for memory deallocation and destructor calls,
            e.g. "delete[] pArray".
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.UnaryExpression">
            <summary>
            Unary Expression
            </summary>
            <remarks>
            A unary expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCStringLiteral">
            <summary>
            Objective-C String Literal
            </summary>
            <remarks>
            An Objective-C string literal i.e. @"foo".
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCEncodeExpression">
            <summary>
            Objective-C Encode Expression
            </summary>
            <remarks>
            An Objective-C @encode expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCSelectorExpression">
            <summary>
            Objective-C Selector Expression
            </summary>
            <remarks>
            An Objective-C @selector expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCProtocolExpression">
            <summary>
            Objective-C Protocol Expression
            </summary>
            <remarks>
            An Objective-C @protocol expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCBridgedCastExpression">
             <summary>
             Objective-C Bridged Cast Expression
             </summary>
             <remarks>
             An Objective-C "bridged" cast expression, which casts between
             Objective-C pointers and C pointers, transferring ownership in the process.
            
             <code>
               NSString *str = (__bridge_transfer NSString *)CFCreateString();
             </code>
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.PackExpansionExpression">
             <summary>
             Pack Expansiont Expression
             </summary>
             <remarks>
             Represents a C++0x pack expansion that produces a sequence of
             expressions.
            
             A pack expansion expression contains a pattern (which itself is an
             expression) followed by an ellipsis. For example:
            
             <code>
             template&lt;typename F, typename ...Types&gt;
             void forward(F f, Types &amp;&amp;...args) {
              f(static_cast&lt;Types&amp;&amp;&gt;(args)...);
             }
             </code>
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.SizeOfPackExpression">
             <summary>
             Size Of Pack Expression
             </summary>
             <remarks>
             Represents an expression that computes the length of a parameter pack.
            
             <code>
             template&lt;typename ...Types&gt;
             struct count {
               static const unsigned value = sizeof...(Types);
             };
             </code>
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.LambdaExpression">
             <summary>
             Lambda Expression
             </summary>
             <remarks>
             Represents a C++ lambda expression that produces a local function
             object.
            
             <code>
             void abssort(float *x, unsigned N) {
               std::sort(x, x + N,
                         [](float a, float b) {
                           return std::abs(a) &lt; std::abs(b);
                         });
             }
             </code>
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCBoolLiteralExpression">
            <summary>
            Objective-C Boolean Literal
            </summary>
            <remarks>
            Objective-c Boolean Literal.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCSelfExpression">
            <summary>
            Objective-C Self Expression
            </summary>
            <remarks>
            Represents the "self" expression in a ObjC method.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPArraySectionExpression">
            <summary>
            OpenMP Array Selection Expression
            </summary>
            <remarks>
            OpenMP 4.0 [2.4, Array Section].
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCAvailabilityCheckExpression">
            <summary>
            Objective-C Availability Check Expression
            </summary>
            <remarks>
            Represents an @available(...) check.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FixedPointLiteral">
            <summary>
            Fixed Point Literal
            </summary>
            <remarks>
            Fixed point literal
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.LastExpression">
            <summary>
            Last Expression
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.FirstStatement">
            <summary>
            First Statement
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.UnexposedStatement">
             <summary>
             Unexposed Statement
             </summary>
             <remarks>
             A statement whose specific kind is not exposed via this
             interface.
            
             Unexposed statements have the same operations as any other kind of
             statement; one can extract their location information, spelling,
             children, etc. However, the specific kind of the statement is not
             reported.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.LabelStatement">
             <summary>
             Label Statement
             </summary>
             <remarks>
             A labelled statement in a function.
            
             This cursor kind is used to describe the "start_over:" label statement in
             the following example:
            
             <code>
               start_over:
                 ++counter;
             </code>
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CompoundStatement">
             <summary>
             Compound Statement
             </summary>
             <remarks>
             A group of statements like { stmt stmt }.
            
             This cursor kind is used to describe compound statements,
             e.g. function bodies.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CaseStatement">
            <summary>
            Case Statement
            </summary>
            <remarks>
            A case statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.DefaultStatement">
            <summary>
            Default Statement
            </summary>
            <remarks>
            A default statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.IfStatement">
            <summary>
            If Statement
            </summary>
            <remarks>
            An if statement
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.SwitchStatement">
            <summary>
            Switch Statement
            </summary>
            <remarks>
            A switch statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.WhileStatement">
            <summary>
            While Statement
            </summary>
            <remarks>
            A while statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.DoStatement">
            <summary>
            Do Statement
            </summary>
            <remarks>
            A do statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ForStatement">
            <summary>
            For Statement
            </summary>
            <remarks>
            A for statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.GotoStatement">
            <summary>
            Goto Statement
            </summary>
            <remarks>
            A goto statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.IndirectGotoStatement">
            <summary>
            Indirect Goto Statement
            </summary>
            <remarks>
            An indirect goto statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ContinueStatement">
            <summary>
            Continue Statement
            </summary>
            <remarks>
            A continue statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.BreakStatement">
            <summary>
            Break Statement
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ReturnStatement">
            <summary>
            Return Statement
            </summary>
            <remarks>
            A return statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.GCCAsmStatement">
            <summary>
            GCC Inline Assembly Statement
            </summary>
            <remarks>
            A GCC inline assembly statement extension.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.AsmStatement">
            <summary>
            Assembly Statement
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCAtTryStatement">
            <summary>
            Objective-C Try Statement
            </summary>
            <remarks>
            Objective-C's overall @try-@catch-@finally statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCAtCatchStatement">
            <summary>
            Objective-C Catch Statement
            </summary>
            <remarks>
            Objective-C's @catch statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCAtFinallyStatement">
            <summary>
            Objective-C Finally Statement
            </summary>
            <remarks>
            Objective-C's @finally statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCAtThrowStatement">
            <summary>
            Objective-C Throw Statement
            </summary>
            <remarks>
            Objective-C's @throw statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCAtSynchronizedStatement">
            <summary>
            Objective-C Synchronized Statement
            </summary>
            <remarks>
            Objective-C's @synchronized statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCAutoreleasePoolStatement">
            <summary>
            Objective-C Auto Release Pool Statement
            </summary>
            <remarks>
            Objective-C's autorelease pool statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCForCollectionStatement">
            <summary>
            Objective-C For Collection Statement
            </summary>
            <remarks>
            Objective-C's collection statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXCatchStatement">
            <summary>
            C++ Catch Statemtn
            </summary>
            <remarks>
            C++'s catch statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXTryStatement">
            <summary>
            C++ Try Statement
            </summary>
            <remarks>
            C++'s try statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.CXXForRangeStatement">
            <summary>
            C++ For Range Statement
            </summary>
            <remarks>
            C++'s for (* : *) statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.SEHTryStatement">
            <summary>
            SEH(Structured Exception Hnadling) Try Statement
            </summary>
            <remarks>
            Windows Structured Exception Handling's try statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.SEHExceptStatement">
            <summary>
            SEH(Structured Exception Hnadling) Except Statement
            </summary>
            <remarks>
            Windows Structured Exception Handling's except statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.SEHFinallyStatement">
             <summary>
            SEH(Structured Exception Hnadling) Finally Statement
             </summary>
             <remarks>
             Windows Structured Exception Handling's finally statement.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.MSAsmStatement">
            <summary>
            MS inline Assembly Statement
            </summary>
            <remarks>
            A MS inline assembly statement extension.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.NullStatement">
             <summary>
             Null Statemant
             </summary>
             <remarks>
             The null satement ";": C99 6.8.3p3.
            
             This cursor kind is used to describe the null statement.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.DeclarationStatement">
            <summary>
            Declaration Statement
            </summary>
            <remarks>
            Adaptor class for mixing declarations with statements and expressions.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPParallelDirective">
            <summary>
            OpenMP Parallel Directive
            </summary>
            <remarks>
            OpenMP parallel directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPSimdDirective">
            <summary>
            OpenMP SIMD Directive
            </summary>
            <remarks>
            OpenMP SIMD directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPForDirective">
            <summary>
            OpenMP For Directive
            </summary>
            <remarks>
            OpenMP for directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPSectionsDirective">
            <summary>
            OpenMP Sections Directive
            </summary>
            <remarks>
            OpenMP sections directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPSectionDirective">
            <summary>
            OpenMP Section Directive
            </summary>
            <remarks>
            OpenMP section directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPSingleDirective">
            <summary>
            OpenMP Single Directive
            </summary>
            <remarks>
            OpenMP single directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPParallelForDirective">
            <summary>
            OpenMP Parallel For Directive
            </summary>
            <remarks>
            OpenMP parallel for directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPParallelSectionsDirective">
            <summary>
            OpenMP Parallel Sections Directive
            </summary>
            <remarks>
            OpenMP parallel sections directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTaskDirective">
            <summary>
            OpenMP Task Directive
            </summary>
            <remarks>
            OpenMP task directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPMasterDirective">
            <summary>
            OpenMP Master Directive
            </summary>
            <remarks>
            OpenMP master directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPCriticalDirective">
            <summary>
            OpenMP Critical Directive
            </summary>
            <remarks>
            OpenMP critical directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTaskyieldDirective">
            <summary>
            OpenMP Taskyield Directive
            </summary>
            <remarks>
            OpenMP taskyield directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPBarrierDirective">
            <summary>
            OpenMP Barrier Directive
            </summary>
            <remarks>
            OpenMP barrier directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTaskwaitDirective">
            <summary>
            OpenMP Taskwait Directive
            </summary>
            <remarks>
            OpenMP taskwait directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPFlushDirective">
            <summary>
            OpenMP Flush Directive
            </summary>
            <remarks>
            OpenMP flush directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.SEHLeaveStmt">
            <summary>
            SEHL(Structured Exception Handling)
            </summary>
            <remarks>
            Windows Structured Exception Handling's leave statement.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPOrderedDirective">
            <summary>
            OpenMP Ordered Directive
            </summary>
            <remarks>
            OpenMP ordered directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPAtomicDirective">
            <summary>
            OpenMP Atomic Directive
            </summary>
            <remarks>
            OpenMP atomic directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPForSimdDirective">
            <summary>
            OpenMP For SIMD Directive
            </summary>
            <remarks>
            OpenMP for SIMD directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPParallelForSimdDirective">
            <summary>
            OpenMP Parallel For SIMD Directive
            </summary>
            <remarks>
            OpenMP parallel for SIMD directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetDirective">
            <summary>
            OpenMP Target Directive
            </summary>
            <remarks>
            OpenMP target directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTeamsDirective">
            <summary>
            OpenMP Team Directive
            </summary>
            <remarks>
            OpenMP teams directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTaskgroupDirective">
            <summary>
            OpenMP Taskgroup Directive
            </summary>
            <remarks>
            OpenMP taskgroup directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPCancellationPointDirective">
            <summary>
            OpenMP Cancellation Point Directive
            </summary>
            <remarks>
            OpenMP cancellation point directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPCancelDirective">
            <summary>
            OpenMP Cancel Directive
            </summary>
            <remarks>
            OpenMP cancel directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetDataDirective">
            <summary>
            OpenMP Target Data Directive
            </summary>
            <remarks>
            OpenMP target data directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTaskLoopDirective">
            <summary>
            OpenMP Task Loop Directive
            </summary>
            <remarks>
            OpenMP taskloop directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTaskLoopSimdDirective">
            <summary>
            OpenMP Task Loop SIMD Directive
            </summary>
            <remarks>
            OpenMP taskloop simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPDistributeDirective">
            <summary>
            OpenMP Distribute Directive
            </summary>
            <remarks>
            OpenMP distribute directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetEnterDataDirective">
            <summary>
            OpenMP Target Enter Data Directive
            </summary>
            <remarks>
            OpenMP target enter data directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetExitDataDirective">
            <summary>
            OpenMP Target Exit Data Directive
            </summary>
            <remarks>
            OpenMP target exit data directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetParallelDirective">
            <summary>
            OpenMP Target Parallel Directive
            </summary>
            <remarks>
            OpenMP target parallel directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetParallelForDirective">
            <summary>
            OpenMP Target Parallel For Directive
            </summary>
            <remarks>
            OpenMP target parallel for directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetUpdateDirective">
            <summary>
            OpenMP Target Update Directive
            </summary>
            <remarks>
            OpenMP target update directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPDistributeParallelForDirective">
            <summary>
            OpenMP Distribute Parallel For Directive
            </summary>
            <remarks>
            OpenMP distribute parallel for directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPDistributeParallelForSimdDirective">
            <summary>
            OpenMP Distribute Parallel For SIMD Directive
            </summary>
            <remarks>
            OpenMP distribute parallel for simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPDistributeSimdDirective">
            <summary>
            OpenMP Distribute SIMD Directive
            </summary>
            <remarks>
            OpenMP distribute simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetParallelForSimdDirective">
            <summary>
            OpenMP Target Parallel For SIMD Directive
            </summary>
            <remarks>
            OpenMP target parallel for simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetSimdDirective">
            <summary>
            OpenMP Target SIMD Directive
            </summary>
            <remarks>
            OpenMP target simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTeamsDistributeDirective">
            <summary>
            OpenMP Teams Distribute Directive
            </summary>
            <remarks>
            OpenMP teams distribute directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTeamsDistributeSimdDirective">
            <summary>
            OpenMP Teams Distribute SIMD Directive
            </summary>
            <remarks>
            OpenMP teams distribute simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTeamsDistributeParallelForSimdDirective">
            <summary>
            OpenMP Teams Distribute Parallel For SIMD Directive
            </summary>
            <remarks>
            OpenMP teams distribute parallel for simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTeamsDistributeParallelForDirective">
            <summary>
            OpenMP Teams Distribute Parallel For Directive
            </summary>
            <remarks>
            OpenMP teams distribute parallel for directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetTeamsDirective">
            <summary>
            OpenMP Target Teams Directive
            </summary>
            <remarks>
            OpenMP target teams directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetTeamsDistributeDirective">
            <summary>
            OpenMP Target Teams Distribute Directive
            </summary>
            <remarks>
            OpenMP target teams distribute directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetTeamsDistributeParallelForDirective">
            <summary>
            OpemMP Target Teams Distribute Parallel For Directive
            </summary>
            <remarks>
            OpenMP target teams distribute parallel for directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetTeamsDistributeParallelForSimdDirective">
            <summary>
            OpenMP Target Teams Distribute Parallel For SIMD Directive
            </summary>
            <remarks>
            OpenMP target teams distribute parallel for simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.OMPTargetTeamsDistributeSimdDirective">
            <summary>
            OpenMP Target Teams Distribute SIMD Directive
            </summary>
            <remarks>
            OpenMP target teams distribute simd directive.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.BuiltinBitCastExpr">
            <summary>
            Builtin Bit Cast Expression
            </summary>
            <remarks>
            C++2a std::bit_cast expression.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.LastStatement">
            <summary>
            Last Statement
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.TranslationUnit">
             <summary>
             Translation Unit
             </summary>
             <remarks>
             Cursor that represents the translation unit itself.
            
             The translation unit cursor exists primarily to act as the root
             cursor for traversing the contents of a translation unit.
             </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FirstAttribute">
            <summary>
            First Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.UnexposedAttribute">
            <summary>
            Unexposed Attribute
            </summary>
            <remarks>
            An attribute whose specific kind is not exposed via this interface.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.IBActionAttribute">
            <summary>
            IBAction Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.IBOutletAttribute">
            <summary>
            IBOutlet Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.IBOutletCollectionAttribute">
            <summary>
            IBOutlet Collection Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.CXXFinalAttribute">
            <summary>
            C++ Final Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.CXXOverrideAttribute">
            <summary>
            C++ Override Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.AnnotateAttribute">
            <summary>
            C++ Annotate Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.AsmLabelAttribute">
            <summary>
            Assembly Label Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.PackedAttribute">
            <summary>
            Packed Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.PureAttribute">
            <summary>
            Pure Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ConstAttribute">
            <summary>
            Const Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NoDuplicateAttribute">
            <summary>
            No Duplicate Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.CUDAConstantAttribute">
            <summary>
            CUDA Constant Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.CUDADeviceAttribute">
            <summary>
            CUDA Device Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.CUDAGlobalAttribute">
            <summary>
            CUDA Global Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.CUDAHostAttribute">
            <summary>
            CUDA Host Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.CUDASharedAttribute">
            <summary>
            CUDA Shared Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.VisibilityAttribute">
            <summary>
            Visibility Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.DLLExport">
            <summary>
            DLL Export
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.DLLImport">
            <summary>
            DLL Import
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NSReturnsRetained">
            <summary>
            NS Return Retained
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NSReturnsNotRetained">
            <summary>
            NS Return Not Retained
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NSReturnsAutoreleased">
            <summary>
            NS Return Auto Released
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NSConsumesSelf">
            <summary>
            NS Consumes Self
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.NSConsumed">
            <summary>
            NS Consumed
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCException">
            <summary>
            Objective-C Exception
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCNSObject">
            <summary>
            Objective-C NS Object
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCIndependentClass">
            <summary>
            Objective-C Independent Class
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCPreciseLifetime">
            <summary>
            Objective-C Precise Lifetime
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCReturnsInnerPointer">
            <summary>
            Objective-C Return Inner Pointer
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCRequiresSuper">
            <summary>
            Objective-C Requires Super
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCRootClass">
            <summary>
            Objective-C Root Class
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCSubclassingRestricted">
            <summary>
            Objective-C Sub Classing Restricted
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCExplicitProtocolImpl">
            <summary>
            Objective-C Explicit Protocol Implementation
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCDesignatedInitializer">
            <summary>
            Objective-C Designated Initializer
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCRuntimeVisible">
            <summary>
            Objective-C Runtime Visible
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ObjCBoxable">
            <summary>
            Objective-C Boxable
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.FlagEnum">
            <summary>
            Flag Enum
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ConvergentAttr">
            <summary>
            Convergent Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.WarnUnusedAttr">
            <summary>
            Warn Unused Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.WarnUnusedResultAttr">
            <summary>
            Warn Unused Result Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.AlignedAttr">
            <summary>
            Aligned Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.LastAttribute">
            <summary>
            Last Attribute
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.PreprocessingDirective">
            <summary>
            Preprocessing Directive
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.MacroDefinition">
            <summary>
            Macro Definition
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.MacroExpansion">
            <summary>
            Macro Expansion
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.MacroInstantiation">
            <summary>
            Macro Instantiation
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.InclusionDirective">
            <summary>
            Inclusion Directive
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.FirstPreprocessing">
            <summary>
            First Preprocessing
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.LastPreprocessing">
            <summary>
            Last Preprocessing
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.ModuleImportDecl">
            <summary>
            Module Import Declaration
            </summary>
            <remarks>
            A module import declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.TypeAliasTemplateDecl">
            <summary>
            Type Alias Template Declaration
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.StaticAssert">
            <summary>
            Static Assert
            </summary>
            <remarks>
            A static_assert or _Static_assert node
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FriendDecl">
            <summary>
            Friend Declaration
            </summary>
            <remarks>
            a friend declaration.
            </remarks>
        </member>
        <member name="F:ClangNet.CursorKind.FirstExtraDecl">
            <summary>
            Firxt Extra Declaration
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.LastExtraDecl">
            <summary>
            Last Extra Declaration
            </summary>
        </member>
        <member name="F:ClangNet.CursorKind.OverloadCandidate">
            <summary>
            Overload Candidate
            </summary>
            <remarks>
            A code completion overload candidate.
            </remarks>
        </member>
        <member name="T:ClangNet.CursorKindEx">
            <summary>
            Clang Cursor Kind Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsDeclaration(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Declaration
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Declaration Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsReference(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Reference
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Reference Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsExpression(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Expression
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Expression Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsAttribute(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Attribute
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Attribute Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsInvalid(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Invalid
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Invalid Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsTranslationUnit(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Translation Unit
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Translation Unit Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsPreprocessing(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Preprocessing
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Preprocessing Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.IsUnexposed(ClangNet.CursorKind)">
            <summary>
            Check Cursor is Unexposed
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Unexposed Flag</returns>
        </member>
        <member name="M:ClangNet.CursorKindEx.Spelling(ClangNet.CursorKind)">
            <summary>
            Get Cursor Kind Spelling
            </summary>
            <param name="kind">Clang Cursor Kind</param>
            <returns>Cursor Kind Spelling</returns>
        </member>
        <member name="T:ClangNet.CxxAccessSpecifier">
            <summary>
            C++ Access Specifier
            </summary>
            <remarks>
            Represents the C++ access control level to a base class for a
            cursor with kind <c>CX_CXXBaseSpecifier</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.CxxAccessSpecifier.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:ClangNet.CxxAccessSpecifier.Public">
            <summary>
            Public
            </summary>
        </member>
        <member name="F:ClangNet.CxxAccessSpecifier.Protected">
            <summary>
            Protected
            </summary>
        </member>
        <member name="F:ClangNet.CxxAccessSpecifier.Private">
            <summary>
            Private
            </summary>
        </member>
        <member name="T:ClangNet.DiagnosticDisplayOptions">
            <summary>
            Diagnostic Display Options
            </summary>
            <remarks>
            Options to control the display of diagnostics.
            The values in this enum are meant to be combined to customize the
            behavior of <c>clang_formatDiagnostic()</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticDisplayOptions.DisplaySourceLocation">
             <summary>
             Display Source Location
             </summary>
             <remarks>
             Display the source-location information where the diagnostic was located.
             When set, diagnostics will be prefixed by the file, line, and
             (optionally) column to which the diagnostic refers.
            
             For example,
             <code>
             test.c:28: warning: extra tokens at end of #endif directive
             </code>
            
             This option corresponds to the clang flag <c>-fshow-source-location</c>.
             </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticDisplayOptions.DisplayColumn">
            <summary>
            Display Column
            </summary>
            <remarks>
            If displaying the source-location information of the
            diagnostic, also include the column number.
            This option corresponds to the clang flag <c>-fshow-column</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticDisplayOptions.DisplaySourceRanges">
            <summary>
            Display Source Ranged
            </summary>
            <remarks>
            If displaying the source-location information of the
            diagnostic, also include information about source ranges in a
            machine-parsable format.
            This option corresponds to the clang flag
            <c>-fdiagnostics-print-source-range-info</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticDisplayOptions.DisplayOption">
            <summary>
            Display Option
            </summary>
            <remarks>
            Display the option name associated with this diagnostic, if any.
            The option name displayed (e.g., <c>-Wconversio</c>n) will be placed in brackets
            after the diagnostic text. This option corresponds to the clang flag
            <c>-fdiagnostics-show-option</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticDisplayOptions.DisplayCategoryId">
            <summary>
            Display Category ID
            </summary>
            <remarks>
            Display the category number associated with this diagnostic, if any.
            The category number is displayed within brackets after the diagnostic text.
            This option corresponds to the clang flag
            <c>-fdiagnostics-show-category=id</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticDisplayOptions.DisplayCategoryName">
            <summary>
            Display Category Name
            </summary>
            <remarks>
            Display the category name associated with this diagnostic, if any.
            The category name is displayed within brackets after the diagnostic text.
            This option corresponds to the clang flag
            <c>-fdiagnostics-show-category=name</c>.
            </remarks>
        </member>
        <member name="T:ClangNet.DiagnosticSeverity">
            <summary>
            Diagnostic Severity
            </summary>
            <remarks>
            Describes the severity of a particular diagnostic.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticSeverity.Ignored">
            <summary>
            Ignored
            </summary>
            <remarks>
            A diagnostic that has been suppressed, e.g.,
            by a command-line option.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticSeverity.Note">
            <summary>
            None
            </summary>
            <remarks>
            This diagnostic is a note that should be attached to the
            previous (non-note) diagnostic.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticSeverity.Warning">
            <summary>
            Warning
            </summary>
            <remarks>
            This diagnostic indicates suspicious code that may not be wrong.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticSeverity.Error">
            <summary>
            Error
            </summary>
            <remarks>
            This diagnostic indicates that the code is ill-formed.
            </remarks>
        </member>
        <member name="F:ClangNet.DiagnosticSeverity.Fatal">
            <summary>
            Fatal
            </summary>
            <remarks>
            This diagnostic indicates that the code is ill-formed such
            that future parser recovery is unlikely to produce useful results.
            </remarks>
        </member>
        <member name="T:ClangNet.ErrorCode">
            <summary>
            Libclang Error Code
            </summary>
            <remarks>
            Error codes returned by libclang routines.
            Zero (<c>Success</c>) is the only error code indicating success.
            Other error codes, including not yet assigned non-zero values, indicate errors.
            </remarks>
        </member>
        <member name="F:ClangNet.ErrorCode.Success">
            <summary>
            Success
            </summary>
            <remarks>
            No error.
            </remarks>
        </member>
        <member name="F:ClangNet.ErrorCode.Failure">
            <summary>
            Failure
            </summary>
            <remarks>
            A generic error code, no further details are available.
            Errors of this kind can get their own specific error codes in future
            libclang versions.
            </remarks>
        </member>
        <member name="F:ClangNet.ErrorCode.Crashed">
            <summary>
            Crashed
            </summary>
            <remarks>
            libclang crashed while performing the requested operation.
            </remarks>
        </member>
        <member name="F:ClangNet.ErrorCode.InvalidArguments">
            <summary>
            Invalid Arguments
            </summary>
            <remarks>
            The function detected that the arguments violate the function contract.
            </remarks>
        </member>
        <member name="F:ClangNet.ErrorCode.ASTReadError">
            <summary>
            AST Read Error
            </summary>
            <remarks>
            An AST deserialization error has occurred.
            </remarks>
        </member>
        <member name="T:ClangNet.EvalResultKind">
            <summary>
            Evaluation Result Kind
            </summary>
        </member>
        <member name="F:ClangNet.EvalResultKind.Int">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:ClangNet.EvalResultKind.Float">
            <summary>
            Float
            </summary>
        </member>
        <member name="F:ClangNet.EvalResultKind.ObjCStrLiteral">
            <summary>
            Objective-C String Literal
            </summary>
        </member>
        <member name="F:ClangNet.EvalResultKind.StrLiteral">
            <summary>
            String Literal
            </summary>
        </member>
        <member name="F:ClangNet.EvalResultKind.Str">
            <summary>
            String
            </summary>
        </member>
        <member name="F:ClangNet.EvalResultKind.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:ClangNet.EvalResultKind.UnExposed">
            <summary>
            Unexposed
            </summary>
        </member>
        <member name="T:ClangNet.FindResult">
            <summary>
            Find Result
            </summary>
        </member>
        <member name="F:ClangNet.FindResult.Success">
            <summary>
            Success
            </summary>
            <remarks>
            Function returned successfully.
            </remarks>
        </member>
        <member name="F:ClangNet.FindResult.Invalid">
            <summary>
            Invalid
            </summary>
            <remarks>
            One of the parameters was invalid for the function.
            </remarks>
        </member>
        <member name="F:ClangNet.FindResult.VisitBreak">
            <summary>
            Visit Break
            </summary>
            <remarks>
            The function was terminated by a callback
            (e.g. it returned <c>CXVisit_Break</c>)
            </remarks>
        </member>
        <member name="T:ClangNet.GlobalOptionFlags">
            <summary>
            Global Option Flags
            </summary>
        </member>
        <member name="F:ClangNet.GlobalOptionFlags.None">
            <summary>
            None
            </summary>
            <remarks>
            Used to indicate that no special <c>CXIndex</c> options are needed.
            </remarks>
        </member>
        <member name="F:ClangNet.GlobalOptionFlags.ThreadBackgroundPriorityForIndexing">
            <summary>
            Thread Background Priority For Indexing
            </summary>
            <remarks>
            Used to indicate that threads that libclang creates for indexing
            purposes should use background priority.
            Affects <c>clang_indexSourceFile()</c>, <c>clang_indexTranslationUnit()</c>,
            <c>clang_parseTranslationUnit()</c>, <c>clang_saveTranslationUnit()</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.GlobalOptionFlags.ThreadBackgroundPriorityForEditing">
            <summary>
            Thread Background Priority For Editing
            </summary>
            <remarks>
            Used to indicate that threads that libclang creates for editing
            purposes should use background priority.
            Affects <c>clang_reparseTranslationUnit</c>, <c>clang_codeCompleteAt</c>,
            <c>clang_annotateTokens</c>
            </remarks>
        </member>
        <member name="F:ClangNet.GlobalOptionFlags.ThreadBackgroundPriorityForAll">
            <summary>
            Thread Background Priority For All
            </summary>
            <remarks>
            Used to indicate that all threads that libclang creates should use
            background priority.
            </remarks>
        </member>
        <member name="T:ClangNet.IndexAttributeKind">
            <summary>
            Index Attribute Kind
            </summary>
        </member>
        <member name="F:ClangNet.IndexAttributeKind.Unexposed">
            <summary>
            Unexposed
            </summary>
        </member>
        <member name="F:ClangNet.IndexAttributeKind.IBAction">
            <summary>
            IBAction
            </summary>
        </member>
        <member name="F:ClangNet.IndexAttributeKind.IBOutlet">
            <summary>
            IBOutlet
            </summary>
        </member>
        <member name="F:ClangNet.IndexAttributeKind.IBOutletCollection">
            <summary>
            IBOutlet Collection
            </summary>
        </member>
        <member name="T:ClangNet.IndexDeclInfoFlags">
            <summary>
            Index Declaration Info Flags
            </summary>
        </member>
        <member name="F:ClangNet.IndexDeclInfoFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ClangNet.IndexDeclInfoFlags.Skipped">
            <summary>
            Skipped
            </summary>
        </member>
        <member name="T:ClangNet.IndexEntityCxxTemplateKind">
            <summary>
            Index Entity C++ Template Kind
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityCxxTemplateKind.NonTemplate">
            <summary>
            Non Template
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityCxxTemplateKind.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityCxxTemplateKind.TemplatePartialSpecialization">
            <summary>
            Template Partial Specialization
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityCxxTemplateKind.TemplateSpecialization">
            <summary>
            Template Specialization
            </summary>
        </member>
        <member name="T:ClangNet.IndexEntityKind">
            <summary>
            Index Entity Kind
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Unexposed">
            <summary>
            Unexposed
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Typedef">
            <summary>
            Typedef
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Function">
            <summary>
            Function
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.EnumConstant">
            <summary>
            Enum Constant
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.ObjCClass">
            <summary>
            Objective-C Class
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.ObjCProtocol">
            <summary>
            Objective-C Protocol
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.ObjCCategory">
            <summary>
            Objective-C Category
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.ObjCInstanceMethod">
            <summary>
            Objective-C Instance Method
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.ObjCClassMethod">
            <summary>
            Objective-C Class Method
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.ObjCProperty">
            <summary>
            Objective-C Property
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.ObjCIvar">
            <summary>
            Objective-C Instance Variable
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Enum">
            <summary>
            Enum
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Struct">
            <summary>
            Struct
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.Union">
            <summary>
            Union
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXClass">
            <summary>
            C++ Class
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXNamespace">
            <summary>
            C++ Namespace
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXNamespaceAlias">
            <summary>
            C++ Namespace Alias
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXStaticVariable">
            <summary>
            C++ Static Variable
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXStaticMethod">
            <summary>
            C++ Static Method
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXInstanceMethod">
            <summary>
            C++ Instance Method
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXConstructor">
            <summary>
            C++ Constructor
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXDestructor">
            <summary>
            C++ Destructor
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXConversionFunction">
            <summary>
            C++ Conversion Function
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXTypeAlias">
            <summary>
            C++ Type Alias
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityKind.CXXInterface">
            <summary>
            C++ Interface
            </summary>
        </member>
        <member name="T:ClangNet.IndexEntityKindEx">
            <summary>
            Index Entity Kind Extension
            </summary>
        </member>
        <member name="M:ClangNet.IndexEntityKindEx.IsEntityObjCContainer(ClangNet.IndexEntityKind)">
            <summary>
            Check Index Entity Kind is Objective-C Container
            </summary>
            <param name="kind">Index Entity Kind</param>
            <returns>Objective-C Container Flag</returns>
        </member>
        <member name="T:ClangNet.IndexEntityLanguage">
            <summary>
            Index Entity Language
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityLanguage.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityLanguage.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityLanguage.ObjC">
            <summary>
            Objective-C
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityLanguage.CXX">
            <summary>
            C++
            </summary>
        </member>
        <member name="F:ClangNet.IndexEntityLanguage.Swift">
            <summary>
            Swift
            </summary>
        </member>
        <member name="T:ClangNet.IndexEntityRefKind">
            <summary>
            Index Entity Reference Kind
            </summary>
            <remarks>
            Data for <c>IndexerCallbacks#indexEntityReference</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.IndexEntityRefKind.Direct">
            <summary>
            Direct
            </summary>
            <remarks>
            The entity is referenced directly in user's code.
            </remarks>
        </member>
        <member name="F:ClangNet.IndexEntityRefKind.Implicit">
            <summary>
            Implicit
            </summary>
            <remarks>
            An implicit reference, e.g. a reference of an ObjC method via the dot syntax.
            </remarks>
        </member>
        <member name="T:ClangNet.IndexObjCContainerKind">
            <summary>
            Index Objective-C Container Kind
            </summary>
        </member>
        <member name="F:ClangNet.IndexObjCContainerKind.ForwardRef">
            <summary>
            Forwared Reference
            </summary>
        </member>
        <member name="F:ClangNet.IndexObjCContainerKind.Interface">
            <summary>
            Interface
            </summary>
        </member>
        <member name="F:ClangNet.IndexObjCContainerKind.Implementation">
            <summary>
            Implementation
            </summary>
        </member>
        <member name="T:ClangNet.IndexOptionFlags">
            <summary>
            Index Option Flags
            </summary>
        </member>
        <member name="F:ClangNet.IndexOptionFlags.None">
            <summary>
            None
            </summary>
            <remarks>
            Used to indicate that no special indexing options are needed.
            </remarks>
        </member>
        <member name="F:ClangNet.IndexOptionFlags.SuppressRedundantRefs">
            <summary>
            Supress Redundant References
            </summary>
            <remarks>
            Used to indicate that IndexerCallbacks#indexEntityReference should
            be invoked for only one reference of an entity per source file that does
            not also include a declaration/definition of the entity.
            </remarks>
        </member>
        <member name="F:ClangNet.IndexOptionFlags.IndexFunctionLocalSymbols">
            <summary>
            Index Function Local Symbols
            </summary>
            <remarks>
            Function-local symbols should be indexed.
            If this is not set function-local symbols will be ignored.
            </remarks>
        </member>
        <member name="F:ClangNet.IndexOptionFlags.IndexImplicitTemplateInstantiations">
            <summary>
            Index Implicit Template Instantiations
            </summary>
            <remarks>
            Implicit function/class template instantiations should be indexed.
            If this is not set, implicit instantiations will be ignored.
            </remarks>
        </member>
        <member name="F:ClangNet.IndexOptionFlags.SuppressWarnings">
            <summary>
            Suppress Warnings
            </summary>
            <remarks>
            Suppress all compiler warnings when parsing for indexing.
            </remarks>
        </member>
        <member name="F:ClangNet.IndexOptionFlags.SkipParsedBodiesInSession">
            <summary>
            Skip Parsed Bodies In Session
            </summary>
            <remarks>
            Skip a function/method body that was already parsed during an
            indexing session assosiated with a <c>CXIndexAction</c> object.
            Bodies in system headers are always skipped.
            </remarks>
        </member>
        <member name="T:ClangNet.LanguageKind">
            <summary>
            Language Kind
            </summary>
            <remarks>
            Describe the "language" of the entity referred to by a cursor.
            </remarks>
        </member>
        <member name="F:ClangNet.LanguageKind.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:ClangNet.LanguageKind.C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:ClangNet.LanguageKind.ObjC">
            <summary>
            Objective-C
            </summary>
        </member>
        <member name="F:ClangNet.LanguageKind.CPlusPlus">
            <summary>
            C++
            </summary>
        </member>
        <member name="T:ClangNet.LinkageKind">
            <summary>
            Linkage Kind
            </summary>
            <remarks>
            Describe the linkage of the entity referred to by a cursor.
            </remarks>
        </member>
        <member name="F:ClangNet.LinkageKind.Invalid">
            <summary>
            Invalid
            </summary>
            <remarks>
            This value indicates that no linkage information is available
            for a provided <c>CXCursor</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.LinkageKind.NoLinkage">
            <summary>
            No Linkage
            </summary>
            <remarks>
            This is the linkage for variables, parameters, and so on that have automatic storage.
            This covers normal (non-extern) local variables.
            </remarks>
        </member>
        <member name="F:ClangNet.LinkageKind.Internal">
            <summary>
            Internal
            </summary>
            <remarks>
            This is the linkage for static variables and static functions.
            </remarks>
        </member>
        <member name="F:ClangNet.LinkageKind.UniqueExternal">
            <summary>
            Unique External
            </summary>
            <remarks>
            This is the linkage for entities with external linkage that live
            in C++ anonymous namespaces.
            </remarks>
        </member>
        <member name="F:ClangNet.LinkageKind.External">
            <summary>
            External
            </summary>
            <remarks>
            This is the linkage for entities with true, external linkage.
            </remarks>
        </member>
        <member name="T:ClangNet.LoadDiagError">
            <summary>
            Load Diagnostic Eerror
            </summary>
            <remarks>
            Describes the kind of error that occurred (if any) in a call to
            <c>clang_loadDiagnostics()</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.LoadDiagError.None">
            <summary>
            None
            </summary>
            <remarks>
            Indicates that no error occurred.
            </remarks>
        </member>
        <member name="F:ClangNet.LoadDiagError.Unknown">
            <summary>
            Unknown
            </summary>
            <remarks>
            Indicates that an unknown error occurred while attempting to
            deserialize diagnostics.
            </remarks>
        </member>
        <member name="F:ClangNet.LoadDiagError.CannotLoad">
            <summary>
            Cannot Load
            </summary>
            <remarks>
            Indicates that the file containing the serialized diagnostics
            could not be opened.
            </remarks>
        </member>
        <member name="F:ClangNet.LoadDiagError.InvalidFile">
            <summary>
            Invalid File
            </summary>
            <remarks>
            Indicates that the serialized diagnostics file is invalid or corrupt.
            </remarks>
        </member>
        <member name="T:ClangNet.NameRefFlags">
            <summary>
            Name Reference Flags
            </summary>
        </member>
        <member name="F:ClangNet.NameRefFlags.WantQualifier">
            <summary>
            Want Qualifier
            </summary>
            <remarks>
            Include the nested-name-specifier, e.g. Foo:: in x.Foo::y, in the range.
            </remarks>
        </member>
        <member name="F:ClangNet.NameRefFlags.WantTemplateArgs">
            <summary>
            Want Template Arguments
            </summary>
            <remarks>
            Include the explicit template arguments,
            e.g. \&lt;int&gt; in x.f&lt;int&gt;, in the range.
            </remarks>
        </member>
        <member name="F:ClangNet.NameRefFlags.WantSinglePiece">
             <summary>
             Want Single Piece
             </summary>
             <remarks>
             If the name is non-contiguous, return the full spanning range.
            
             Non-contiguous names occur in Objective-C when a selector with two or more
             parameters is used, or in C++ when using an operator:
             <code>
             [object doSomething:here withValue:there]; // ObjC
             return some_vector[1]; // C++
             </code>
             </remarks>
        </member>
        <member name="T:ClangNet.ObjCDeclQualifierKind">
            <summary>
            Objective-C Declaration Qualifier Kind
            </summary>
        </member>
        <member name="F:ClangNet.ObjCDeclQualifierKind.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ClangNet.ObjCDeclQualifierKind.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:ClangNet.ObjCDeclQualifierKind.InOut">
            <summary>
            In / Out
            </summary>
        </member>
        <member name="F:ClangNet.ObjCDeclQualifierKind.Out">
            <summary>
            Out
            </summary>
        </member>
        <member name="F:ClangNet.ObjCDeclQualifierKind.ByCopy">
            <summary>
            By Copy
            </summary>
        </member>
        <member name="F:ClangNet.ObjCDeclQualifierKind.ByRef">
            <summary>
            By Reference
            </summary>
        </member>
        <member name="F:ClangNet.ObjCDeclQualifierKind.OneWay">
            <summary>
            One Way
            </summary>
        </member>
        <member name="T:ClangNet.ObjCPropertyAttrKind">
            <summary>
            Objective-C Property Attribute Kind
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.NoAttr">
            <summary>
            No Attribute
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.ReadOnly">
            <summary>
            Read Only
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Getter">
            <summary>
            Getter
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Assign">
            <summary>
            Assign
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.ReadWrite">
            <summary>
            Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Retain">
            <summary>
            Retain
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Copy">
            <summary>
            Copy
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.NonAtomic">
            <summary>
            Non Atomic
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Setter">
            <summary>
            Setter
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Atomic">
            <summary>
            Atomic
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Weak">
            <summary>
            Weak
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Strong">
            <summary>
            Strong
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.UnsafeUnretained">
            <summary>
            Unsafe Unretained
            </summary>
        </member>
        <member name="F:ClangNet.ObjCPropertyAttrKind.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="T:ClangNet.PrintingPolicyProperty">
            <summary>
            Printing Policy Property
            </summary>
            <remarks>
            Properties for the printing policy.
            See <c>clang::PrintingPolicy</c> for more information.
            </remarks>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.Indentation">
            <summary>
            Indentation
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressSpecifiers">
            <summary>
            Suppress Specifiers
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressTagKeyword">
            <summary>
            Suppress Targ Keyword
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.IncludeTagDefinition">
            <summary>
            Include Tag Definition
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressScope">
            <summary>
            Suppress Scope
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressUnwrittenScope">
            <summary>
            Suppress Unwritten Scope
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressInitializers">
            <summary>
            Suppress Initializers
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.ConstantArraySizeAsWritten">
            <summary>
            Constant Array Size As Written
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.AnonymousTagLocations">
            <summary>
            Anonymous Tag Locations
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressStrongLifetime">
            <summary>
            Supress Strong Lifetime
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressLifetimeQualifiers">
            <summary>
            Suppress Lifetime Qualifiers
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressTemplateArgsInCXXConstructors">
            <summary>
            Suppress Template Args In C++ Constructors
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.Bool">
            <summary>
            Bool
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.Restrict">
            <summary>
            Restrict
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.Alignof">
            <summary>
            Align Of
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.UnderscoreAlignof">
            <summary>
            Underscore Align Of
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.UseVoidForZeroParams">
            <summary>
            Use Void For Zero Parameters
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.TerseOutput">
            <summary>
            Terse Output
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.PolishForDeclaration">
            <summary>
            Polish For Declaration
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.Half">
            <summary>
            Half
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.MSWChar">
            <summary>
            MS Wide Character
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.IncludeNewlines">
            <summary>
            Include New Lines
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.MSVCFormatting">
            <summary>
            MSVC Formatting
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.ConstantsAsWritten">
            <summary>
            Constants As Written
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.SuppressImplicitBase">
            <summary>
            Suppress Implicit Base
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.FullyQualifiedName">
            <summary>
            Fully Qualified Name
            </summary>
        </member>
        <member name="F:ClangNet.PrintingPolicyProperty.LastProperty">
            <summary>
            Last Property
            </summary>
        </member>
        <member name="T:ClangNet.RefQualifierKind">
            <summary>
            Reference Qualifier Kind
            </summary>
            <remarks>
            The kind of C++0x ref-qualifier associated with a function type,
            which determines whether a member function's "this" object can be an
            lvalue, rvalue, or neither.
            </remarks>
        </member>
        <member name="F:ClangNet.RefQualifierKind.None">
            <summary>
            None
            </summary>
            <remarks>
            No ref-qualifier was provided.
            </remarks>
        </member>
        <member name="F:ClangNet.RefQualifierKind.LValue">
            <summary>
            L Value
            </summary>
            <remarks>
            An lvalue ref-qualifier was provided (<c>&amp;</c>).
            </remarks>
        </member>
        <member name="F:ClangNet.RefQualifierKind.RValue">
            <summary>
            R Value
            </summary>
            <remarks>
            An rvalue ref-qualifier was provided (<c>&amp;&amp;</c>).
            </remarks>
        </member>
        <member name="T:ClangNet.ReparseTranslationUnitFlags">
             <summary>
             Reparse Translation Unit Flags
             </summary>
             <remarks>
             Flags that control the reparsing of translation units.
            
             The enumerators in this enumeration type are meant to be bitwise
             ORed together to specify which options should be used when
             reparsing the translation unit.
             </remarks>
        </member>
        <member name="F:ClangNet.ReparseTranslationUnitFlags.None">
            <summary>
            None
            </summary>
            <remarks>
            Used to indicate that no special reparsing options are needed.
            </remarks>
        </member>
        <member name="T:ClangNet.ResourceUsageKind">
            <summary>
            Resource Usage Kind
            </summary>
            <remarks>
            Categorizes how memory is being used by a translation unit.
            </remarks>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.AST">
            <summary>
            AST
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.Identifiers">
            <summary>
            Identifiers
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.Selectors">
            <summary>
            Selectors
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.GlobalCompletionResults">
            <summary>
            Global Completion Results
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.SourceManagerContentCache">
            <summary>
            Source Manager Content Cache
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.ASTSideTables">
            <summary>
            AST Side Tables
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.SourceManagerMembufferMalloc">
            <summary>
            Source Manager Memory Buffer Memory Allocation
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.SourceManagerMembufferMMap">
            <summary>
            Source Manager Memory Buffer Memory Map
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.ExternalASTSourceMembufferMalloc">
            <summary>
            External AST Source Memory Buffer Memory Allocation
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.ExternalASTSourceMembufferMMap">
            <summary>
            External AST Source Memory Buffer Memory Map
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.Preprocessor">
            <summary>
            Preprocessor
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.PreprocessingRecord">
            <summary>
            Preprocessing Record
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.SourceManagerDataStructures">
            <summary>
            Source Manager Data Structures
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.PreprocessorHeaderSearch">
            <summary>
            Preprocessor Header Search
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.MemoryInBytesBegin">
            <summary>
            Mmoery In Bytes Begin
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.MemoryInBytesEnd">
            <summary>
            Memory In Bytes End
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.First">
            <summary>
            First Resource Usage Kind
            </summary>
        </member>
        <member name="F:ClangNet.ResourceUsageKind.Last">
            <summary>
            End Resource Usage Kind
            </summary>
        </member>
        <member name="T:ClangNet.ResourceUsageKindEx">
            <summary>
            Resource Usage Kind Extensions
            </summary>
        </member>
        <member name="M:ClangNet.ResourceUsageKindEx.GetResourceUsageName(ClangNet.ResourceUsageKind)">
            <summary>
            Get Resourece Usage Name
            </summary>
            <param name="kind">Resource Usage Kind</param>
            <returns>Resourece Usage Name</returns>
        </member>
        <member name="T:ClangNet.SaveError">
            <summary>
            Save Error
            </summary>
            <remarks>
            Describes the kind of error that occurred (if any) in a call to
            <c>clang_saveTranslationUnit()</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.SaveError.None">
            <summary>
            None
            </summary>
            <remarks>
            Indicates that no error occurred while saving a translation unit.
            </remarks>
        </member>
        <member name="F:ClangNet.SaveError.Unknown">
             <summary>
             Unknown
             </summary>
             <remarks>
             Indicates that an unknown error occurred while attempting to save the file.
            
             This error typically indicates that file I/O failed when attempting to write the file.
             </remarks>
        </member>
        <member name="F:ClangNet.SaveError.TranslationErrors">
             <summary>
             Translation Errors
             </summary>
             <remarks>
             Indicates that errors during translation prevented this attempt
             to save the translation unit.
            
             Errors that prevent the translation unit from being saved can be
             extracted using <c>clang_getNumDiagnostics()</c> and <c>clang_getDiagnostic()</c>.
             </remarks>
        </member>
        <member name="F:ClangNet.SaveError.InvalidTU">
            <summary>
            Invalid Translation Unit
            </summary>
            <remarks>
            Indicates that the translation unit to be saved was somehow invalid (e.g., NULL).
            </remarks>
        </member>
        <member name="T:ClangNet.SaveTranslationUnitFlags">
             <summary>
             Save Translation Unit Flags
             </summary>
             <remarks>
             Flags that control how translation units are saved.
            
             The enumerators in this enumeration type are meant to be bitwise
             ORed together to specify which options should be used when
             saving the translation unit.
             </remarks>
        </member>
        <member name="F:ClangNet.SaveTranslationUnitFlags.None">
            <summary>
            None
            </summary>
            <remarks>
            Used to indicate that no special saving options are needed.
            </remarks>
        </member>
        <member name="T:ClangNet.StorageClass">
            <summary>
            Storage Class
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.Extern">
            <summary>
            Extern
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.Static">
            <summary>
            Static
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.PrivateExtern">
            <summary>
            Private Extern
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.OpenCLWorkGroupLocal">
            <summary>
            OpenCL Work Group Local
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:ClangNet.StorageClass.Register">
            <summary>
            Register
            </summary>
        </member>
        <member name="T:ClangNet.SymbolRole">
            <summary>
            Symbol Role
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Declaration">
            <summary>
            Declaration
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Definition">
            <summary>
            Definition
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Call">
            <summary>
            Call
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Dynamic">
            <summary>
            Dynamic
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.AddressOf">
            <summary>
            Address Of
            </summary>
        </member>
        <member name="F:ClangNet.SymbolRole.Implicit">
            <summary>
            Implicit
            </summary>
        </member>
        <member name="T:ClangNet.TemplateArgumentKind">
            <summary>
            Template Argument Kind
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Declaration">
            <summary>
            Declaration
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.NullPtr">
            <summary>
            Null Pointer
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Integral">
            <summary>
            Integral
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.TemplateExpansion">
            <summary>
            Template Expansion
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Pack">
            <summary>
            Pack
            </summary>
        </member>
        <member name="F:ClangNet.TemplateArgumentKind.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="T:ClangNet.TLSKind">
            <summary>
            TLS(Thread Local Storage) Kind
            </summary>
            <remarks>
            Describe the "thread-local storage (TLS) kind" of the declaration
            referred to by a cursor.
            </remarks>
        </member>
        <member name="F:ClangNet.TLSKind.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ClangNet.TLSKind.Dynamic">
            <summary>
            Dynamic
            </summary>
        </member>
        <member name="F:ClangNet.TLSKind.Static">
            <summary>
            Static
            </summary>
        </member>
        <member name="T:ClangNet.TokenKind">
            <summary>
            Token Kind
            </summary>
        </member>
        <member name="F:ClangNet.TokenKind.Punctuation">
            <summary>
            Punctuation
            </summary>
        </member>
        <member name="F:ClangNet.TokenKind.Keyword">
            <summary>
            Keyword
            </summary>
        </member>
        <member name="F:ClangNet.TokenKind.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="F:ClangNet.TokenKind.Literal">
            <summary>
            Literal
            </summary>
        </member>
        <member name="F:ClangNet.TokenKind.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="T:ClangNet.TranslationUnitFlags">
             <summary>
             Translation Unit Flags
             </summary>
             <remarks>
             Flags that control the creation of translation units.
            
             The enumerators in this enumeration type are meant to be bitwise
             ORed together to specify which options should be used when
             constructing the translation unit.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.None">
            <summary>
            None
            </summary>
            <remarks>
            Used to indicate that no special translation-unit options are needed.
            </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.DetailedPreprocessingRecord">
             <summary>
             Detailed Preprocessing Record
             </summary>
             <remarks>
             Used to indicate that the parser should construct a "detailed"
             preprocessing record, including all macro definitions and instantiations.
            
             Constructing a detailed preprocessing record requires more memory
             and time to parse, since the information contained in the record
             is usually not retained. However, it can be useful for
             applications that require more detailed information about the
             behavior of the preprocessor.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.Incomplete">
             <summary>
             Incomplete
             </summary>
             <remarks>
             Used to indicate that the translation unit is incomplete.
            
             When a translation unit is considered "incomplete", semantic
             analysis that is typically performed at the end of the
             translation unit will be suppressed. For example, this suppresses
             the completion of tentative declarations in C and of
             instantiation of implicitly-instantiation function templates in
             C++. This option is typically used when parsing a header with the
             intent of producing a precompiled header.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.PrecompiledPreamble">
             <summary>
             Precompiled Preamble
             </summary>
             <remarks>
             Used to indicate that the translation unit should be built with an
             implicit precompiled header for the preamble.
            
             An implicit precompiled header is used as an optimization when a
             particular translation unit is likely to be reparsed many times
             when the sources aren't changing that often. In this case, an
             implicit precompiled header will be built containing all of the
             initial includes at the top of the main file (what we refer to as
             the "preamble" of the file). In subsequent parses, if the
             preamble or the files in it have not changed,
             <c>clang_reparseTranslationUnit()</c> will re-use the implicit
             precompiled header to improve parsing performance.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.CacheCompletionResults">
             <summary>
             Cache Completion Results
             </summary>
             <remarks>
             Used to indicate that the translation unit should cache some
             code-completion results with each reparse of the source file.
            
             Caching of code-completion results is a performance optimization that
             introduces some overhead to reparsing but improves the performance of
             code-completion operations.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.ForSerialization">
             <summary>
             For Serialization
             </summary>
             <remarks>
             Used to indicate that the translation unit will be serialized with
             <c>clang_saveTranslationUnit()</c>.
            
             This option is typically used when parsing a header with the intent of
             producing a precompiled header.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.CXXChainedPCH">
             <summary>
             C++ Chained PCH
             </summary>
             <remarks>
             Enabled chained precompiled preambles in C++.
            
             Note: this is a *temporary* option that is available only while
             we are testing C++ precompiled preamble support. It is deprecated.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.SkipFunctionBodies">
             <summary>
             Skip Function Bodies
             </summary>
             <remarks>
             Used to indicate that function/method bodies should be skipped while parsing.
            
             This option can be used to search for declarations/definitions while
             ignoring the usages.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.IncludeBriefCommentsInCodeCompletion">
            <summary>
            Include Brief Comments In Code Completion
            </summary>
            <remarks>
            Used to indicate that brief documentation comments should be
            included into the set of code completions returned from this translation unit.
            </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.CreatePreambleOnFirstParse">
            <summary>
            Create Preamble On First Parse
            </summary>
            <remarks>
            Used to indicate that the precompiled preamble should be created on
            the first parse. Otherwise it will be created on the first reparse. This
            trades runtime on the first parse (serializing the preamble takes time) for
            reduced runtime on the second parse (can now reuse the preamble).
            </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.KeepGoing">
             <summary>
             Keep Going
             </summary>
             <remarks>
             Do not stop processing when fatal errors are encountered.
            
             When fatal errors are encountered while parsing a translation unit,
             semantic analysis is typically stopped early when compiling code. A common
             source for fatal errors are unresolvable include files. For the
             purposes of an IDE, this is undesirable behavior and as much information
             as possible should be reported. Use this flag to enable this behavior.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.SingleFileParse">
            <summary>
            Single File Parse
            </summary>
            <remarks>
            Sets the preprocessor in a mode for parsing a single file only.
            </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.LimitSkipFunctionBodiesToPreamble">
             <summary>
             Limit Skip Function Bodies To Preamble
             </summary>
             <remarks>
             Used in combination with <c>CXTranslationUnit_SkipFunctionBodies</c> to
             constrain the skipping of function bodies to the preamble.
            
             The function bodies of the main file are not skipped.
             </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.IncludeAttributedTypes">
            <summary>
            Include Attributed Type
            </summary>
            <remarks>
            Used to indicate that attributed types should be included in <c>CXType</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.VisitImplicitAttributes">
            <summary>
            Visit Implicit Attributes
            </summary>
            <remarks>
            Used to indicate that implicit attributes should be visited.
            </remarks>
        </member>
        <member name="F:ClangNet.TranslationUnitFlags.IgnoreNonErrorsFromIncludedFiles">
             <summary>
             Ignore No Errors From Included Files
             </summary>
             <remarks>
             Used to indicate that non-errors from included files should be ignored.
            
             If set, clang_getDiagnosticSetFromTU() will not report e.g. warnings from
             included files anymore. This speeds up clang_getDiagnosticSetFromTU() for
             the case where these warnings are not of interest, as for an IDE for
             example, which typically shows only the diagnostics in the main file.
             </remarks>
        </member>
        <member name="T:ClangNet.TypeKind">
            <summary>
            Type Kind
            </summary>
            <remarks>
            Describes the kind of type
            </remarks>
        </member>
        <member name="F:ClangNet.TypeKind.Invalid">
            <summary>
            Invalid
            </summary>
            <remarks>
            Reprents an invalid type (e.g., where no type is available).
            </remarks>
        </member>
        <member name="F:ClangNet.TypeKind.Unexposed">
            <summary>
            Unexposed
            </summary>
            <remarks>
            A type whose specific kind is not exposed via this interface.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeKind.Void">
            <summary>
            Void
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Bool">
            <summary>
            Bool
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.CharU">
            <summary>
            Character Unsigned
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.UChar">
            <summary>
            Unsigned Char
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Char16">
            <summary>
            Character 16bit
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Char32">
            <summary>
            Character 32bit
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.UShort">
            <summary>
            Unsigned Short
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.UInt">
            <summary>
            Unsigned Integer
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ULong">
            <summary>
            Unsigned Long
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ULongLong">
            <summary>
            Unsigned Long Long
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.UInt128">
            <summary>
            Unsigned Integer 128bit
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.CharS">
            <summary>
            Character Signed
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.SChar">
            <summary>
            Signed Character
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.WChar">
            <summary>
            Wide Character
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Short">
            <summary>
            Signed Short
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Int">
            <summary>
            Signed Integer
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Long">
            <summary>
            Signed Long
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.LongLong">
            <summary>
            Signed Long Long
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Int128">
            <summary>
            Integer 128bit
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Float">
            <summary>
            Float
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.LongDouble">
            <summary>
            Long Double
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.NullPtr">
            <summary>
            Null Pointer
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Overload">
            <summary>
            Overload
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Dependent">
            <summary>
            Dependent
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ObjCId">
            <summary>
            Objective-C ID
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ObjCClass">
            <summary>
            Objective-C Class
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ObjCSel">
            <summary>
            Objective-C Selector
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Float128">
            <summary>
            Float 128bit
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Half">
            <summary>
            Half
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Float16">
            <summary>
            Float 16bit
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ShortAccum">
            <summary>
            Short Accumulation
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Accum">
            <summary>
            Accumulation
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.LongAccum">
            <summary>
            Long Accumulation
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.UShortAccum">
            <summary>
            Unsigned Short Accumulation
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.UAccum">
            <summary>
            Unsigned Accumulation
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ULongAccum">
            <summary>
            Unsigned Long Accumulation
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.FirstBuiltin">
            <summary>
            First Builtin
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.LastBuiltin">
            <summary>
            Last Builtin
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Complex">
            <summary>
            Complex
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Pointer">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.BlockPointer">
            <summary>
            Block Pointer
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.LValueReference">
            <summary>
            L Value Reference
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.RValueReference">
            <summary>
            R Value Reference
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Record">
            <summary>
            Record
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Enum">
            <summary>
            Enum
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Typedef">
            <summary>
            Typedef
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ObjCInterface">
            <summary>
            Objective-C Interface
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ObjCObjectPointer">
            <summary>
            Objective-C Object Pointer
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.FunctionNoProto">
            <summary>
            Function No Prototype
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.FunctionProto">
            <summary>
            Function Prototype
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ConstantArray">
            <summary>
            Constant Array
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Vector">
            <summary>
            Vector
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.IncompleteArray">
            <summary>
            Incomplete Array
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.VariableArray">
            <summary>
            Variable Array
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.DependentSizedArray">
            <summary>
            Dependent Sized Array
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.MemberPointer">
            <summary>
            Member Pointer
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Elaborated">
            <summary>
            Elaborated
            </summary>
            <remarks>
            Represents a type that was referred to using an elaborated type keyword.
            E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeKind.Pipe">
            <summary>
            Pipe
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dRO">
            <summary>
            OpenCL Image 1D Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dArrayRO">
            <summary>
            OpenCL Image 1D Array Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dBufferRO">
            <summary>
            OpendCL Image 1D Buffer Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dRO">
            <summary>
            OpenCL Image 2D Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayRO">
            <summary>
            OpenCL Image 2D Array Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dDepthRO">
            <summary>
            OpenCL Image 2D Depth Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayDepthRO">
            <summary>
            OpenCL Image 2D Array Depth Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dMSAARO">
            <summary>
            OpenCL Image 2D MSAA Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayMSAARO">
            <summary>
            OpenCL Image 2D Array MSAA Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dMSAADepthRO">
            <summary>
            OpenCL Image 2D MSAA Depth Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayMSAADepthRO">
            <summary>
            OpenCL Image 2D Array MSAA Depth Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage3dRO">
            <summary>
            OpenCL Image 3D Read Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dWO">
            <summary>
            OpenCL Image 1D Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dArrayWO">
            <summary>
            OpenCL Image 1D Array Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dBufferWO">
            <summary>
            OpenCL Image 1D Buffer Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dWO">
            <summary>
            OpenCL Image 2D Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayWO">
            <summary>
            OpenCL Image 2D Array Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dDepthWO">
            <summary>
            OpenCL Image 2D Depth Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayDepthWO">
            <summary>
            OpenCL Image 2D Array Depth Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dMSAAWO">
            <summary>
            OpenCL Image 2D MSAA Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayMSAAWO">
            <summary>
            OpenCL Image 2D Array MSAA Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dMSAADepthWO">
            <summary>
            OpenCL Imaeg 2D MSAA Depth Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayMSAADepthWO">
            <summary>
            OpenCL Image 2D Array MSAA Depth Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage3dWO">
            <summary>
            OpenCL Image 3D Write Only
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dRW">
            <summary>
            OpenCL Image 1D Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dArrayRW">
            <summary>
            OpenCL Image 1D Array Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage1dBufferRW">
            <summary>
            OpenCL Image 1D Buffer Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dRW">
            <summary>
            OpenCL Image 2D Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayRW">
            <summary>
            OpenCL Image 2D Array Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dDepthRW">
            <summary>
            OpenCL Image 2D Depth Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayDepthRW">
            <summary>
            OpenCL Image 2D Array Depth Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dMSAARW">
            <summary>
            OpenCL Image 2D MSAA Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayMSAARW">
            <summary>
            OpenCL Image 2D Array MSAA Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dMSAADepthRW">
            <summary>
            OpenCL Image 2D MSAA Depth Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage2dArrayMSAADepthRW">
            <summary>
            OpenCL Image 2D Array MSAA Depth Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLImage3dRW">
            <summary>
            OpenCL Image 3D Read / Write
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLSampler">
            <summary>
            OpenCL Sampler
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLEvent">
            <summary>
            OpenCL Event
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLQueue">
            <summary>
            OpenCL Queue
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLReserveID">
            <summary>
            OpenCl Reserve ID
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ObjCObject">
            <summary>
            Objective-C Object
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ObjCTypeParam">
            <summary>
            Objective-C Type Parameter
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.Attributed">
            <summary>
            Attributed
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCMcePayload">
            <summary>
            OpenCL Intel Subgroup AVC Mce Payload
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCImePayload">
            <summary>
            OpenCL Intel Subgroup AVC Ime Payload
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCRefPayload">
            <summary>
            OpenCL Intel Subgroup AVC Ref Payload
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCSicPayload">
            <summary>
            OpenCL Intel Subgroup AVC Sic Payload
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCMceResult">
            <summary>
            OpenCL Intel Subgroup AVC Mce Result
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCImeResult">
            <summary>
            OpenCL Intel Subgroup AVC Ime Result
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCRefResult">
            <summary>
            OpenCL Intel Subgroup AVC Ref Result
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCSicResult">
            <summary>
            OpenCL Intel Subgroup AVC Sic Result
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCImeResultSingleRefStreamout">
            <summary>
            OpenCL Intel Subgroup AVC Ime Result Single Ref Streamout
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCImeResultDualRefStreamout">
            <summary>
            OpenCL Intel Subgroup AVC Ime Result Dual Ref Streamout
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCImeSingleRefStreamin">
            <summary>
            OpenCL Intel Subgroup AVC Ime Single Ref Streamin
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.OCLIntelSubgroupAVCImeDualRefStreamin">
            <summary>
            OpenCL Intel Subgroup AVC Ime Dual Ref Streamin
            </summary>
        </member>
        <member name="F:ClangNet.TypeKind.ExtVector">
            <summary>
            Extended Vector
            </summary>
        </member>
        <member name="T:ClangNet.TypeKindEx">
            <summary>
            Type Kind Extensions
            </summary>
        </member>
        <member name="M:ClangNet.TypeKindEx.ToSpelling(ClangNet.TypeKind)">
            <summary>
            Convert To Type Kind Spelling
            </summary>
            <param name="kind">Type Kind</param>
            <returns>Type Kind Spelling</returns>
        </member>
        <member name="T:ClangNet.TypeLayoutError">
            <summary>
            Type Layout Error
            </summary>
        </member>
        <member name="F:ClangNet.TypeLayoutError.Invalid">
            <summary>
            Invalid
            </summary>
            <remarks>
            Type is of kind CXType_Invalid.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeLayoutError.Incomplete">
            <summary>
            Incomplete
            </summary>
            <remarks>
            The type is an incomplete Type.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeLayoutError.Dependent">
            <summary>
            Dependent
            </summary>
            <remarks>
            The type is a dependent Type.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeLayoutError.NotConstantSize">
            <summary>
            Not Constant Size
            </summary>
            <remarks>
            The type is not a constant size type.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeLayoutError.InvalidFieldName">
            <summary>
            Invalid Field Name
            </summary>
            <remarks>
            The Field name is not valid for this record.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeLayoutError.Undeduced">
            <summary>
            Undeduced
            </summary>
            <remarks>
            The type is undeduced.
            </remarks>
        </member>
        <member name="T:ClangNet.TypeNullabilityKind">
            <summary>
            Type Nullability Kind
            </summary>
        </member>
        <member name="F:ClangNet.TypeNullabilityKind.NonNull">
            <summary>
            Non Null
            </summary>
            <remarks>
            Values of this type can never be null.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeNullabilityKind.Nullable">
            <summary>
            Nullable
            </summary>
            <remarks>
            Values of this type can be null.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeNullabilityKind.Unspecified">
            <summary>
            Unspecified
            </summary>
            <remarks>
            Whether values of this type can be null is (explicitly)
            unspecified. This captures a (fairly rare) case where we
            can't conclude anything about the nullability of the type even
            though it has been considered.
            </remarks>
        </member>
        <member name="F:ClangNet.TypeNullabilityKind.Invalid">
            <summary>
            Invalid
            </summary>
            <remarks>
            Nullability is not applicable to this type.
            </remarks>
        </member>
        <member name="T:ClangNet.VisibilityKind">
            <summary>
            Visibility Kind
            </summary>
        </member>
        <member name="F:ClangNet.VisibilityKind.Invalid">
            <summary>
            Invalid
            </summary>
            <remarks>
            This value indicates that no visibility information is available
            for a provided <c>CXCursor</c>.
            </remarks>
        </member>
        <member name="F:ClangNet.VisibilityKind.Hidden">
            <summary>
            Hidden
            </summary>
            <remarks>
            Symbol not seen by the linker.
            </remarks>
        </member>
        <member name="F:ClangNet.VisibilityKind.Protected">
            <summary>
            Protected
            </summary>
            <remarks>
            Symbol seen by the linker but resolves to a symbol inside this object.
            </remarks>
        </member>
        <member name="F:ClangNet.VisibilityKind.Default">
            <summary>
            Default
            </summary>
            <remarks>
            Symbol seen by the linker and acts like a normal symbol.
            </remarks>
        </member>
        <member name="T:ClangNet.VisitorResult">
            <summary>
            Visitor Result
            </summary>
        </member>
        <member name="F:ClangNet.VisitorResult.Break">
            <summary>
            Break
            </summary>
        </member>
        <member name="F:ClangNet.VisitorResult.Continue">
            <summary>
            Continue
            </summary>
        </member>
        <member name="T:ClangNet.ClangUnsavedFileEx">
            <summary>
            Clang Unsaved File Extensions
            </summary>
        </member>
        <member name="M:ClangNet.ClangUnsavedFileEx.ToNative(ClangNet.ClangUnsavedFile)">
            <summary>
            Convert to Native Clang Unsaved File
            </summary>
            <param name="file">Managed Clang Unsaved File</param>
            <returns>Native Clang Unsaved File</returns>
        </member>
        <member name="M:ClangNet.ClangUnsavedFileEx.ToNativeArray(System.Collections.Generic.IEnumerable{ClangNet.ClangUnsavedFile})">
            <summary>
            Convert to Native Clang Unsaved File Array
            </summary>
            <param name="files">Managed Clang Unsaved File List</param>
            <returns>Native Clang Unsaved File Array</returns>
        </member>
        <member name="T:ClangNet.CXCommentEx">
            <summary>
            CXComment Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXCommentEx.ToManaged(ClangNet.Native.CXComment)">
            <summary>
            Convert to Managed Clang Comment
            </summary>
            <param name="comment">Native Clang Comment</param>
            <returns>Managed Clang Comment</returns>
        </member>
        <member name="T:ClangNet.CXCursorEx">
            <summary>
            CXCursor Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXCursorEx.ToManaged(ClangNet.Native.CXCursor)">
            <summary>
            Convert to Managed Clang Cursor
            </summary>
            <param name="cursor">Native Clang Cursor</param>
            <returns>Managed Clang Cursor</returns>
        </member>
        <member name="T:ClangNet.CXFileUniqueIDEx">
            <summary>
            CXFileUniqueID Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXFileUniqueIDEx.ToManaged(ClangNet.Native.CXFileUniqueID)">
            <summary>
            Convert to Managed Clang Cursor
            </summary>
            <param name="file_unique_id">Native Clang File Unique ID</param>
            <returns>Managed Clang File Unique ID</returns>
        </member>
        <member name="T:ClangNet.CXIdxLocEx">
            <summary>
            CXIdxLoc Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXIdxLocEx.ToManaged(ClangNet.Native.CXIdxLoc)">
            <summary>
            Convert to Managed Clang Index Location
            </summary>
            <param name="loc">Native Clang Index Location</param>
            <returns>Managed Clang Index Location</returns>
        </member>
        <member name="T:ClangNet.CXSourceLocationEx">
            <summary>
            CXSourceLocation Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXSourceLocationEx.ToManaged(ClangNet.Native.CXSourceLocation)">
            <summary>
            Convert to Managed Clang Source Location
            </summary>
            <param name="loc">Native Clang Source Location</param>
            <returns>Managed Clang Source Location</returns>
        </member>
        <member name="T:ClangNet.CXSourceRangeEx">
            <summary>
            CXSourceRange Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXSourceRangeEx.ToManaged(ClangNet.Native.CXSourceRange)">
            <summary>
            Convert to Managed Clang Source Range
            </summary>
            <param name="range">Native Clang Source Range</param>
            <returns>Managed Clang Source Range</returns>
        </member>
        <member name="T:ClangNet.CXStringEx">
            <summary>
            CXString Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXStringEx.ToManaged(ClangNet.Native.CXString,System.String)">
            <summary>
            Convert to Managed String
            </summary>
            <param name="string">Native Clang String</param>
            <param name="encoding">Default Encoding Type</param>
            <returns>Managed String</returns>
        </member>
        <member name="T:ClangNet.CXStringSetEx">
            <summary>
            CXString Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXStringSetEx.ToManaged(ClangNet.Native.CXStringSet)">
            <summary>
            Convert to Managed String Array
            </summary>
            <param name="string_set">Native Clang String Set</param>
            <returns>Managed String</returns>
        </member>
        <member name="T:ClangNet.CXTokenEx">
            <summary>
            CXToken Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXTokenEx.ToManaged(ClangNet.Native.CXToken,System.IntPtr)">
            <summary>
            Convert to Managed Clang Token
            </summary>
            <param name="token">Native Clang Token</param>
            <param name="tu">Native Clang Translation Unit Pointer</param>
            <returns>Managed Clang Token</returns>
        </member>
        <member name="T:ClangNet.CXTUResourceUsageEntryEx">
            <summary>
            CXTUResourceUsageEntry Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXTUResourceUsageEntryEx.ToManaged(ClangNet.Native.CXTUResourceUsageEntry)">
            <summary>
            Convert to Managed Clang Translation Unit Resource Usage Entry
            </summary>
            <param name="entry">Native Clang Translation Unit Resource Usage Entry</param>
            <returns>Managed Clang Translation Unit Resource Usage Entry</returns>
        </member>
        <member name="T:ClangNet.CXTUResourceUsageEx">
            <summary>
            CXTUResourceUsage Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXTUResourceUsageEx.ToManaged(ClangNet.Native.CXTUResourceUsage)">
            <summary>
            Convert to Managed Clang Translation Unit Resource Usage
            </summary>
            <param name="usage">Native Clang Translation Unit Resource Usage</param>
            <returns>Managed Clang Translation Unit Resource Usage</returns>
        </member>
        <member name="T:ClangNet.CXTypeEx">
            <summary>
            CXType Extensions
            </summary>
        </member>
        <member name="M:ClangNet.CXTypeEx.ToManaged(ClangNet.Native.CXType)">
            <summary>
            Convert to Managed Clang Type
            </summary>
            <param name="type">Native Clang Type</param>
            <returns>Managed Clang Type</returns>
        </member>
        <member name="T:ClangNet.IntPtrEx">
            <summary>
            IntPtr Extensions
            </summary>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToManaged``1(System.IntPtr)">
            <summary>
            Convert to Managed Clang Object
            </summary>
            <typeparam name="T">Clang Object</typeparam>
            <param name="ptr">Native Clang Object Pointer</param>
            <returns>Managed Clang Object</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToByteArray(System.IntPtr,System.UInt64)">
            <summary>
            Convert to Byte Array
            </summary>
            <param name="ptr">Native Pointer</param>
            <param name="size">Array Size</param>
            <returns>Byte Array</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToNativeStuct``1(System.IntPtr)">
            <summary>
            Convert to Native Struct
            </summary>
            <typeparam name="T">Native Struct Type</typeparam>
            <param name="ptr">Native Struct Pointer</param>
            <returns>Native Struct</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToNativeStuct``1(System.IntPtr,System.Int32)">
            <summary>
            Convert to Native Struct
            </summary>
            <typeparam name="T">Native Struct Type</typeparam>
            <param name="ptr">Native Struct Pointer</param>
            <param name="i">Array Index</param>
            <returns>Native Struct</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToNativeStructs``1(System.IntPtr,System.Int32)">
            <summary>
            Convert to Native Struct Enumerable
            </summary>
            <typeparam name="T">Native Struct Type</typeparam>
            <param name="ptr">Native Stucts Pointer</param>
            <param name="count">Native Struct Count</param>
            <returns>Native Struct Enumerable</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToManagedObjects``2(System.IntPtr,System.Int32)">
            <summary>
            Convert to Managed Clang Object Enumerable
            </summary>
            <typeparam name="TNative">Native Clang Struct Type</typeparam>
            <typeparam name="TManaged">Managed Clang Object Type</typeparam>
            <param name="ptr">Native Stucts Pointer</param>
            <param name="count">Native Struct Count</param>
            <returns>Managed Clang Object Enumerable</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToManagedString(System.IntPtr,System.String)">
            <summary>
            Convert To Managed String
            </summary>
            <param name="char_ptr">Native Char Pointer</param>
            <param name="encoding">Encoding</param>
            <returns>Managed String</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToManagedString(System.IntPtr,System.Int32,System.String)">
            <summary>
            Convert To Managed String
            </summary>
            <param name="char_ptr">Native Char Pointer</param>
            <param name="size">Native Byte Size</param>
            <param name="encoding">Encoding</param>
            <returns>Managed String</returns>
        </member>
        <member name="M:ClangNet.IntPtrEx.ToManagedStringSet(System.IntPtr)">
            <summary>
            Convert To Managed String Set Array
            </summary>
            <param name="string_set_ptr">Native String Set Pointer</param>
            <returns>Managed String Set Array</returns>
        </member>
        <member name="T:ClangNet.ClangModuleMapDescriptor">
            <summary>
            Managed Clang Module Map Descriptor
            </summary>
        </member>
        <member name="M:ClangNet.ClangModuleMapDescriptor.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Module Map Descriptor Pointer</param>
        </member>
        <member name="M:ClangNet.ClangModuleMapDescriptor.SetFrameworkModuleName(System.String)">
            <summary>
            Set Framework Module Name
            </summary>
            <param name="name">Framework Module Name</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangModuleMapDescriptor.SetUmbrellaHeader(System.String)">
            <summary>
            Set Umbrella Header
            </summary>
            <param name="name">Umbrella Header Name</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangModuleMapDescriptor.WriteToBuffer(System.String@)">
            <summary>
            Write Out Module Map Descriptor To String
            </summary>
            <param name="out_str">Module Map Descriptor String</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangModuleMapDescriptor.Dispose">
            <summary>
            Dispose Module Map Descriptor
            </summary>
        </member>
        <member name="T:ClangNet.ClangVirtualFileOverlay">
            <summary>
            Managed Clang Virtual File Overlay
            </summary>
        </member>
        <member name="M:ClangNet.ClangVirtualFileOverlay.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Virtual File Overlay Pointer</param>
        </member>
        <member name="M:ClangNet.ClangVirtualFileOverlay.AddFileMapping(System.String,System.String)">
            <summary>
            Add File Mapping
            </summary>
            <param name="virtual_path">Virtual File Path</param>
            <param name="real_path">Real File Path</param>
            <returns>Erro rCode</returns>
        </member>
        <member name="M:ClangNet.ClangVirtualFileOverlay.SetCaseSensitivity(System.Int32)">
            <summary>
            Set Case Sensitivity
            </summary>
            <param name="case_sensitive">Case Sensitivity</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangVirtualFileOverlay.WriteToBuffer(System.String@)">
            <summary>
            Write Out Virtual File Overlay To String
            </summary>
            <param name="out_str">Virtual File Overlay String</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangVirtualFileOverlay.Dispose">
            <summary>
            Dispose Clang Virtual File Overlay
            </summary>
        </member>
        <member name="T:ClangNet.ClangCodeCompleteResults">
            <summary>
            Managed Clang Code Complete Results
            </summary>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.Source">
            <summary>
            Native Clang Code Complete Results
            </summary>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.ResultCount">
            <summary>
            Result Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.Results">
            <summary>
            Clang Completion Result List
            </summary>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i">Index</param>
            <returns>Clang Completion Result</returns>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.DiagnosticsCount">
            <summary>
            Diagnostics Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.Contexts">
            <summary>
            Completion Contexts
            </summary>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.ContainerUSR">
            <summary>
            Container USR
            </summary>
        </member>
        <member name="P:ClangNet.ClangCodeCompleteResults.ObjCSelector">
            <summary>
            Objective-C Selector
            </summary>
        </member>
        <member name="M:ClangNet.ClangCodeCompleteResults.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Code Complete Results Pointer</param>
        </member>
        <member name="M:ClangNet.ClangCodeCompleteResults.GetCompletionNumFixIts(System.Int32)">
            <summary>
            Get Number of Completion Fix Its
            </summary>
            <param name="completion_index">Completion Index</param>
            <returns>Completion Number of Fix Its</returns>
        </member>
        <member name="M:ClangNet.ClangCodeCompleteResults.GetCompletionFixIt(System.Int32,System.Int32,ClangNet.ClangSourceRange@)">
            <summary>
            Get Completion Fix It
            </summary>
            <param name="completion_index">Completion Index</param>
            <param name="fixit_index">Fix It Index</param>
            <param name="replacement_range">Replacement Clang Source Range</param>
            <returns>Completion Fix It</returns>
        </member>
        <member name="M:ClangNet.ClangCodeCompleteResults.Sort">
            <summary>
            Sort Clang Code Complete Results
            </summary>
        </member>
        <member name="M:ClangNet.ClangCodeCompleteResults.GetDiagnostic(System.Int32)">
            <summary>
            Get Clang Diagnostic
            </summary>
            <param name="index">Index</param>
            <returns>Clang Diagnostic</returns>
        </member>
        <member name="M:ClangNet.ClangCodeCompleteResults.GetContainerKind(System.Boolean@)">
            <summary>
            Get Container Cursor Kind
            </summary>
            <param name="is_incomplete">Incomplete Flag</param>
            <returns>Container Cursor Kind</returns>
        </member>
        <member name="M:ClangNet.ClangCodeCompleteResults.Dispose">
            <summary>
            Dispose Clang Code Complete Results
            </summary>
        </member>
        <member name="T:ClangNet.ClangCompletionChunk">
            <summary>
            Managed Clang Completion Chunk
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionChunk.Source">
            <summary>
            Native Clang Completion Chunk Pointer
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionChunk.Index">
            <summary>
            Index of Clang Completion Chunk
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionChunk.Kind">
            <summary>
            Completion Chunk Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionChunk.Text">
            <summary>
            Completion Chunk Text
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionChunk.CompletionString">
            <summary>
            Completion Chunk Clang Completion String
            </summary>
        </member>
        <member name="M:ClangNet.ClangCompletionChunk.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Completion Chunk Pointer</param>
            <param name="index">Index of Clang Completion Chunk</param>
        </member>
        <member name="T:ClangNet.ClangCompletionResult">
            <summary>
            Managed Clang Completion Result
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionResult.Source">
            <summary>
            Native Clang Completion Result
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionResult.CursorKind">
            <summary>
            Cursor Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionResult.CompletionString">
            <summary>
            Clang Completion String
            </summary>
        </member>
        <member name="M:ClangNet.ClangCompletionResult.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Completion Result Pointer</param>
        </member>
        <member name="T:ClangNet.ClangCompletionString">
            <summary>
             Managed Clang Completion String
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionString.ChunkCount">
            <summary>
            Clang Completion Chunk Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionString.Chunks">
            <summary>
            Clang Completion Chunks
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionString.Priority">
            <summary>
            Completion Priority
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionString.Availability">
            <summary>
            Completion Availability
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionString.AnnotationCount">
            <summary>
            Completion Annotation Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionString.Parent">
            <summary>
            Completion Parent
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompletionString.BriefComment">
            <summary>
            Completion Brief Comment
            </summary>
        </member>
        <member name="M:ClangNet.ClangCompletionString.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Completion String Pointer</param>
        </member>
        <member name="M:ClangNet.ClangCompletionString.GetAnnotation(System.Int32)">
            <summary>
            Get Completion Annotation
            </summary>
            <param name="index">Index</param>
            <returns>Completion Annotation</returns>
        </member>
        <member name="T:ClangNet.ClangCompilationDatabase">
            <summary>
            Managed Clang Compilation Database
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompilationDatabase.AllCompileCommands">
            <summary>
            All Clang Compile Commands
            </summary>
        </member>
        <member name="M:ClangNet.ClangCompilationDatabase.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Compilation Database Pointer</param>
        </member>
        <member name="M:ClangNet.ClangCompilationDatabase.GetCompileCommands(System.String)">
            <summary>
            Get Clang Compile Command
            </summary>
            <param name="complete_filename">Complete Filename</param>
            <returns>Clang Compile Command</returns>
        </member>
        <member name="M:ClangNet.ClangCompilationDatabase.Dispose">
            <summary>
            Dispose Clang Compilation Database
            </summary>
        </member>
        <member name="T:ClangNet.ClangCompileCommand">
            <summary>
            Managed Clang Compile Command
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompileCommand.Directory">
            <summary>
            Directory
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompileCommand.Filename">
            <summary>
            Filename
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompileCommand.ArgumentCount">
            <summary>
            Argument Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompileCommand.MappedSourceCount">
            <summary>
            Mapped Source Count
            </summary>
        </member>
        <member name="M:ClangNet.ClangCompileCommand.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Compile Command Pointer</param>
        </member>
        <member name="M:ClangNet.ClangCompileCommand.GetArgument(System.Int32)">
            <summary>
            Get Argument
            </summary>
            <param name="i">Index</param>
            <returns>Argument</returns>
        </member>
        <member name="M:ClangNet.ClangCompileCommand.GetMappedSourcePath(System.Int32)">
            <summary>
            Get Mapped Source Path
            </summary>
            <param name="i">Index</param>
            <returns>Mapped Source Path</returns>
        </member>
        <member name="M:ClangNet.ClangCompileCommand.GetMappedSourceContent(System.Int32)">
            <summary>
            Get Mapped Source Content
            </summary>
            <param name="i">Index</param>
            <returns>Mapped Source Content</returns>
        </member>
        <member name="T:ClangNet.ClangCompileCommands">
            <summary>
            Managed Clang Compile Commands
            </summary>
        </member>
        <member name="P:ClangNet.ClangCompileCommands.Count">
            <summary>
            Count of Clang Compile Command
            </summary>
        </member>
        <member name="M:ClangNet.ClangCompileCommands.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Compile Commands Pointer</param>
        </member>
        <member name="M:ClangNet.ClangCompileCommands.GetCommand(System.Int32)">
            <summary>
            Get Clang Compile Command
            </summary>
            <param name="i">Index</param>
            <returns>Clang Compile Command</returns>
        </member>
        <member name="M:ClangNet.ClangCompileCommands.Dispose">
            <summary>
            Dispose Clang Compile Commands
            </summary>
        </member>
        <member name="T:ClangNet.ClangPrintingPolicy">
            <summary>
            Managed Clang Printing Policy
            </summary>
        </member>
        <member name="M:ClangNet.ClangPrintingPolicy.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Printing Policy Pointer</param>
        </member>
        <member name="M:ClangNet.ClangPrintingPolicy.GetProperty(ClangNet.PrintingPolicyProperty)">
            <summary>
            Get Property
            </summary>
            <param name="property">Printing Policy Property</param>
            <returns>Property Value</returns>
        </member>
        <member name="M:ClangNet.ClangPrintingPolicy.SetProperty(ClangNet.PrintingPolicyProperty,System.UInt32)">
            <summary>
            Set Property
            </summary>
            <param name="property">Printing Policy Property</param>
            <param name="value">Property Value</param>
        </member>
        <member name="M:ClangNet.ClangPrintingPolicy.Dispose">
            <summary>
            Dispose Clang Printing Policy
            </summary>
        </member>
        <member name="T:ClangNet.ClangCursor">
            <summary>
            Managed Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Source">
            <summary>
            Native Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsNull">
            <summary>
            Null Cursor Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Kind">
            <summary>
            Cursor Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsInvalidDeclaration">
            <summary>
            Invalid Declaration Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.HasAttributes">
            <summary>
            Attributes Exists Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Linkage">
            <summary>
            Linkage
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Visibility">
            <summary>
            Visibility
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Availability">
            <summary>
            Availability
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.TLS">
            <summary>
            TLS(Thread Local Storage) Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.TranslationUnit">
            <summary>
            Clang Translation Unit
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.SemanticParent">
            <summary>
            Semantic Parent Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.LexicalParent">
            <summary>
            Lexical Parent Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.OverridenCursors">
            <summary>
            Overriden Clang Cursors
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IncludedFile">
            <summary>
            Included File
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Location">
            <summary>
            Clang Source Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Extent">
            <summary>
            Clang Source Range
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Type">
            <summary>
            Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.TypedefDeclUnderlyingType">
            <summary>
            Typedef Declaration Underlying Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.EnumDeclIntegerType">
            <summary>
            Enum Declaration Integer Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.EnumConstantDeclValue">
            <summary>
            Enum Constant Declaration Signed Value
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.EnumConstantDeclUnsignedValue">
            <summary>
            Enum Constant Declaration Unsigned Value
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.FieldDeclBitWidth">
            <summary>
            Field Declaration Bit Width
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ArgumentCount">
            <summary>
            Function or Method Argument Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.TemplateArgumentCount">
            <summary>
            Template Argument Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsMacroFunctionLike">
            <summary>
            Function Like Macro Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsMacroBuiltin">
            <summary>
            Builtin Macro Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsFunctionInlined">
            <summary>
            Inlined Function Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.DeclObjCTypeEncoding">
            <summary>
            Objective-C Type Declaration Encoding
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ResultType">
            <summary>
            Function Return Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ExceptionSpecificationType">
            <summary>
            Exception Specification Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.OffsetOfField">
            <summary>
            Offset of Field
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsAnonymous">
            <summary>
            Anonymous Tag or Namespace
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsAnonymousRecordDecl">
            <summary>
            Anonymous Record Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsInlineNamespace">
            <summary>
            Inline Namespace Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsBitField">
            <summary>
            Bit Field Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsVirtualBase">
            <summary>
            Virtual Base Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.CxxAccessSpecifier">
            <summary>
            C++ Access Specifier
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.StorageClass">
            <summary>
            Storage Class
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.OverloadedDeclCount">
            <summary>
            Overloaded Declaration Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IBOutletCollectionType">
            <summary>
            IBOutlet Collection Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.USR">
            <summary>
            USR(Unified Symbol Resolution)
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Spelling">
            <summary>
            Spelling
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.PrintingPolicy">
            <summary>
            Clang Printing Policy
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.DisplayName">
            <summary>
            Display Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Referenced">
            <summary>
            Referenced Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Definition">
            <summary>
            Definition Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsDefinition">
            <summary>
            Definition Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.CanonicalCursor">
            <summary>
            Canonical Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ObjCSelectorIndex">
            <summary>
            Objective-C Selector Index
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsDynamicCall">
            <summary>
            Dynamic Call Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ReceiverType">
            <summary>
            Receiver Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ObjCPropertyAttributes">
            <summary>
            Objective-C Property Attributes
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ObjCPropertyGetterName">
            <summary>
            Objective-C Property Getter Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ObjCPropertySetterName">
            <summary>
            Objective-C Property Setter Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ObjCDeclQualifiers">
            <summary>
            Objective-C Declaration Qualifiers
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsObjCOptional">
            <summary>
            Objective-C Optional Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsVariadic">
            <summary>
            Variadic Function or Method Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.CommentRange">
            <summary>
            Comment Clang Source Range
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.RawCommentText">
            <summary>
            Raw Comment Text
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.BriefComment">
            <summary>
            Brief Comment Text
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Mangling">
            <summary>
            Mangling
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.CXXManglings">
            <summary>
            C++ Manglings
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ObjCManglings">
            <summary>
            Objective-C Manglings
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Module">
            <summary>
            Clang Module
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsConvertingConstructor">
            <summary>
            Converting Constructor Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsCopyConstructor">
            <summary>
            Copy Constructor Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsDefaultConstructor">
            <summary>
            Default Constructor Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsMoveConstructor">
            <summary>
            Move Constructor Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsMutableField">
            <summary>
            Mutable Field Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsDefaultedMethod">
            <summary>
            Defaulted Method Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsPureVirtualMethod">
            <summary>
            Pure Virtual Method Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsStaticMethod">
            <summary>
            Static Method Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsVirtualMethod">
            <summary>
            Virtual Method Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsAbstractRecord">
            <summary>
            Abstract Record Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsScopedEnum">
            <summary>
            Scoped Enum Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.IsConstMethod">
            <summary>
            Const Method Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.TemplateCursorKind">
            <summary>
            Template Cursor Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.SpecializedCursorTemplate">
            <summary>
            Specialized Cursor Template Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.CompletionString">
            <summary>
            Clang Completion String
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.Evalulate">
            <summary>
            Clang Evaluation Result
            </summary>
        </member>
        <member name="P:ClangNet.ClangCursor.ParsedComment">
            <summary>
            Parsed Clang Comment
            </summary>
        </member>
        <member name="M:ClangNet.ClangCursor.#ctor(ClangNet.Native.CXCursor)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Cursor</param>
        </member>
        <member name="M:ClangNet.ClangCursor.GetPlatformAvailability(System.Boolean@,System.String@,System.Boolean@,System.String@)">
            <summary>
            Get Platform Availability
            </summary>
            <param name="is_always_deprecated">Always Deprecated Flag</param>
            <param name="deprecated_message">Deprecated Message</param>
            <param name="is_always_unavaiable">Always Unavailable Flag</param>
            <param name="unavailable_message">Unavailable Message</param>
            <returns>Clang Platform Availabilities</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetArgument(System.Int32)">
            <summary>
            Get Argument Clang Cursor
            </summary>
            <param name="i">Index</param>
            <returns>Argument Clang Cursor</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetTemplateArgumentKind(System.Int32)">
            <summary>
            Get Template Argument Kind
            </summary>
            <param name="i">Index</param>
            <returns>Template Argument Kind</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetTemplateArgumentType(System.Int32)">
            <summary>
            Get Template Argument Clang Type
            </summary>
            <param name="i">Index</param>
            <returns>Template Argument Clang Type</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetTemplateArgumentValue(System.Int32)">
            <summary>
            Get Template Argument Signed Value
            </summary>
            <param name="i">Index</param>
            <returns>Template Argument Signed Value</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetTemplateArgumentUnsignedValue(System.Int32)">
            <summary>
            Get Template Argument Unsigned Value
            </summary>
            <param name="i">Index</param>
            <returns>Template Argument Unsigned Value</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetOverloadedDecl(System.Int32)">
            <summary>
            Get Overloaded Declaration Clang Cursor
            </summary>
            <param name="i">Index</param>
            <returns>Overloaded Declaration Clang Cursor</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.VisitChildren``1(System.Func{ClangNet.ClangCursor,ClangNet.ClangCursor,``0,ClangNet.ChildVisitResult},``0)">
            <summary>
            Visit Children
            </summary>
            <typeparam name="T">Client Data Type</typeparam>
            <param name="visitor">Visitor</param>
            <param name="client_data">Client Data</param>
            <returns>Child Cursor Visit Result</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetSpellingNameRange(System.UInt32)">
            <summary>
            Get Spelling Name Clang Source Range
            </summary>
            <param name="piece_index">Piece Index</param>
            <returns>Spelling Name Clang Source Range</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetPrettyPrinted(ClangNet.ClangPrintingPolicy)">
            <summary>
            Get Pretty Printed String
            </summary>
            <param name="policy">Clang Printing Policy</param>
            <returns>Pretty Printed String</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.IsExternalSymbol(System.String@,System.String@,System.Boolean@)">
            <summary>
            Check Cursor is External Symbol
            </summary>
            <param name="language">Language</param>
            <param name="defined_in">Defined In</param>
            <param name="is_generated">Generated Flag</param>
            <returns>External Symbol Flag</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetCursorReferenceNameRange(ClangNet.NameRefFlags,System.Int32)">
            <summary>
            Cursor Reference Name Clang Source Range
            </summary>
            <param name="name_flags">Name Reference Flags</param>
            <param name="piece_index">Piece Index</param>
            <returns>Reference Name Clang Source Range</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetDefinitionSpellingAndExtent(System.String@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get Definition Spelling And Extent
            </summary>
            <param name="spelling">Definition Spelling</param>
            <param name="start_line">Start Line</param>
            <param name="start_col">Start Column</param>
            <param name="end_line">End Line</param>
            <param name="end_col">End Column</param>
        </member>
        <member name="M:ClangNet.ClangCursor.FindReferenceInFile(ClangNet.ClangFile,System.Func{System.Object,ClangNet.ClangCursor,ClangNet.ClangSourceRange,ClangNet.VisitorResult})">
            <summary>
            Find Referenced In File
            </summary>
            <param name="file">Clang File</param>
            <param name="visitor">Cursor And Range Visitor Function</param>
            <returns>Find Result</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.CreateCursorAndRangeVisitor(System.Func{System.Object,ClangNet.ClangCursor,ClangNet.ClangSourceRange,ClangNet.VisitorResult})">
            <summary>
            Create Native Cursor And Range Visitor
            </summary>
            <param name="visitor">Cursor And Range Visitor Function</param>
            <returns>Native Cursor And Range Visitor</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.EqualsCore(ClangNet.ClangCursor)">
            <summary>
            Check Equality
            </summary>
            <param name="other">Other Clang Cursor</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangCursor.GetHashCodeCore">
            <summary>
            Get Hash Code
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="T:ClangNet.ClangCursorSet">
            <summary>
            Managed Clang Cursor Set
            </summary>
        </member>
        <member name="M:ClangNet.ClangCursorSet.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Cursor Set Pointer</param>
        </member>
        <member name="M:ClangNet.ClangCursorSet.Containes(ClangNet.ClangCursor)">
            <summary>
            Check Contains Cursor
            </summary>
            <param name="cursor">Clang Cursor</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangCursorSet.Insert(ClangNet.ClangCursor)">
            <summary>
            Insert Cursor
            </summary>
            <param name="cursor">Clang Cursor</param>
            <returns>Insert Result</returns>
        </member>
        <member name="M:ClangNet.ClangCursorSet.Dispose">
            <summary>
            Dispose Clang Cursor Set
            </summary>
        </member>
        <member name="T:ClangNet.ClangPlatformAvailability">
            <summary>
            Managed Clang Platform Availability
            </summary>
        </member>
        <member name="P:ClangNet.ClangPlatformAvailability.Source">
            <summary>
            Native Clang Platform Availability
            </summary>
        </member>
        <member name="M:ClangNet.ClangPlatformAvailability.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Platform Availability Pointer</param>
        </member>
        <member name="M:ClangNet.ClangPlatformAvailability.Dispose">
            <summary>
            Dispose Clang Platform Availability
            </summary>
        </member>
        <member name="T:ClangNet.ClangCommandLineOptions">
            <summary>
            Clang Command Line Options
            </summary>
        </member>
        <member name="P:ClangNet.ClangCommandLineOptions.Enable">
            <summary>
            Enabled Options
            </summary>
        </member>
        <member name="P:ClangNet.ClangCommandLineOptions.Disable">
            <summary>
            Disabled Options
            </summary>
        </member>
        <member name="M:ClangNet.ClangCommandLineOptions.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="enable">Enabled Options</param>
            <param name="disable">Disabled Options</param>
        </member>
        <member name="T:ClangNet.ClangDiagnostic">
            <summary>
            Managed Clang Diagnostic
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.ChildDiagnostics">
            <summary>
            Child Diagnostic Set
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.Severity">
            <summary>
            Diagnostic Severity
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.Location">
            <summary>
            Diagnostic Clang Source Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.DiagnosticSpelling">
            <summary>
            Diagnostic Spelling
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.Options">
            <summary>
            Clang Command Line Options
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.Category">
            <summary>
            Clang Diagnostic Category
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.CategoryText">
            <summary>
            Diagnostic Category Text
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.RangeCount">
            <summary>
            Diagnostic Source Range Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnostic.FixItCount">
            <summary>
            Diagnostic Fix It Count
            </summary>
        </member>
        <member name="M:ClangNet.ClangDiagnostic.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Diagnostic Pointer</param>
        </member>
        <member name="M:ClangNet.ClangDiagnostic.FormatDiagnostic(ClangNet.DiagnosticDisplayOptions)">
            <summary>
            Format Diagnostic
            </summary>
            <param name="options">Diagnostic Display Options</param>
            <returns>Formated Diagnostic</returns>
        </member>
        <member name="M:ClangNet.ClangDiagnostic.FormatDiagnostic">
            <summary>
            Format Diagnostic by Default
            </summary>
            <returns>Formated Diagnostic</returns>
        </member>
        <member name="M:ClangNet.ClangDiagnostic.GetDiagnosticRange(System.Int32)">
            <summary>
            Get Diagnostic Clang Source Range
            </summary>
            <param name="index">Index</param>
            <returns>Diagnostic Clang Source Range</returns>
        </member>
        <member name="M:ClangNet.ClangDiagnostic.GetFixIt(System.Int32)">
            <summary>
            Get Diagnostic Clang Fix It
            </summary>
            <param name="index">Index</param>
            <returns>Diagnostic Clang Fix It</returns>
        </member>
        <member name="M:ClangNet.ClangDiagnostic.Dispose">
            <summary>
            Dispose Clang Diagnostic
            </summary>
        </member>
        <member name="T:ClangNet.ClangDiagnosticCategory">
            <summary>
            Managed Clang Diagnostic Category
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnosticCategory.Number">
            <summary>
            Diagnostic Category Number
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnosticCategory.Name">
            <summary>
            Diagnostic Catgory Name
            </summary>
        </member>
        <member name="M:ClangNet.ClangDiagnosticCategory.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="category">Diagnostic Category Number</param>
        </member>
        <member name="T:ClangNet.ClangDiagnosticSet">
            <summary>
            Managed Clang Diagnostic Set
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnosticSet.Count">
            <summary>
            Diagnostic Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnosticSet.Items">
            <summary>
            Clang Diagnostics
            </summary>
        </member>
        <member name="P:ClangNet.ClangDiagnosticSet.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i">Index</param>
            <returns>Clang Diagnostic</returns>
        </member>
        <member name="M:ClangNet.ClangDiagnosticSet.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Diagnostic Set Pointer</param>
        </member>
        <member name="M:ClangNet.ClangDiagnosticSet.Get(System.Int32)">
            <summary>
            Get Clang Diagnostic
            </summary>
            <param name="index">Index</param>
            <returns>Clang Diagnostic</returns>
        </member>
        <member name="M:ClangNet.ClangDiagnosticSet.Dispose">
            <summary>
            Dispose Clang Diagnostic Set
            </summary>
        </member>
        <member name="T:ClangNet.ClangFixIt">
            <summary>
            Managed Clang Fix It
            </summary>
        </member>
        <member name="P:ClangNet.ClangFixIt.ReplacementRange">
            <summary>
            Replacement Clang Source Range
            </summary>
        </member>
        <member name="P:ClangNet.ClangFixIt.ReplacementText">
            <summary>
            Replacement Text
            </summary>
        </member>
        <member name="M:ClangNet.ClangFixIt.#ctor(ClangNet.ClangSourceRange,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="replacement_range">Replacement Clang Source Range</param>
            <param name="replacement_text">Replacement Text</param>
        </member>
        <member name="T:ClangNet.ClangComment">
            <summary>
            Managed Clang Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.Source">
            <summary>
            Native Clang Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.Kind">
            <summary>
            Comment Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.ChildCount">
            <summary>
            Child Clang Comment Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.IsWhiteSpace">
            <summary>
            White Space Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.HasTrailingNewLine">
            <summary>
            Trailing New Line Exists Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.Text">
            <summary>
            Text of Text Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.InlineCommandName">
            <summary>
            Command Name of Inline Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.InlineCommandRenderKind">
            <summary>
            Inline Command Comment Render Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.InlineCommandArgumentCount">
            <summary>
            Argument Count of Inline Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.HtmlTagName">
            <summary>
            Tag Name of HTML Tag Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.IsHtmlStartTagSelfClosing">
            <summary>
            HTML Start Tag Comment Self Closing Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.HtmlStartTagAttributeCount">
            <summary>
            Attribute Count of HTML Start Tag Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.BlockCommandName">
            <summary>
            Command Name of Block Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.BlockCommandArgumentCount">
            <summary>
            Argument Count of Block Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.BlockCommandParagraph">
            <summary>
            Paragraph Clang Comment of Block Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.ParamCommandParamName">
            <summary>
            Parameter Name of Parameter Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.IsParamCommandParamIndexValid">
            <summary>
            Parameter Index of Parameter Command Comment Valid Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.ParamCommandParamIndex">
            <summary>
            Parameter Index of Parameter Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.IsParamCommandParamDirectionExplicit">
            <summary>
            Parameter Direction of Parameter Command Comment Explicit Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.ParamCommandDirection">
            <summary>
            Parameter Direction of Parameter Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.TemplateParamCommandParamName">
            <summary>
            Parameter Name of Template Parameter Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.IsTemplateParamCommandParamPositionValid">
            <summary>
            Parameter Position of Template Parameter Command Comment Valid Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.TemplateParamCommandDepth">
            <summary>
            Depth of Template Parameter Command Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.VerbatimeLineText">
            <summary>
            Text of Varbatim Line Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.HtmlTagAsString">
            <summary>
            HTML Tag Comment Text
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.FullCommentAsHtml">
            <summary>
            HTML Format Full Comment
            </summary>
        </member>
        <member name="P:ClangNet.ClangComment.FullCommentAsXml">
            <summary>
            XML Format Full Comment
            </summary>
        </member>
        <member name="M:ClangNet.ClangComment.#ctor(ClangNet.Native.CXComment)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Comment</param>
        </member>
        <member name="M:ClangNet.ClangComment.GetChild(System.Int32)">
            <summary>
            Get Child Clang Comment
            </summary>
            <param name="i">Index</param>
            <returns>Child Clang Comment</returns>
        </member>
        <member name="M:ClangNet.ClangComment.GetInlineCommandArgumentText(System.Int32)">
            <summary>
            Get Argument Text of Inline Command Comment
            </summary>
            <param name="i">Index</param>
            <returns>Argument Text</returns>
        </member>
        <member name="M:ClangNet.ClangComment.GetHtmlStartTagAttributeName(System.Int32)">
            <summary>
            Get Attribute Name of HTML Start Tag Comment
            </summary>
            <param name="i">Index</param>
            <returns>Attribute Name</returns>
        </member>
        <member name="M:ClangNet.ClangComment.GetHtmlStartTagAttributeValue(System.Int32)">
            <summary>
            Get Attribute Value of HTML Start Tag Comment
            </summary>
            <param name="i">Index</param>
            <returns>Attribute Value</returns>
        </member>
        <member name="M:ClangNet.ClangComment.GetBlockCommandArgumentText(System.Int32)">
            <summary>
            Get Argument Text of Block Command Comment
            </summary>
            <param name="i">Index</param>
            <returns>Argument Text</returns>
        </member>
        <member name="M:ClangNet.ClangComment.GetTemplateParamCommandIndex(System.Int32)">
            <summary>
            Get Index of Template Parameter Command Comment
            </summary>
            <param name="depth">Depth</param>
            <returns>Index</returns>
        </member>
        <member name="T:ClangNet.ClangServiceException">
            <summary>
            Clang Service Exception
            </summary>
        </member>
        <member name="M:ClangNet.ClangServiceException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:ClangNet.ClangServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="M:ClangNet.ClangServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error Message</param>
            <param name="inner_exception">Inner Exception</param>
        </member>
        <member name="T:ClangNet.ClangFile">
            <summary>
            Managed Clang File
            </summary>
        </member>
        <member name="P:ClangNet.ClangFile.FileName">
            <summary>
            File Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangFile.FileTime">
            <summary>
            File Last Modification Time
            </summary>
        </member>
        <member name="P:ClangNet.ClangFile.FileUniqueId">
            <summary>
            Clang File Unique ID
            </summary>
        </member>
        <member name="M:ClangNet.ClangFile.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang File Pointer</param>
        </member>
        <member name="M:ClangNet.ClangFile.TryGetRealPathName">
            <summary>
            Try Get Real Path Name
            </summary>
            <returns>Real Path Name</returns>
        </member>
        <member name="M:ClangNet.ClangFile.ToString">
            <summary>
            Convert to String
            </summary>
            <returns>File Name</returns>
        </member>
        <member name="T:ClangNet.ClangFileUniqueId">
            <summary>
            Managed Clang File Unique ID
            </summary>
        </member>
        <member name="P:ClangNet.ClangFileUniqueId.Source">
            <summary>
            Native Clang File Unique ID
            </summary>
        </member>
        <member name="M:ClangNet.ClangFileUniqueId.#ctor(ClangNet.Native.CXFileUniqueID)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang File Unique ID</param>
        </member>
        <member name="M:ClangNet.ClangFileUniqueId.ToString">
            <summary>
            Convert to String
            </summary>
            <returns>File Unique ID Data</returns>
        </member>
        <member name="M:ClangNet.ClangFileUniqueId.EqualsCore(ClangNet.ClangFileUniqueId)">
            <summary>
            Check Equality
            </summary>
            <param name="other">Other Clang File Unique ID</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangFileUniqueId.GetHashCodeCore">
            <summary>
            Get Hash Code
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="T:ClangNet.ClangUnsavedFile">
            <summary>
            Managed Clang Unsaved File
            </summary>
        </member>
        <member name="P:ClangNet.ClangUnsavedFile.FileName">
            <summary>
            File Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangUnsavedFile.Contents">
            <summary>
            Contents
            </summary>
        </member>
        <member name="P:ClangNet.ClangUnsavedFile.Length">
            <summary>
            Contents Length
            </summary>
        </member>
        <member name="M:ClangNet.ClangUnsavedFile.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">File Name</param>
            <param name="contents">Contents</param>
        </member>
        <member name="T:ClangNet.Clang">
            <summary>
            Clang Services
            </summary>
        </member>
        <member name="M:ClangNet.Clang.CreateIndex(System.Boolean,System.Boolean)">
            <summary>
            Create Clang Index
            </summary>
            <param name="exclude_declarations_from_pch">Exclude Declarations From PCH Flag</param>
            <param name="display_diagnostics">Display Diagnostics Flag</param>
            <returns>Clang Index</returns>
        </member>
        <member name="M:ClangNet.Clang.GetNullLocation">
            <summary>
            Get Null Clang Source Location
            </summary>
            <returns>Null Clang Source Location</returns>
        </member>
        <member name="M:ClangNet.Clang.GetNullRange">
            <summary>
            Get Null Clang Source Range
            </summary>
            <returns>Null Clang Source Range</returns>
        </member>
        <member name="M:ClangNet.Clang.LoadDiagnositics(System.String)">
            <summary>
            Load Clang Diagnostics File
            </summary>
            <param name="file">Clang Diagnostics Bitcode File Name</param>
            <returns>Clang Diagnostics Set</returns>
        </member>
        <member name="M:ClangNet.Clang.GetDefaultDiagnosticDisplayOptions">
            <summary>
            Get Default Diagnostic Display Options
            </summary>
            <returns>Diagnostic Display Options</returns>
        </member>
        <member name="M:ClangNet.Clang.GetNullCursor">
            <summary>
            Get Null Clang Cursor
            </summary>
            <returns>Null Clang Cursor</returns>
        </member>
        <member name="M:ClangNet.Clang.CreateCursorSet">
            <summary>
            Create Clang Cursor Set
            </summary>
            <returns>Clang Cursor Set</returns>
        </member>
        <member name="M:ClangNet.Clang.ConstructUSRObjCClass(System.String)">
            <summary>
            Construct USR of Objective-C Class
            </summary>
            <param name="class_name">Class Name</param>
            <returns>USR of Objective-C Class</returns>
        </member>
        <member name="M:ClangNet.Clang.ConstructUSRObjCCategory(System.String,System.String)">
            <summary>
            Construct USR of Objective-C Category
            </summary>
            <param name="class_name">Class Name</param>
            <param name="category_name">Category Name</param>
            <returns>USR of Objective-C Category</returns>
        </member>
        <member name="M:ClangNet.Clang.ConstructUSRObjCProtocol(System.String)">
            <summary>
            Construct USR of Objective-C Protocol
            </summary>
            <param name="protocol_name">Protocol Name</param>
            <returns>USR of Objective-C Protocol</returns>
        </member>
        <member name="M:ClangNet.Clang.ConstructUSRObjCIVar(System.String,System.String)">
            <summary>
            Construct USR of Objective-C IVar(Instance Variable)
            </summary>
            <param name="class_name">Class Name</param>
            <param name="name">IVar Name</param>
            <returns>USR of Objective-C IVar</returns>
        </member>
        <member name="M:ClangNet.Clang.ConstructUSRObjCMethod(System.String,System.String,System.Boolean)">
            <summary>
            Construct USR of Objective-C Method
            </summary>
            <param name="class_name">Class Name</param>
            <param name="name">Method Name</param>
            <param name="is_instance_method">Instance Method Flag</param>
            <returns>USR of Objective-C Method</returns>
        </member>
        <member name="M:ClangNet.Clang.ConstructUSRObjCProperty(System.String,System.String)">
            <summary>
            Construct USR of Objective-C Property
            </summary>
            <param name="class_name">Class Name</param>
            <param name="property">Property Name</param>
            <returns>USR of Objective-C Property</returns>
        </member>
        <member name="M:ClangNet.Clang.EnableStackTraces">
            <summary>
            Enable Stack Traces
            </summary>
        </member>
        <member name="M:ClangNet.Clang.ExecuteOnThread(System.Action{System.IntPtr},System.IntPtr,System.Int32)">
            <summary>
            Execute Function On Thread
            </summary>
            <param name="func">Function</param>
            <param name="user_data">Native User Data Pointer</param>
            <param name="stack_size">Stack Size</param>
        </member>
        <member name="M:ClangNet.Clang.GetDefaultCodeCompleteOptions">
            <summary>
            Get Default Code Complete Options
            </summary>
            <returns>Default Code Complete Options</returns>
        </member>
        <member name="M:ClangNet.Clang.GetClangVersion">
            <summary>
            Get Clang Version
            </summary>
            <returns>Clang Version</returns>
        </member>
        <member name="M:ClangNet.Clang.ToggleCrashRecovery(System.Boolean)">
            <summary>
            Toggle Crash Recovery Mode
            </summary>
            <param name="is_enabled">Enabled Flag</param>
        </member>
        <member name="M:ClangNet.Clang.GetRemappings(System.String)">
            <summary>
            Get Clang Remappings from File
            </summary>
            <param name="path">Remappings Metadata Path</param>
            <returns>Clang Remapping</returns>
        </member>
        <member name="M:ClangNet.Clang.GetRemappings(System.String[])">
            <summary>
            Get Clang Remappings from File List
            </summary>
            <param name="file_paths">Remappings Metadata Path List</param>
            <returns>Clang Remapping</returns>
        </member>
        <member name="M:ClangNet.Clang.CreateCompilationDatabaseFromDirectory(System.String)">
            <summary>
            Create Clang Compilation Database from Directory
            </summary>
            <param name="build_dir">Build Directory</param>
            <returns>Clang Compilation Database</returns>
        </member>
        <member name="M:ClangNet.Clang.GetBuildSessionTimestamp">
            <summary>
            Get Build Session Time Stamp
            </summary>
            <returns>Build Session Time Stamp</returns>
        </member>
        <member name="M:ClangNet.Clang.CreateVirtualFileOverlay">
            <summary>
            Create Clang Virtual File Overlay
            </summary>
            <returns>Clang Virtual File Overlay</returns>
        </member>
        <member name="M:ClangNet.Clang.CreateModuleMapDescriptor">
            <summary>
            Create Clang Module Map Descriptor
            </summary>
            <returns>Clang Module Map Descriptor</returns>
        </member>
        <member name="T:ClangNet.ClangIndexAttributeInfo">
            <summary>
            Managed Clang Index Attribute Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexAttributeInfo.Info">
            <summary>
            Native Clang Index Attribute Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexAttributeInfo.Kind">
            <summary>
            Index Attribute Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexAttributeInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexAttributeInfo.Location">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexAttributeInfo.IBOutletCollectionAttribute">
            <summary>
            Clang IBOutlet Collection Attribute Info
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexAttributeInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Attribute Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexBaseClassInfo">
            <summary>
            Managed Clang Index Base Class Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexBaseClassInfo.Info">
            <summary>
            Native Clang Index Base Class Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexBaseClassInfo.Base">
            <summary>
            Base Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexBaseClassInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexBaseClassInfo.Location">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexBaseClassInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Base Class Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexClientASTFile">
            <summary>
            Managed Clang Index Client AST File
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexClientASTFile.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Client AST File Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexClientContainer">
            <summary>
            Managed Clang Index Client Container
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexClientContainer.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Client Container Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexClientEntity">
            <summary>
            Managed Clang Index Client Entity
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexClientEntity.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Client Entity Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexClientFile">
            <summary>
            Managed Clang Index Client File
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexClientFile.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Client File Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexContainerInfo">
            <summary>
            Managed Clang Index Container Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexContainerInfo.Info">
            <summary>
            Native Clang Index Container Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexContainerInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexContainerInfo.ClientContainer">
            <summary>
            Clang Index Client Container
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexContainerInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Container Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexCxxClassDeclarationInfo">
            <summary>
            Managed Clang Index C++ Class Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexCxxClassDeclarationInfo.Info">
            <summary>
            Native Clang Index C++ Class Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexCxxClassDeclarationInfo.Declaration">
            <summary>
            Clang Index Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexCxxClassDeclarationInfo.BaseCount">
            <summary>
            Base Class Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexCxxClassDeclarationInfo.Bases">
            <summary>
            Clang Index Base Class Info List
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexCxxClassDeclarationInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index C++ Class Declaration Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexDeclarationInfo">
            <summary>
            Managed Clang Index Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.Info">
            <summary>
            Native Clang Index Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.Entity">
            <summary>
            Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.Location">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.SemanticContainer">
            <summary>
            Semantic Clang Index Container Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.LexicalContainer">
            <summary>
            Lexical Clang Index Container Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.IsRedeclaration">
            <summary>
            Redeclaration Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.IsDefinition">
            <summary>
            Definition Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.IsContainer">
            <summary>
            Container Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.DeclarationAsContainer">
            <summary>
            Declaration Clang Index Container Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.IsImplicit">
            <summary>
            Implicit Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.AttributeCount">
            <summary>
            Attribute Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.Attributes">
            <summary>
            Clang Index Attribute Info List
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.ObjCContainerDeclaration">
            <summary>
            Clang Index Objective-C Container Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.ObjCInterfaceDeclaration">
            <summary>
            Clang Index Objective-C Interface Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.ObjCCategoryDeclaration">
            <summary>
            Clang Index Objective-C Category Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.ObjCProtocolReferenceList">
            <summary>
            Clang Index Objective-C Protocol Reference List Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.ObjCPropertyDeclaration">
            <summary>
            Clang Index Objective-C Property Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexDeclarationInfo.CxxClassDeclaration">
            <summary>
            Clang Index C++ Class Declaration Info
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexDeclarationInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Declaration Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexEntityInfo">
            <summary>
            Managed Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.Info">
            <summary>
            Native Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.Kind">
            <summary>
            Index Entity Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.CxxTemplateKind">
            <summary>
            Index Entity C++ Template Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.Language">
            <summary>
            Index Entity Lanagage
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.USR">
            <summary>
            USR
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.AttributeCount">
            <summary>
            Attribute Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.Attributes">
            <summary>
            Clang Index Attribute Info List
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityInfo.ClientEntity">
            <summary>
            Clang Index Client Entity
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexEntityInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Entity Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexEntityReferenceInfo">
            <summary>
            Managed Clang Index Entity Reference Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.Info">
            <summary>
            Native Clang Index Entity Reference Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.Kind">
            <summary>
            Index Entity Reference Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.Location">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.ReferencedEntity">
            <summary>
            Referenced Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.ParentEntity">
            <summary>
            Parent Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.Container">
            <summary>
            Clang Index Container Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexEntityReferenceInfo.Role">
            <summary>
            Symbol Role
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexEntityReferenceInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Entity Reference Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexFileLocation">
            <summary>
            Managed Clang Index File Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexFileLocation.IndexClientFile">
            <summary>
            Clang Index Client File
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexFileLocation.#ctor(ClangNet.ClangIndexClientFile,ClangNet.ClangFile,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="index_client_file">Clang Index Client File</param>
            <param name="file">Clang File</param>
            <param name="line">Line</param>
            <param name="column">Column</param>
            <param name="offset">Offset</param>
        </member>
        <member name="T:ClangNet.ClangIndexIBOutletCollectionAttributeInfo">
            <summary>
            Managed Clang Index IBOutlet Collection Attribute Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIBOutletCollectionAttributeInfo.Info">
            <summary>
            Native Clang Index IBOutlet Collection Attribute Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIBOutletCollectionAttributeInfo.Attribute">
            <summary>
            Clang Index Attribute Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIBOutletCollectionAttributeInfo.ObjCClass">
            <summary>
            Objective-C Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIBOutletCollectionAttributeInfo.ClassCursor">
            <summary>
            Class Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIBOutletCollectionAttributeInfo.ClassLocation">
            <summary>
            Class Clang Index Location
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexIBOutletCollectionAttributeInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index IBOutlet Collection Attribute Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexImportedASTFileInfo">
            <summary>
            Managed Clang Index Imporeted AST File Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexImportedASTFileInfo.Info">
            <summary>
            Native Clang Index Imporeted AST File Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexImportedASTFileInfo.File">
            <summary>
            Clang File
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexImportedASTFileInfo.Module">
            <summary>
            Clang Module
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexImportedASTFileInfo.Location">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexImportedASTFileInfo.IsImplicit">
            <summary>
            Implicit Flag
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexImportedASTFileInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Imporeted AST File Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexIncludedFileInfo">
            <summary>
            Managed Clang Index Included File Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIncludedFileInfo.Info">
            <summary>
            Native Clang Index Included File Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIncludedFileInfo.HashLocation">
            <summary>
            Hash Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIncludedFileInfo.Filename">
            <summary>
            File Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIncludedFileInfo.File">
            <summary>
            Clang File
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIncludedFileInfo.IsImport">
            <summary>
            Import Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIncludedFileInfo.IsAngled">
            <summary>
            Angled Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexIncludedFileInfo.IsModuleImport">
            <summary>
            Module Import Flag
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexIncludedFileInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Included File Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexInfo">
            <summary>
            Managed Clang Index Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexInfo.Address">
            <summary>
            Native Clang Index Info Address
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexLocation">
            <summary>
            Managed Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexLocation.Source">
            <summary>
            Native Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexLocation.SourceLocation">
            <summary>
            Clang Source Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexLocation.FileLocation">
            <summary>
            Clang Index File Location
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexLocation.#ctor(ClangNet.Native.CXIdxLoc)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Index Location</param>
        </member>
        <member name="T:ClangNet.ClangIndexObjCCategoryDeclarationInfo">
            <summary>
            Managed Clang Index Objective-C Category Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCCategoryDeclarationInfo.Info">
            <summary>
            Native Clang Index Objective-C Category Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCCategoryDeclarationInfo.Container">
            <summary>
            Clang Index Objective-C Container Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCCategoryDeclarationInfo.ObjCClass">
            <summary>
            Objective-C Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCCategoryDeclarationInfo.ClassCursor">
            <summary>
            Class Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCCategoryDeclarationInfo.ClassLocation">
            <summary>
            Class Clang Index Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCCategoryDeclarationInfo.ProtocolReferenceList">
            <summary>
            Clang Index Objective-C Protocol Reference List Info
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexObjCCategoryDeclarationInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Objective-C Category Declaration Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexObjCContainerDeclarationInfo">
            <summary>
            Managed Clang Index Objective-C Container Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCContainerDeclarationInfo.Info">
            <summary>
            Native Clang Index Objective-C Container Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCContainerDeclarationInfo.Declaration">
            <summary>
            Clang Index Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCContainerDeclarationInfo.Kind">
            <summary>
            Index Objective-C Container Kind
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexObjCContainerDeclarationInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Objective-C Container Declaration Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexObjCInterfaceDeclarationInfo">
            <summary>
            Managed Clang Index Objective-C Interface Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCInterfaceDeclarationInfo.Info">
            <summary>
            Native Clang Index Objective-C Interface Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCInterfaceDeclarationInfo.Container">
            <summary>
            Clang Index Objective-C Container Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCInterfaceDeclarationInfo.Super">
            <summary>
            Super Class Clang Index Base Class Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCInterfaceDeclarationInfo.ProtocolReferenceList">
            <summary>
            Clang Index Objective-C Protocol Reference List Info
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexObjCInterfaceDeclarationInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Objective-C Interface Declaration Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexObjCPropertyDeclarationInfo">
            <summary>
            Managed Clang Index Objective-C Property Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCPropertyDeclarationInfo.Info">
            <summary>
            Native Clang Index Objective-C Property Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCPropertyDeclarationInfo.Declaration">
            <summary>
            Clang Index Declaration Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCPropertyDeclarationInfo.Getter">
            <summary>
            Getter Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCPropertyDeclarationInfo.Setter">
            <summary>
            Setter Clang Index Entity Info
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexObjCPropertyDeclarationInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Objective-C Property Declaration Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexObjCProtocolReferenceInfo">
            <summary>
            Managed Clang Index Objective-C Protocol Reference Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCProtocolReferenceInfo.Info">
            <summary>
            Native Clang Index Objective-C Protocol Reference Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCProtocolReferenceInfo.Base">
            <summary>
            Base Clang Index Entity Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCProtocolReferenceInfo.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCProtocolReferenceInfo.Location">
            <summary>
            Clang Index Location
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexObjCProtocolReferenceInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Objective-C Protocol Reference Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndexObjCProtocolReferenceListInfo">
            <summary>
            Managed Clang Index Objective-C Protocol Reference List Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCProtocolReferenceListInfo.Info">
            <summary>
            Native Clang Index Objective-C Protocol Reference List Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCProtocolReferenceListInfo.ProtocolCount">
            <summary>
            Protocol Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndexObjCProtocolReferenceListInfo.Protocols">
            <summary>
            Protocol Clang Index Attribute Info List
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexObjCProtocolReferenceListInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="address">Native Clang Index Objective-C Protocol Reference List Info Address</param>
        </member>
        <member name="T:ClangNet.ClangIndex">
            <summary>
            Managed Clang Index
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndex.GlobalOptionFlags">
            <summary>
            Global Option Flags
            </summary>
        </member>
        <member name="P:ClangNet.ClangIndex.InvocationEmissionPathOption">
            <summary>
            Invocation Emission Path Option
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndex.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Index Pointer</param>
        </member>
        <member name="M:ClangNet.ClangIndex.CreateTranslationUnitFromSourceFile(System.String,System.String[],ClangNet.ClangUnsavedFile[])">
            <summary>
            Create Clang Transaltion Unit from Source File
            </summary>
            <param name="source_filename">Source File Name</param>
            <param name="command_line_args">Command Line Arguments</param>
            <param name="unsaved_files">Clang Unsaved Files</param>
            <returns>Clang Translation Unit</returns>
        </member>
        <member name="M:ClangNet.ClangIndex.CreateTranslationUnit(System.String)">
            <summary>
            Create Clang Translation Unit
            </summary>
            <param name="ast_filename">AST File Name</param>
            <returns>Clang Translation Unit</returns>
        </member>
        <member name="M:ClangNet.ClangIndex.CreateTranslationUnit(System.String,ClangNet.ClangTranslationUnit@)">
            <summary>
            Create Clang Translation Unit
            </summary>
            <param name="ast_filename">AST File Name</param>
            <param name="out_tu">Clang Translation Unit</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangIndex.ParseTranslationUnit(System.String,System.String[],ClangNet.ClangUnsavedFile[],ClangNet.TranslationUnitFlags)">
            <summary>
            Parse Clang Translation Unit
            </summary>
            <param name="source_filename">Source File Name</param>
            <param name="command_line_args">Command Line Arguments</param>
            <param name="unsaved_files">Clang Unsaved Files</param>
            <param name="options">Translation Unit Parse Options</param>
            <returns>Clang Translation Unit</returns>
        </member>
        <member name="M:ClangNet.ClangIndex.ParseTranslationUnit(System.String,System.String[],ClangNet.ClangUnsavedFile[],ClangNet.TranslationUnitFlags,ClangNet.ClangTranslationUnit@)">
            <summary>
            Parse Clang Translation Unit
            </summary>
            <param name="source_filename">Source File Name</param>
            <param name="command_line_args">Command Line Arguments</param>
            <param name="unsaved_files">Clang Unsaved Files</param>
            <param name="options">Translation Unit Parse Options</param>
            <param name="out_tu">Clang Translation Unit</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangIndex.ParseTranslationUnitFullArgv(System.String,System.String[],ClangNet.ClangUnsavedFile[],ClangNet.TranslationUnitFlags,ClangNet.ClangTranslationUnit@)">
            <summary>
            Parse Clang Translation Unit with Full Argument Variables
            </summary>
            <param name="source_filename">Source File Name</param>
            <param name="command_line_args">Command Line Arguments</param>
            <param name="unsaved_files">Clang Unsaved Files</param>
            <param name="options">Translation Unit Parse Options</param>
            <param name="out_tu">Clang Translation Unit</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangIndex.CreateIndexAction">
            <summary>
            Create Clang Index Action
            </summary>
            <returns>Clang Index Action</returns>
        </member>
        <member name="M:ClangNet.ClangIndex.Dispose">
            <summary>
            Dispose Clang Index
            </summary>
        </member>
        <member name="T:ClangNet.ClangIndexAction">
            <summary>
            Managed Clang Index Action
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexAction.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Index Action Pointer</param>
        </member>
        <member name="M:ClangNet.ClangIndexAction.IndexSourceFile(System.IntPtr,ClangNet.ClangIndexerCallbacks[],ClangNet.IndexOptionFlags,System.String,System.String[],ClangNet.ClangUnsavedFile[],ClangNet.ClangTranslationUnit@,ClangNet.TranslationUnitFlags)">
            <summary>
            Index Source File
            </summary>
            <param name="client_data">Native Client Data Pointer</param>
            <param name="index_callbacks">Clang Indexer Callbacks</param>
            <param name="options">Index Option Flags</param>
            <param name="source_filename">Source File Name</param>
            <param name="command_line_args">Command Line Arguments</param>
            <param name="unsaved_files">Clang Unsaved Files</param>
            <param name="out_tu">Clang Translation Unit</param>
            <param name="tu_options">Translation Unit Parse Options</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangIndexAction.IndexSourceFileFullArgv(System.IntPtr,ClangNet.ClangIndexerCallbacks[],ClangNet.IndexOptionFlags,System.String,System.String[],ClangNet.ClangUnsavedFile[],ClangNet.ClangTranslationUnit@,ClangNet.TranslationUnitFlags)">
            <summary>
            Index Source File with Full Argument Variables
            </summary>
            <param name="client_data">Native Client Data Pointer</param>
            <param name="index_callbacks">Clang Indexer Callbacks</param>
            <param name="options">Index Option Flags</param>
            <param name="source_filename">Source File Name</param>
            <param name="command_line_args">Command Line Arguments</param>
            <param name="unsaved_files">Clang Unsaved Files</param>
            <param name="out_tu">Clang Translation Unit</param>
            <param name="tu_options">Translation Unit Parse Options</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangIndexAction.IndexTranslationUnit(System.IntPtr,ClangNet.ClangIndexerCallbacks[],ClangNet.IndexOptionFlags,ClangNet.ClangTranslationUnit)">
            <summary>
            Index Clang Translation Unit
            </summary>
            <param name="client_data">Native Client Data Pointer</param>
            <param name="index_callbacks">Clang Indexer Callbacks</param>
            <param name="options">Index Option Flags</param>
            <param name="tu">Clang Transaltion Unit</param>
            <returns>Error Code</returns>
        </member>
        <member name="M:ClangNet.ClangIndexAction.Dispose">
            <summary>
            Dispose Clang Index Action
            </summary>
        </member>
        <member name="T:ClangNet.ClangIndexerCallbacks">
            <summary>
            Managed Clang Indexer Callbacks
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.AbortQuery">
            <summary>
            Abort Query Event
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.Diagnostic">
            <summary>
            Diagnostic Event
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.EnteredMainFile">
            <summary>
            Entered Main File Event
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.PreprocessIncludedFile">
            <summary>
            Preprocess Included File Event
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.ImportedASTFile">
            <summary>
            Imported AST File Event
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.StartedTranslationUnit">
            <summary>
            Started Translation Unit Event
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.IndexDeclaration">
            <summary>
            Index Declaration Event
            </summary>
        </member>
        <member name="E:ClangNet.ClangIndexerCallbacks.IndexEntityReference">
            <summary>
            Index Entity Reference Event
            </summary>
        </member>
        <member name="M:ClangNet.ClangIndexerCallbacks.ToNative">
            <summary>
            Convert to Native Clang Indexer Calbacks
            </summary>
            <returns>Native Clang Indexer Calbacks</returns>
        </member>
        <member name="T:ClangNet.ClangEvaluationResult">
            <summary>
            Managed Clang Evaluation Result
            </summary>
        </member>
        <member name="P:ClangNet.ClangEvaluationResult.Kind">
            <summary>
            Evaluation Result Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangEvaluationResult.AsInt">
            <summary>
            Integer Evaluation Result Value
            </summary>
        </member>
        <member name="P:ClangNet.ClangEvaluationResult.AsLong">
            <summary>
            Long Evaluation Result Value
            </summary>
        </member>
        <member name="P:ClangNet.ClangEvaluationResult.IsUnsignedInt">
            <summary>
            Unsigned Integer Evaluation Result Value
            </summary>
        </member>
        <member name="P:ClangNet.ClangEvaluationResult.AsUnsignedLong">
            <summary>
            Unsigned Long Evaluation Result Value
            </summary>
        </member>
        <member name="P:ClangNet.ClangEvaluationResult.AsDouble">
            <summary>
            Dobule Evaluation Result Value
            </summary>
        </member>
        <member name="P:ClangNet.ClangEvaluationResult.AsString">
            <summary>
            String Evaluation Result Value
            </summary>
        </member>
        <member name="M:ClangNet.ClangEvaluationResult.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Evaluation Result Pointer</param>
        </member>
        <member name="M:ClangNet.ClangEvaluationResult.Dispose">
            <summary>
            Dispose Clang Evaluation Result
            </summary>
        </member>
        <member name="T:ClangNet.ClangModule">
            <summary>
            Managed Clang Module
            </summary>
        </member>
        <member name="P:ClangNet.ClangModule.ASTFile">
            <summary>
            AST Clang File
            </summary>
        </member>
        <member name="P:ClangNet.ClangModule.Parent">
            <summary>
            Parent Clang Module
            </summary>
        </member>
        <member name="P:ClangNet.ClangModule.Name">
            <summary>
            Module Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangModule.FullName">
            <summary>
            Module Full Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangModule.IsSystem">
            <summary>
            System Module Flag
            </summary>
        </member>
        <member name="M:ClangNet.ClangModule.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Module Pointer</param>
        </member>
        <member name="T:ClangNet.ClangFileNameMap">
            <summary>
            Managed Clang File Map
            </summary>
        </member>
        <member name="P:ClangNet.ClangFileNameMap.Original">
            <summary>
            Original File Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangFileNameMap.Transformed">
            <summary>
            Transformed File Name
            </summary>
        </member>
        <member name="M:ClangNet.ClangFileNameMap.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="original">Original File Name</param>
            <param name="transformed">Transformed File Name</param>
        </member>
        <member name="T:ClangNet.ClangRemapping">
            <summary>
            Managed Clang Remapping
            </summary>
        </member>
        <member name="P:ClangNet.ClangRemapping.FileCount">
            <summary>
            File Count
            </summary>
        </member>
        <member name="M:ClangNet.ClangRemapping.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Remapping Pointer</param>
        </member>
        <member name="M:ClangNet.ClangRemapping.GetFileNames(System.Int32)">
            <summary>
            Get File Name Map
            </summary>
            <param name="index">Index</param>
            <returns>Clang File Name Map</returns>
        </member>
        <member name="M:ClangNet.ClangRemapping.Dispose">
            <summary>
            Dispose Clang Remapping
            </summary>
        </member>
        <member name="T:ClangNet.ClangLocation">
            <summary>
            Managed Abstract Clang Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangLocation.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="P:ClangNet.ClangLocation.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="M:ClangNet.ClangLocation.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="line">Line</param>
            <param name="column">Column</param>
        </member>
        <member name="T:ClangNet.ClangLogicalLocation">
            <summary>
            Managed Clang Logical Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangLogicalLocation.FileName">
            <summary>
            File Name
            </summary>
        </member>
        <member name="M:ClangNet.ClangLogicalLocation.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="file_name">File Name</param>
            <param name="line">Line</param>
            <param name="column">Column</param>
        </member>
        <member name="M:ClangNet.ClangLogicalLocation.ToString">
            <summary>
            Convert to String
            </summary>
            <returns>Logical Location</returns>
        </member>
        <member name="T:ClangNet.ClangPhysicalLocation">
            <summary>
            Managed Clang Physical Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangPhysicalLocation.File">
            <summary>
            Clang File
            </summary>
        </member>
        <member name="P:ClangNet.ClangPhysicalLocation.Offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="M:ClangNet.ClangPhysicalLocation.#ctor(ClangNet.ClangFile,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="file">Clang File</param>
            <param name="line">Line</param>
            <param name="column">Column</param>
            <param name="offset">Offset</param>
        </member>
        <member name="M:ClangNet.ClangPhysicalLocation.ToString">
            <summary>
            Convert to String
            </summary>
            <returns>Physical Location</returns>
        </member>
        <member name="T:ClangNet.ClangSourceLocation">
            <summary>
            Managed Clang Source Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.Source">
            <summary>
            Native Clang Source Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.IsInSystemHeader">
            <summary>
            In System Header Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.IsFromMainFile">
            <summary>
            From Main File Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.ExpansionLocation">
            <summary>
            Expansion Clang Physical Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.PresumedLocation">
            <summary>
            Presumed Clang Logical Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.InstantiationLocation">
            <summary>
            Instantiation Clang Physical Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.SpellingLocation">
            <summary>
            Spelling Clang Physical Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceLocation.FileLocation">
            <summary>
            File Clang Physical Location
            </summary>
        </member>
        <member name="M:ClangNet.ClangSourceLocation.#ctor(ClangNet.Native.CXSourceLocation)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Source Location</param>
        </member>
        <member name="M:ClangNet.ClangSourceLocation.Equals(System.Object)">
            <summary>
            Check Equality
            </summary>
            <param name="obj">Object</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceLocation.Equals(ClangNet.ClangSourceLocation)">
            <summary>
            Check Equality
            </summary>
            <param name="other">Other Clang Source Location</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceLocation.op_Equality(ClangNet.ClangSourceLocation,ClangNet.ClangSourceLocation)">
            <summary>
            Check Equality
            </summary>
            <param name="o1">Clang Source Location 1</param>
            <param name="o2">Clang Source Location 2</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceLocation.op_Inequality(ClangNet.ClangSourceLocation,ClangNet.ClangSourceLocation)">
            <summary>
            Check Not Equality
            </summary>
            <param name="o1">Clang Source Location 1</param>
            <param name="o2">Clang Source Location 2</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceLocation.GetHashCode">
            <summary>
            Get Hash Code
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="T:ClangNet.ClangSourceRange">
            <summary>
            Managed Clang Source Range
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRange.Source">
            <summary>
            Native Clang Source Range
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRange.IsNull">
            <summary>
            Null Source Range Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRange.Start">
            <summary>
            Start Clang Source Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRange.End">
            <summary>
            End Clang Source Location
            </summary>
        </member>
        <member name="M:ClangNet.ClangSourceRange.#ctor(ClangNet.Native.CXSourceRange)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Source Range</param>
        </member>
        <member name="M:ClangNet.ClangSourceRange.Equals(System.Object)">
            <summary>
            Check Equality
            </summary>
            <param name="obj">Object</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceRange.Equals(ClangNet.ClangSourceRange)">
            <summary>
            Check Equality
            </summary>
            <param name="other">Other Clang Source Range</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceRange.op_Equality(ClangNet.ClangSourceRange,ClangNet.ClangSourceRange)">
            <summary>
            Check Equality
            </summary>
            <param name="o1">Clang Source Range 1</param>
            <param name="o2">Clang Source Range 2</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceRange.op_Inequality(ClangNet.ClangSourceRange,ClangNet.ClangSourceRange)">
            <summary>
            Check Not Equality
            </summary>
            <param name="o1">Clang Source Range 1</param>
            <param name="o2">Clang Source Range 2</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangSourceRange.GetHashCode">
            <summary>
            Get Hash Code
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="T:ClangNet.ClangSourceRangeList">
            <summary>
            Managed Clang Source Range List
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRangeList.Source">
            <summary>
            Native Clang Source Range List
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRangeList.Count">
            <summary>
            Source Range Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRangeList.Ranges">
            <summary>
            Clang Source Range List
            </summary>
        </member>
        <member name="P:ClangNet.ClangSourceRangeList.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i">Index</param>
            <returns>Clang Source Range</returns>
        </member>
        <member name="M:ClangNet.ClangSourceRangeList.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Source Range List Pointer</param>
        </member>
        <member name="T:ClangNet.ClangToken">
            <summary>
            Managed Clang Token
            </summary>
        </member>
        <member name="P:ClangNet.ClangToken.TranslationUnit">
            <summary>
            Native Clang Translation Unit Pointer
            </summary>
        </member>
        <member name="P:ClangNet.ClangToken.Source">
            <summary>
            Native Clang Token
            </summary>
        </member>
        <member name="P:ClangNet.ClangToken.Kind">
            <summary>
            Token Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangToken.Spelling">
            <summary>
            Token Spelling
            </summary>
        </member>
        <member name="P:ClangNet.ClangToken.Location">
            <summary>
            Clang Source Location
            </summary>
        </member>
        <member name="P:ClangNet.ClangToken.Extent">
            <summary>
            Clang Source Range
            </summary>
        </member>
        <member name="M:ClangNet.ClangToken.#ctor(System.IntPtr,ClangNet.Native.CXToken)">
            <summary>
            Constructor
            </summary>
            <param name="translation_unit">Native Clang Translation Unit Pointer</param>
            <param name="source">Native Clang Token</param>
        </member>
        <member name="T:ClangNet.ClangTokenSet">
            <summary>
            Managed Clang Token Set
            </summary>
        </member>
        <member name="P:ClangNet.ClangTokenSet.TranslationUnit">
            <summary>
            Native Clang Translation Unit Pointer
            </summary>
        </member>
        <member name="P:ClangNet.ClangTokenSet.Source">
            <summary>
            Native Clang Token Set Pointer
            </summary>
        </member>
        <member name="P:ClangNet.ClangTokenSet.Count">
            <summary>
            Token Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangTokenSet.Tokens">
            <summary>
            Clang Token List
            </summary>
        </member>
        <member name="P:ClangNet.ClangTokenSet.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="i">Index</param>
            <returns>Clang Token</returns>
        </member>
        <member name="P:ClangNet.ClangTokenSet.AnnotateTokens">
            <summary>
            Annotate Token Clang Cursor List
            </summary>
        </member>
        <member name="M:ClangNet.ClangTokenSet.#ctor(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="translation_unit">Native Translation Unit Pointer</param>
            <param name="source">Native Clang Token Set Pointer</param>
            <param name="count">Clang Token Count</param>
        </member>
        <member name="M:ClangNet.ClangTokenSet.Dispose">
            <summary>
            Dispose Clang Token Set
            </summary>
        </member>
        <member name="T:ClangNet.ClangTargetInfo">
            <summary>
            Managed Clang Target Info
            </summary>
        </member>
        <member name="M:ClangNet.ClangTargetInfo.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Target Info Pointer</param>
        </member>
        <member name="P:ClangNet.ClangTargetInfo.Triple">
            <summary>
            Normalized Target Triple
            </summary>
        </member>
        <member name="P:ClangNet.ClangTargetInfo.PointerWidth">
            <summary>
            Pointer Width
            </summary>
        </member>
        <member name="M:ClangNet.ClangTargetInfo.Dispose">
            <summary>
            Dispose Clang Target Info
            </summary>
        </member>
        <member name="T:ClangNet.ClangTranslationUnit">
            <summary>
            Managed Clang Translation Unit
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.DiagnosticCount">
            <summary>
            Diagnostic Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.DiagnosticSet">
            <summary>
            Clang Diagnostic Set
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.Spelling">
            <summary>
            Translation Unit Spelling
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.DefaultSaveOptions">
            <summary>
            Default Translation Unit Save Options
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.DefaultReparseOptions">
            <summary>
            Default Translation Unit Reparse Options
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.TargetInfo">
            <summary>
            Clang Target Info
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.Cursor">
            <summary>
            Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnit.ResourceUsage">
            <summary>
            Clang Translation Unit Resource Usage
            </summary>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">Native Clang Translation Unit Pointer</param>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.IsFileMultipleIncludeGuarded(ClangNet.ClangFile)">
            <summary>
            Check File is Multiple Include Guarded
            </summary>
            <param name="file">Clang File</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetFile(System.String)">
            <summary>
            Get Clang File
            </summary>
            <param name="file_name">File Name</param>
            <returns>Clang</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetFileContents(ClangNet.ClangFile)">
            <summary>
            Get File Contents
            </summary>
            <param name="file">Clang File</param>
            <returns>File Contents Byte Array</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetLocation(ClangNet.ClangFile,System.UInt32,System.UInt32)">
            <summary>
            Get Clang Source Location
            </summary>
            <param name="file">Clang File</param>
            <param name="line">Line</param>
            <param name="column">Column</param>
            <returns>Clang Source Location</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetLocation(ClangNet.ClangFile,System.UInt32)">
            <summary>
            Get Clang Source Location
            </summary>
            <param name="file">Clang File</param>
            <param name="offset">Offset</param>
            <returns>Clang Source Location</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetSkippedRanges(ClangNet.ClangFile)">
            <summary>
            Get Skipped Clang Source Range List
            </summary>
            <param name="file">Clang File</param>
            <returns>Skipped Clang Source Range List</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetAllSkippedRanges">
            <summary>
            Get All Skipped Clang Source Range List
            </summary>
            <returns>All Skipped Clang Source Range List</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetDiagnostic(System.Int32)">
            <summary>
            Get Clang Diagnostic
            </summary>
            <param name="index">Index</param>
            <returns>Clang Diagnostic</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.Save(System.String,ClangNet.SaveTranslationUnitFlags)">
            <summary>
            Save Clang Translation Unit
            </summary>
            <param name="filename">File Name</param>
            <param name="options">Translation Unit Save Options</param>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.Suspend">
            <summary>
            Suspend Clang Translation Unit
            </summary>
            <returns>Suspend Result</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.Reparse(ClangNet.ClangUnsavedFile[],ClangNet.ReparseTranslationUnitFlags)">
            <summary>
            Reparse Clang Translation Unit
            </summary>
            <param name="unsaved_files">Clang Unsaved File Array</param>
            <param name="options">Translation Unit Reparse Options</param>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetCursor(ClangNet.ClangSourceLocation)">
            <summary>
            Get Clang Cursor
            </summary>
            <param name="loc">Clang Source Location</param>
            <returns>Clang Cursor</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetModuleForFile(ClangNet.ClangFile)">
            <summary>
            Get Clang Module for Clang File
            </summary>
            <param name="file">Clang File</param>
            <returns>Clang Module</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetTopLevelHeaderCount(ClangNet.ClangModule)">
            <summary>
            Get Top Level Header Count
            </summary>
            <param name="module">Clang Module</param>
            <returns>Top Level Header Count</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetTopLevelHeader(ClangNet.ClangModule,System.Int32)">
            <summary>
            Get Top Level Header Clang File
            </summary>
            <param name="module">Clang Module</param>
            <param name="i">Index</param>
            <returns>Top Level Header Clang File</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetToken(ClangNet.ClangSourceLocation)">
            <summary>
            Get Clang Token
            </summary>
            <param name="location">Clang Source Location</param>
            <returns>Clang Token</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.Tokenize(ClangNet.ClangSourceRange)">
            <summary>
            Tokenize Clang Source Range
            </summary>
            <param name="range">Clang Source Range</param>
            <returns>Clang Token Set</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetInclusions``1(System.Action{ClangNet.ClangFile,ClangNet.ClangSourceLocation[],``0},``0)">
            <summary>
            Get Inclusions
            </summary>
            <typeparam name="T">Client Data Type</typeparam>
            <param name="visitor">Managed Clang Inclusion Visitor Function</param>
            <param name="client_data">Client Data</param>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.FindIncludesInFile(ClangNet.ClangFile,System.Func{System.Object,ClangNet.ClangCursor,ClangNet.ClangSourceRange,ClangNet.VisitorResult})">
            <summary>
            Find Includes File
            </summary>
            <param name="file">Clang File</param>
            <param name="visitor">Managed Clang Cursor And Range Visitor Function</param>
            <returns>Find Result</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.Dispose">
            <summary>
            Dispose Clang Translation Unit
            </summary>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.Equals(System.Object)">
            <summary>
            Check Equality
            </summary>
            <param name="obj">Object</param>
            <returns>Check Reuslt</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.Equals(ClangNet.ClangTranslationUnit)">
            <summary>
            Check Equality
            </summary>
            <param name="other">Other Translation Unit</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.GetHashCode">
            <summary>
            Get Hash Code
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.CreateNativeInclusionVisitor``1(System.Action{ClangNet.ClangFile,ClangNet.ClangSourceLocation[],``0},``0)">
            <summary>
            Create Native Clang Inclusion Visitor
            </summary>
            <typeparam name="T">Client Data Type</typeparam>
            <param name="visitor">Managed Clang Inclusion Visitor Function</param>
            <param name="client_data">Client Data</param>
            <returns>Native Clang Inclusion Visitor</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnit.CreateNativeCursorAndRangeVisitor(System.Func{System.Object,ClangNet.ClangCursor,ClangNet.ClangSourceRange,ClangNet.VisitorResult})">
            <summary>
            Create Native Clang Cursor And Range Visitor
            </summary>
            <param name="visitor">Managed Clang Cursor And Range Visitor Function</param>
            <returns>Native Clang Cursor And Range Visitor</returns>
        </member>
        <member name="T:ClangNet.ClangTranslationUnitResourceUsage">
            <summary>
            Managed Clang Translation Unit Resource Usage
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnitResourceUsage.Source">
            <summary>
            Native Clang Translation Unit Resource Usage
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnitResourceUsage.EntryCount">
            <summary>
            Entry Count
            </summary>
        </member>
        <member name="M:ClangNet.ClangTranslationUnitResourceUsage.#ctor(ClangNet.Native.CXTUResourceUsage)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Translation Unit Resource Usage</param>
        </member>
        <member name="M:ClangNet.ClangTranslationUnitResourceUsage.GetEntry(System.Int32)">
            <summary>
            Get Clang Translation Unit Resource Usage Entry
            </summary>
            <param name="i">Index</param>
            <returns>Clang Translation Unit Resource Usage Entry</returns>
        </member>
        <member name="M:ClangNet.ClangTranslationUnitResourceUsage.Dispose">
            <summary>
            Dispose Clang Translation Unit Resource Usage
            </summary>
        </member>
        <member name="T:ClangNet.ClangTranslationUnitResourceUsageEntry">
            <summary>
            Managed Clang Translation Unit Resource Usaage Entry
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnitResourceUsageEntry.Source">
            <summary>
            Native Clang Translation Unit Resource Usage Entry
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnitResourceUsageEntry.Kind">
            <summary>
            Resource Usage Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangTranslationUnitResourceUsageEntry.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="M:ClangNet.ClangTranslationUnitResourceUsageEntry.#ctor(ClangNet.Native.CXTUResourceUsageEntry)">
            <summary>
            Constructor
            </summary>
            <param name="entry">Native Clang Translation Unit Resource Usage Entry</param>
        </member>
        <member name="T:ClangNet.ClangType">
            <summary>
            Managed Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.Source">
            <summary>
            Native Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.Spelling">
            <summary>
            Type Spelling
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.CanonicalType">
            <summary>
            Canonical Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.IsConstQualified">
            <summary>
            Const Qualified Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.IsVolatileQualified">
            <summary>
            Volatile Qualified Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.IsRestrictQualified">
            <summary>
            Restrict Qualified Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.AddressSpace">
            <summary>
            Address Space
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.TypedefName">
            <summary>
            Typedef Name
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.PointeeType">
            <summary>
            Pointee Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.TypeDeclaration">
            <summary>
            Typedef Declaration Clang Cursor
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ObjeCEncoding">
            <summary>
            Objective-C Type Encoding
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.FunctionTypeCallingConvention">
            <summary>
            Function Type Calling Convention
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ResultType">
            <summary>
            Function or Method Return Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ExceptionSpecificationType">
            <summary>
            Exception Specification Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ArgumentTypeCount">
            <summary>
            Argument Type Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ObjCObjectBaseType">
            <summary>
            Objective-C Base Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ObjCProtocolRefCount">
            <summary>
            Objective-C Protocol Reference Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ObjCTypeArgumentCount">
            <summary>
            Objective-C Type Argument Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.IsFunctionTypeVariadic">
            <summary>
            Variadic Function Type Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.IsPOD">
            <summary>
            POD(Plain Old Data) Type Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ElementType">
            <summary>
            Element Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ElementCount">
            <summary>
            Element Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ArrayElementType">
            <summary>
            Array Element Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ArraySize">
            <summary>
            Array Size
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.NamedType">
            <summary>
            Named Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.IsTransparentTagTypedef">
            <summary>
            Transparent Tag Typedef Flag
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.Nullability">
            <summary>
            Type Nullability Kind
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.AlignOf">
            <summary>
            Alignment of Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ClassType">
            <summary>
            Class Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.SizeOf">
            <summary>
            Size of Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.ModifiedType">
            <summary>
            Modified Clang Type
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.TemplateArgumentCount">
            <summary>
            Template Argument Count
            </summary>
        </member>
        <member name="P:ClangNet.ClangType.CxxRefQualifier">
            <summary>
            C++ Reference Qualifier Kind
            </summary>
        </member>
        <member name="M:ClangNet.ClangType.#ctor(ClangNet.Native.CXType)">
            <summary>
            Constructor
            </summary>
            <param name="source">Native Clang Type</param>
        </member>
        <member name="M:ClangNet.ClangType.GetArgumentType(System.Int32)">
            <summary>
            Get Argument Clang Type
            </summary>
            <param name="i">Index</param>
            <returns>Argument Clang Type</returns>
        </member>
        <member name="M:ClangNet.ClangType.GetObjCProtocolDecl(System.Int32)">
            <summary>
            Get Objective-C Protocol Declaration Clang Cursor
            </summary>
            <param name="i">Index</param>
            <returns>Objective-C Protocol Declaration Clang Cursor</returns>
        </member>
        <member name="M:ClangNet.ClangType.GetObjCTypeArgument(System.Int32)">
            <summary>
            Get Objective-C Argument Clang Type
            </summary>
            <param name="i">Index</param>
            <returns>Objective-C Argument Clang Type</returns>
        </member>
        <member name="M:ClangNet.ClangType.GetOffsetOf(System.String)">
            <summary>
            Offset of Field
            </summary>
            <param name="field_name">Field Name</param>
            <returns>Offset</returns>
        </member>
        <member name="M:ClangNet.ClangType.GetTemplateArgumentAsType(System.Int32)">
            <summary>
            Get Template Argument Clang Type
            </summary>
            <param name="i">Index</param>
            <returns>Template Argument Clang Type</returns>
        </member>
        <member name="M:ClangNet.ClangType.VisitFields(System.Func{ClangNet.ClangCursor,System.IntPtr,ClangNet.VisitorResult},System.IntPtr)">
            <summary>
            Visit Fields
            </summary>
            <param name="visitor">Managed Clang Field Visitor Function</param>
            <param name="client_data">Native Client Data Pointer</param>
            <returns>Visit Result</returns>
        </member>
        <member name="M:ClangNet.ClangType.CreateNativeFieldVisitor(System.Func{ClangNet.ClangCursor,System.IntPtr,ClangNet.VisitorResult})">
            <summary>
            Create Native Clang Field Visitor
            </summary>
            <param name="visitor">Managed Clang Field Visitor Function</param>
            <returns>Native Clang Field Visitor</returns>
        </member>
        <member name="M:ClangNet.ClangType.EqualsCore(ClangNet.ClangType)">
            <summary>
            Check Equality
            </summary>
            <param name="other">Other Clang Type</param>
            <returns>Check Result</returns>
        </member>
        <member name="M:ClangNet.ClangType.GetHashCodeCore">
            <summary>
            Get Hash Code
            </summary>
            <returns>Hash Code</returns>
        </member>
    </members>
</doc>
